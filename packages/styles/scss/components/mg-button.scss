@use '../variables' as variables;

/*!
 * @prop --mg-c-button-border-radius: Defines the border radius of the button. The default value is `--mg-b-size-radius`.
 * @prop --mg-c-button-border-top-width: Defines the top border width of the button. Unset by default, fallback on `--mg-b-size-border`.
 * @prop --mg-c-button-border-right-width: Defines the right border width of the button. Unset by default, fallback on `--mg-b-size-border`.
 * @prop --mg-c-button-border-bottom-width: Defines the bottom border width of the button. Unset by default, fallback on `--mg-b-size-border`.
 * @prop --mg-c-button-border-left-width: Defines the left border width of the button. Unset by default, fallback on `--mg-b-size-border`.
 * @prop --mg-c-button-border-radius-top-left: Defines the top left border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`.
 * @prop --mg-c-button-border-radius-top-right: Defines the top right border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`.
 * @prop --mg-c-button-border-radius-bottom-right: Defines the bottom right border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`.
 * @prop --mg-c-button-border-radius-bottom-left: Defines the bottom left border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`.
 * @prop --mg-c-button-font-weight: Defines the font weight of the button. Unset by default, fallback on `normal`.
 * @prop --mg-c-button-disabled-opacity: Defines the opacity of the button when disabled. The default value is `--mg-b-disabled-opacity`.
 * @prop --mg-c-button-icon-border-radius: Defines the border radius of the button in icon mode. The default value is `--mg-b-size-min-height`.
 */

@mixin font-style() {
  font-family: inherit;
  font-size: var(--mg-b-font-size);
  font-weight: var(--mg-c-button-font-weight, normal);
  text-align: left;
  text-decoration: none;
}

:host {
  display: inline-block;
  max-width: 100%;
  vertical-align: middle;
}

// Only apply if not disabled
:host(:hover) .mg-c-button--flat:not(.mg-c-button--disabled) {
  background: color-mix(in srgb, var(--mg-b-color-dark), transparent 90%);
}

:host([full-width]) {
  display: block;
}

// Prevent click propagation when disabled
:host([disabled]),
:host([aria-disabled='true']) {
  pointer-events: none;
}

@each $name, $palette, $index in join(join(variables.$brands, variables.$semantics), 'danger-alt') {
  .mg-c-button.mg-c-button--#{$name} {
    /*!
     * @prop --mg-c-button-#{$name}-background-color: Defines the background color for the #{$name} variant button.
     * @prop --mg-c-button-#{$name}-border-color: Defines the border color for the #{$name} variant button.
     * @prop --mg-c-button-#{$name}-gradient-color: Defines the gradient color for the #{$name} variant button.
     * @prop --mg-c-button-#{$name}-font-color: Defines the font color for the #{$name} variant button.
     */
    border-color: var(--mg-c-button-#{$name}-border-color);
    background: linear-gradient(to bottom, var(--mg-c-button-#{$name}-background-color), var(--mg-c-button-#{$name}-gradient-color));
    color: var(--mg-c-button-#{$name}-font-color);
  }

  // Only apply if not disabled
  :host(:hover) .mg-c-button.mg-c-button--#{$name}:not(.mg-c-button--disabled) {
    background: var(--mg-c-button-#{$name}-background-color);
  }
}

/* Styles */
.mg-c-button {
  $padding-value: calc((var(--mg-b-size-min-height) - (2 * var(--mg-b-size-border)) - (var(--mg-b-font-size) * var(--mg-b-line-height))) / 2) var(--mg-b-size-12);

  position: relative;
  display: inline-flex;
  min-height: var(--mg-b-size-min-height);
  box-sizing: border-box;
  align-items: center;
  padding: $padding-value;
  border-width: var(--mg-c-button-border-top-width, var(--mg-b-size-border)) var(--mg-c-button-border-right-width, var(--mg-b-size-border))
    var(--mg-c-button-border-bottom-width, var(--mg-b-size-border)) var(--mg-c-button-border-left-width, var(--mg-b-size-border));
  border-style: solid;
  border-radius: var(--mg-c-button-border-radius-top-left, var(--mg-c-button-border-radius)) var(--mg-c-button-border-radius-top-right, var(--mg-c-button-border-radius))
    var(--mg-c-button-border-radius-bottom-right, var(--mg-c-button-border-radius)) var(--mg-c-button-border-radius-bottom-left, var(--mg-c-button-border-radius));
  background-image: none;
  column-gap: var(--mg-b-size-8);
  cursor: pointer;
  touch-action: manipulation;

  // Font (necessary for stylesheet only)
  @include font-style;

  // Disabled style
  &.mg-c-button--disabled {
    cursor: default;
    opacity: var(--mg-c-button-disabled-opacity);
  }

  // Icon only button
  &.mg-c-button--icon {
    width: var(--mg-b-size-min-height);
    height: var(--mg-b-size-min-height);
    justify-content: center;
    padding: 0;
    border-radius: var(--mg-c-button-border-radius-top-left, var(--mg-c-button-icon-border-radius))
      var(--mg-c-button-border-radius-top-right, var(--mg-c-button-icon-border-radius)) var(--mg-c-button-border-radius-bottom-right, var(--mg-c-button-icon-border-radius))
      var(--mg-c-button-border-radius-bottom-left, var(--mg-c-button-icon-border-radius));
    font-size: var(--mg-b-font-size);
    line-height: var(--mg-b-font-size);
  }

  // Flat variant
  &.mg-c-button--flat {
    border: none;
    background: none;
  }

  slot,
  ::slotted(*:not(mg-icon)) {
    @include font-style;

    display: flex;
    align-items: center;
    column-gap: var(--mg-b-size-8);
  }

  // Link variant
  &.mg-c-button--link {
    min-height: unset;
    padding: unset;
    border: unset;
    border-radius: unset;
    background: unset;
    text-decoration: underline;

    slot {
      font-weight: 600;
    }

    &:hover {
      text-decoration: none;
    }
  }

  // full-width style
  &.mg-c-button--full-width {
    display: flex;
    justify-content: center;
  }

  mg-icon:only-child,
  ::slotted(mg-icon) {
    display: inline-flex;
    flex-shrink: 0;
    margin: auto 0;
    line-height: 1;
  }

  // loading style
  &.mg-c-button--loading {
    & > mg-icon:first-of-type {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .mg-c-button__content {
      opacity: 0;
    }
  }
}

:host(:focus-visible) {
  outline: 0;

  // same style as chrome
  .mg-c-button {
    /* stylelint-disable declaration-block-no-redundant-longhand-properties */
    outline-color: -webkit-focus-ring-color;
    outline-style: auto;
    outline-width: 0.2rem;
    /* stylelint-enable declaration-block-no-redundant-longhand-properties */
  }
}
