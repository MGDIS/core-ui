@use 'sass:list';
@use '../variables' as variables;
@import '../utils/a11y';

/*!
 * @prop --mg-c-badge-size: Defines the height and minimum width of the badge. The default value is `--mg-b-size-16`.
 * @prop --mg-c-badge-font-size: Defines the font size of the badge. The default value is `--mg-b-font-size-small`.
 * @prop --mg-c-badge-text-color: Defines the font color of the badge when used with the `text-color` variant and without `outline`. The default value is `--mg-b-color-light`.
 */

/* Styles */
.mg-c-badge {
  min-width: var(--mg-c-badge-size);
  height: var(--mg-c-badge-size);
  box-sizing: border-box;
  padding: 0 var(--mg-b-size-4);
  border: var(--mg-b-size-border) solid;
  border-radius: calc(var(--mg-c-badge-size) / 2);
  font-size: var(--mg-c-badge-font-size);
  font-weight: 600;
  line-height: var(--mg-c-badge-size);
  text-align: center;

  // Variant
  @each $name, $palette, $index in list.join(list.join(variables.$brands, variables.$semantics), 'text-color') {
    &.mg-c-badge--#{$name} {
      @if $name == 'text-color' {
        border-color: currentcolor;
        background-color: currentcolor;

        .mg-c-badge__value {
          color: var(--mg-c-badge-text-color, var(--mg-b-color-light));
        }
      } @else {
        border-color: var(--mg-b-color-#{$name});
        background-color: var(--mg-b-color-#{$name});
        color: var(--mg-b-color-text-on-#{$name});
      }

      &.mg-c-badge--outline {
        background-color: transparent;

        @if $name == 'text-color' {
          .mg-c-badge__value {
            color: currentcolor;
          }
        } @else {
          color: var(--mg-b-color-#{$name});
        }
      }
    }
  }
}

.mg-c-badge,
mg-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}
