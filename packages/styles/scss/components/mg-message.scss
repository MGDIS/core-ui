@use '../variables' as variables;
@use 'sass:list';
@import 'mixins/reset-mg-card-slotted-variables';

:host {
  // Set mg-card variables
  --mg-c-card-padding: 0;
  --mg-c-card-border-radius: var(--mg-c-message-border-radius);
  --mg-c-card-border: none;
  --mg-c-card-overflow: hidden;
}

.mg-c-message {
  display: inline-block;
  min-height: var(--mg-b-size-min-height);

  @each $semantic in variables.$semantics {
    $variant: list.nth($semantic, 1);
    &.mg-c-message--#{$variant} .mg-c-message__icon {
      color: var(--mg-b-color-#{$variant});
    }
  }

  &.mg-c-message--close-button {
    --mg-c-card-padding: 0 var(--mg-b-size-min-height) 0 0;
  }

  ::slotted(*) {
    padding: 0;

    // Removing default marging to slotted element
    margin: 0;
  }

  &__icon {
    position: absolute;
    top: calc((var(--mg-b-size-min-height) - var(--mg-c-icon-regular-size)) / 2);
    left: calc(var(--mg-b-size-v) + var(--mg-b-size-w)); // vertical bar + spacing
    line-height: 1;
  }

  &__content {
    display: flex;
    flex-wrap: wrap;
    padding: 0 var(--mg-b-size-w) 0 calc(var(--mg-b-size-v) + var(--mg-b-size-w) + var(--mg-c-icon-regular-size) + var(--mg-b-size-w)); // vertical bar + spacing + icon + spacing;
    place-content: stretch flex-end;
  }

  &__content-slot {
    flex-grow: 1;
    margin: var(--mg-b-size-w) 0;
  }

  &__content-separator {
    display: inline-block;
    width: var(--mg-b-size-5w);
    height: 0;
  }

  &__content-actions-slot {
    padding: var(--mg-b-size-w) 0;
    text-align: right;
  }

  &__close-button {
    position: absolute;
    top: 0;
    right: 0;
  }

  @include reset-slot-card-variables;

  &,
  mg-message {
    max-width: 100%;
  }
}
