@use 'sass:list';
@use 'sass:string';
@use '../variables' as variables;
@use '../functions' as functions;

/*!
 * @prop --mg-c-tag-height: Defines the height of the tag. Default value is `--mg-b-size-24`.
 * @prop --mg-c-tag-border-radius: Defines the border radius of the tag. Default value is `--mg-b-size-radius`.
 * @prop --mg-c-tag-font-size: Defines the font size of the tag. Default value is `--mg-b-font-size-small`.
 */

:host {
  display: inline-block;
}

/* Styles */
.mg-c-tag {
  $padding-vertical: calc((var(--mg-c-tag-height) - (2 * var(--mg-b-size-border)) - (var(--mg-c-tag-font-size) * var(--mg-b-line-height))) / 2);
  $padding-horizontal: calc(var(--mg-b-size-8) - var(--mg-b-size-border));

  display: inline-flex;
  min-height: var(--mg-c-tag-height);
  box-sizing: border-box;
  align-items: center;
  padding: $padding-vertical $padding-horizontal;
  border: var(--mg-b-size-border) solid;
  border-radius: var(--mg-c-tag-border-radius);
  font-size: var(--mg-c-tag-font-size);
  font-weight: 600;
  vertical-align: middle;

  // Variant
  @each $name, $palette, $index in list.join(variables.$brands, variables.$semantics) {
    $color: var(--mg-b-color-#{$name});

    @if $palette == 'neutral' {
      $color: var(--mg-b-color-#{$palette}-#{$index});
    }

    &.mg-c-tag--#{$name} {
      border-color: $color;
      background-color: $color;
      color: var(--mg-b-color-text-on-#{$name});

      &.mg-c-tag--outline {
        background-color: transparent;
        color: $color;
      }

      &.mg-c-tag--soft {
        border-color: var(--mg-b-color-#{$palette}-#{variables.$palette-index-light});
        background-color: var(--mg-b-color-#{$palette}-#{variables.$palette-index-light});
        color: var(--mg-b-color-dark);
        font-weight: 400;

        ::slotted(mg-icon) {
          @if $name == 'secondary' {
            color: var(--mg-b-color-text-on-#{$name});
          } @else {
            color: $color;
          }
        }
      }
    }
  }
}

::slotted(mg-icon) {
  align-self: start;
  margin-right: var(--mg-b-size-4);
}

::slotted(mg-icon[size='small']) {
  margin-top: calc(var(--mg-b-line-height) * 1rem - var(--mg-b-size-12)); // line-height - mg-icon[size="small"].size
}

slot {
  display: inline-flex;
  align-items: center;
}
