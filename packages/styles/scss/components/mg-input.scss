@use 'sass:list';
@use '../variables' as variables;
@import '../utils/a11y';

/*!
 * @prop --mg-c-input-border-width: Defines the width of the input border. Default value is `--mg-b-size-border`.
 * @prop --mg-c-input-border-radius: Defines the border radius of the input. Default value is `--mg-b-size-radius`.
 * @prop --mg-c-input-color-border: Defines the color of the input border. Default value is `rgb(181, 194, 201)`.
 * @prop --mg-c-input-placeholder-color-text: Defines the color of the placeholder text. Default value is `rgb(181, 194, 201)`.
 * @prop --mg-c-input-color-box-shadow-focus: Defines the shadow color of the input when focused. Default value is `rgba(0, 221, 255, 0.5)`.
 * @prop --mg-c-input-error-color-background: Defines the background color of the input error message. Default value is `color-mix(in srgb, var(--mg-b-color-danger), white 95%)`.
 * @prop --mg-c-input-toggle-border-radius-ratio: Defines the border radius ratio of the input toggle. Default value is `2`.
 * @prop --mg-c-input-check-size: Defines the size of the input check. Default value is `--mg-b-size-16`.
 */

:host {
  display: block;
}

mg-icon {
  .mg-c-input__input &,
  .mg-c-input__error & {
    display: flex;
  }
}

/* Label-on-top */
@mixin label-on-top-styles {
  flex-direction: column;

  .mg-c-input__title {
    width: 100%;
    flex: 0;
    justify-content: flex-start;
    margin-top: 0;
    margin-right: 0;
    margin-bottom: var(--mg-b-size-4);
    text-align: left;

    ::slotted(mg-input-title) {
      flex-shrink: 1;
    }
  }
}

.mg-c-input {
  display: flex;
  min-height: var(--mg-b-size-min-height);
  align-items: flex-start;

  &__input-container {
    width: 100%;
    min-height: var(--mg-b-size-min-height);

    mg-tooltip {
      display: inline-flex;
      width: list.nth(list.nth(variables.$icons, 2), 2);
      height: list.nth(list.nth(variables.$icons, 2), 2);
      margin-left: var(--mg-b-size-8);

      @media print {
        display: none;
      }
    }
  }

  &__input {
    display: flex;
    min-height: var(--mg-b-size-min-height);
    align-items: center;
    justify-content: start;

    mg-tooltip {
      align-self: baseline;
      margin-top: calc((var(--mg-b-size-min-height) - list.nth(list.nth(variables.$icons, 2), 2)) / 2);
    }

    /* Set custom opacity on disabled input */
    ::slotted(.mg-c-input__button-toggle:disabled) {
      opacity: var(--mg-b-opacity-element-disabled);
    }
  }

  /* Label */
  &__title {
    display: flex;
    width: var(--mg-c-input-title-width, auto);
    flex-shrink: 0;
    align-items: baseline;
    justify-content: flex-end;
    margin-top: calc((var(--mg-b-size-min-height) - var(--mg-b-font-size) * var(--mg-b-line-height)) / 2);
    margin-right: var(--mg-c-input-title-horizontal-space, var(--mg-b-size-8));
    text-align: right;

    slot[name='label'] + mg-tooltip {
      margin-left: var(--mg-b-size-4);
    }

    mg-icon {
      display: inline-flex;
      vertical-align: text-bottom;
    }
  }

  &__error {
    display: inline-block;
    padding: var(--mg-b-size-4) var(--mg-b-size-8);
    border-radius: var(--mg-b-size-radius);
    background: var(--mg-c-input-error-color-background);
    color: var(--mg-b-color-danger);
  }

  &__error,
  &__help-text {
    /* Manage slot style */
    ::slotted(*) {
      font-size: var(--mg-b-font-size-small);
      text-align: start;
    }
  }

  /* Manage space between input and first message */
  :host(:not(&--textarea)) &__input + & {
    &__error,
    &__help-text {
      margin-top: var(--mg-b-size-4);
    }
  }

  :host(.mg-c-input.mg-c-input--readonly) &__input mg-tooltip {
    margin-top: calc((var(--mg-b-size-min-height) - var(--mg-b-font-size) * var(--mg-b-line-height)) / 2);
  }
}

:host(.mg-c-input) {
  display: flex;
  margin-bottom: var(--mg-c-input-margin-bottom, 0);
}

:host(.mg-c-input.mg-c-input--checkbox),
:host(.mg-c-input.mg-c-input--radio) {
  .mg-c-input__input {
    min-height: unset;
    align-items: flex-start;
  }
}

:host(.mg-c-input.mg-c-input--checkbox, .mg-c-input.mg-c-input--radio) .mg-c-input__input {
  min-height: unset;
}

:host(.mg-c-input.mg-c-input--fieldset:not(.mg-c-input--checkbox-multi, .mg-c-input--readonly)) .mg-c-input__input-container mg-tooltip {
  margin-left: var(--mg-b-size-32);
}

:host(.mg-c-input.mg-c-input--label-on-top) {
  @include label-on-top-styles;
}

@media screen and (max-width: (variables.$mg-input-breakpoint - 1px)) {
  :host(.mg-c-input) {
    @include label-on-top-styles;
  }
}
