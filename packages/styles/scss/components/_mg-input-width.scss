/**
 * Used to define width input
 * Kept it nested for coming widths
 */

@mixin input-width($size) {
  .mg-c-input__box {
    width: $size;
  }

  .mg-c-input__with-character-left {
    &:not(:has(textarea)) .mg-c-input__box {
      /* This calculation determines the total width of the input:
       * - Starts with the base width ($size)
       * - Adds extra space for the character counter message
       * - The extra space is calculated by:
       *   * Taking the length of the counter message (--mg-c-character-left-message-length)
       *   * Multiplying it by (0.35ch + 0.3rem), which is the width of each character with a calculated value (because each character has a different width)
       */
      width: calc(#{$size} + (var(--mg-c-character-left-message-length) * (0.35ch + 0.3rem)));
    }
  }
}

.mg-c-input {
  &__input-container {
    width: 100%;
    flex: 1 auto;
  }

  /**
  * Variations
  */

  &.mg-c-input--width-full {
    .mg-c-input__box {
      width: 100%;
    }
  }

  &.mg-c-input--width-2,
  &.mg-c-input--width-4,
  &.mg-c-input--width-16 {
    .mg-c-input__with-character-left {
      width: max-content;

      &:has(textarea) {
        flex-grow: inherit;
      }
    }
  }

  &.mg-c-input--width-2 {
    @include input-width(var(--mg-b-size-48));
  }

  &.mg-c-input--width-4 {
    @include input-width(var(--mg-b-size-72));
  }

  &.mg-c-input--width-16 {
    @include input-width(calc(26 * var(--mg-b-size-8)));
  }

  &.mg-c-input--width-full:not(.mg-c-input--label-on-top) {
    justify-content: stretch;
  }

  &.mg-c-input--is-input-group-append,
  &.mg-c-input--is-append-input-slot-content {
    ::slotted([slot='append-input']) {
      width: auto;
    }
  }
}

/**
* Slots
*/

:host(.mg-c-input.mg-c-input--width-full) ::slotted(*:not(mg-input-title)) {
  width: 100%;
  max-width: 100%;
}
