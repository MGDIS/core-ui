@import '../utils/a11y';

:host {
  display: inline-flex;
  vertical-align: middle;
}

$sizes: ('small', 'regular', 'medium', 'large', 'extra-large');
$colors: ('success', 'warning', 'danger', 'info', 'app');
$variant-styles: ('icon', 'background', 'full');

@function get-color-prefix($color) {
  @if $color == 'app' {
    @return 'mg-color';
  }

  @return 'color';
}

@mixin variant-size($size) {
  &[size='#{$size}'],
  &.mg-c-icon--size-#{$size} {
    width: var(--mg-icon-#{$size}-size);
    height: var(--mg-icon-#{$size}-size);

    &[class*='mg-c-icon--variant-']:not(.mg-c-icon--variant-style-icon) {
      padding: calc(var(--mg-icon-#{$size}-size) / 2);
    }
  }
}

@mixin variant-style($style) {
  @each $color in $colors {
    &.mg-c-icon--variant-#{$color}.mg-c-icon--variant-style-#{$style} {
      $custom-property-color-h: --#{get-color-prefix($color)}-#{$color}-h;
      $custom-property-color-s: --#{get-color-prefix($color)}-#{$color}-s;

      @if $style == 'icon' or $style == 'full' {
        $custom-property-color-l: --#{get-color-prefix($color)}-#{$color}-l;
        $color-value: hsl(var($custom-property-color-h) var($custom-property-color-s) var($custom-property-color-l));

        color: $color-value;
      }

      @if $style == 'background' or $style == 'full' {
        $background-color-value: hsl(var($custom-property-color-h) var($custom-property-color-s) var(--mg-color-soft-l));

        background-color: $background-color-value;
      }
    }
  }
}

.mg-c-icon {
  color: currentcolor;

  @each $size in $sizes {
    @include variant-size($size);
  }

  @each $style in $variant-styles {
    @include variant-style($style);
  }

  &[class*='mg-c-icon--variant-'] {
    border-radius: var(--mg-icon-border-radius);
  }
}

/**
* Animations
**/

.mg-c-icon--spin {
  animation-duration: 0.75s;
  animation-iteration-count: infinite;
  animation-name: rotate;
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
