@use '../variables' as variables;
@import '../utils/a11y';

/*!
 * @prop --mg-c-icon-small-size: Defines the size of small icons. Default value is `--mg-b-size-3v`.
 * @prop --mg-c-icon-medium-size: Defines the size of medium icons. Default value is `--mg-b-size-2w`.
 * @prop --mg-c-icon-large-size: Defines the size of large icons. Default value is `--mg-b-size-5v`.
 * @prop --mg-c-icon-xlarge-size: Defines the size of extra large icons. Default value is `--mg-b-size-3w`.
 * @prop --mg-c-icon-xxlarge-size: Defines the size of double extra large icons. Default value is `--mg-b-size-4w`.
 * @prop --mg-c-icon-border-radius: Defines the border radius of icons. Default value is `50%`.
 */

:host {
  display: inline-flex;
  vertical-align: middle;
}

.mg-c-icon {
  color: currentcolor;

  @each $size in 'small', 'medium', 'large', 'xlarge', 'xxlarge' {
    &[size='#{$size}'],
    &.mg-c-icon--size-#{$size} {
      width: var(--mg-c-icon-#{$size}-size);
      height: var(--mg-c-icon-#{$size}-size);

      &[class*='mg-c-icon--variant-']:not(.mg-c-icon--variant-style-icon) {
        padding: calc(var(--mg-c-icon-#{$size}-size) / 2);
      }
    }
  }

  @each $style in 'icon', 'background', 'full' {
    @each $variant, $color in join(variables.$app, variables.$semantics) {
      &.mg-c-icon--variant-#{$variant}.mg-c-icon--variant-style-#{$style} {
        @if $style == 'icon' or $style == 'full' {
          color: var(--mg-b-color-#{$variant});
        }

        @if $style == 'background' or $style == 'full' {
          background-color: var(--mg-b-color-#{$color}-#{variables.$palette-index-light}, color-mix(in srgb, var(--mg-b-color-#{$variant}), white 80%));
        }
      }
    }
  }

  &[class*='mg-c-icon--variant-'] {
    border-radius: var(--mg-c-icon-border-radius);
  }
}

/**
* Animations
**/

.mg-c-icon--spin {
  animation-duration: 0.75s;
  animation-iteration-count: infinite;
  animation-name: rotate;
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
