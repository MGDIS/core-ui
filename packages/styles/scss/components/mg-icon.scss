@use 'sass:list';
@use 'sass:map';
@use '../variables' as variables;
@import '../utils/a11y';

/*!
 * @prop --mg-c-icon-border-radius: Defines the border radius of icons. Default value is `50%`.
 */

:host {
  display: inline-flex;
  vertical-align: middle;
}

.mg-c-icon {
  color: currentcolor;

  @each $name, $size, $spacing in variables.$icons {
    /*!
     * @prop --mg-c-icon-size-#{$name}: Defines the size of #{$name} icons. Default value is `#{$size}`.
     */
    &[size='#{$name}'],
    &.mg-c-icon--size-#{$name} {
      width: var(--mg-c-icon-size-#{$name});
      height: var(--mg-c-icon-size-#{$name});

      &[class*='mg-c-icon--variant-']:not(.mg-c-icon--variant-style-icon) {
        padding: $spacing;
      }
    }
  }

  @each $style in 'icon', 'background', 'full' {
    @each $variant, $color in list.join(variables.$app, variables.$semantics) {
      &.mg-c-icon--variant-#{$variant}.mg-c-icon--variant-style-#{$style} {
        @if $style == 'icon' or $style == 'full' {
          color: var(--mg-b-color-#{$variant});
        }

        @if $style == 'background' or $style == 'full' {
          background-color: var(--mg-b-color-#{$color}-#{variables.$palette-index-light}, color-mix(in srgb, var(--mg-b-color-#{$variant}), white 80%));
        }
      }
    }
  }

  &[class*='mg-c-icon--variant-'] {
    overflow: visible;
    border-radius: var(--mg-c-icon-border-radius);
  }
}

/**
* Animations
**/

.mg-c-icon--spin {
  animation-duration: 0.75s;
  animation-iteration-count: infinite;
  animation-name: rotate;
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
