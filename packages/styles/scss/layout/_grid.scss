@use 'sass:math';

// Number of column
$grid-columns: 12;

/**
 * Grid container. 
 * Grid is based on a #{$grid-columns}-column layout. 
 * This class defines the grid container and its responsive behavior.
 *
 * @page Layout
 * @example
 * ```html
 * <div class="mg-l-grid">
 *   <div class="mg-l-grid__col">Column 1</div>
 *   <div class="mg-l-grid__col">Column 2</div>
 * </div>
 * ```
 */
.mg-l-grid {
  display: flex;
  flex-wrap: wrap;
}

/**
 * Grid columns.
 * Space will be equaly distributed between columns.
 * 
 * @page Layout
 * @example
 * ```html
 * <div class="mg-l-grid">
 *   <div class="mg-l-grid__col">Column 1</div>
 *   <div class="mg-l-grid__col">Column 2</div>
 *   <div class="mg-l-grid__col">Column 3</div>
 * </div>
 * ```
 */
.mg-l-grid__col {
  flex: 1 0 0;
  padding: 0 var(--mg-l-grid-spacing);
}

/**
  * Sized grid column.  
  * Grid is based on a #{$grid-columns}-column layout.  
  *
  * @page Layout
  * @selectors .mg-l-grid__col-<n>
  * @example
  * ```html
  * <div class="mg-l-grid">
  *   <div class="mg-l-grid__col-3">Column width 3</div>
  *   <div class="mg-l-grid__col-6">Column width 6</div>
  *   <div class="mg-l-grid__col-3">Column width 3</div>
  * </div>
  * ```
  */
@for $i from 1 through $grid-columns {
  .mg-l-grid__col-#{$i} {
    width: math.percentage(math.div($i, $grid-columns));
    flex: 0 0 auto;
    padding: 0 var(--mg-l-grid-spacing);
  }
}

/**
 * Grid column offset size.
 * 
 * @page Layout
 * @selectors .mg-l-grid__col--offset-<n>
 * @example
 * ```html
 * <div class="mg-l-grid">
 *   <div class="mg-l-grid__col-2 mg-l-grid__col--offset-2">Column 1</div>
  *   <div class="mg-l-grid__col-8">Column 2</div>
 * </div>
 * ```
 */
@for $i from 1 through $grid-columns - 1 {
  [class*='mg-l-grid__col-'].mg-l-grid__col--offset-#{$i} {
    margin-inline-start: math.percentage(math.div($i, $grid-columns));
  }
}
