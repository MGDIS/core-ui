// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mg-input-numeric Should update mg-width 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--width-2">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric Should update mg-width 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--width-4">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric Should update mg-width 3`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--width-16">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric Should update mg-width 4`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--width-full">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric display error message with locale: fr 1`] = `
<mg-input-numeric lang="fr">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        Ce champ est obligatoire.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric display error message with locale: xx 1`] = `
<mg-input-numeric lang="xx">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric should display override error with setError component's public method 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric should display override error with setError component's public method 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric should display override error with setError component's public method 3`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric should display override error with setError component's public method 4`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        Override error
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format currency args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        $1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format currency args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="$1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format none args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1234567890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format none args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1234567890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format number args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Format number args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  disabled: true,
  value: '1234567890'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  labelHide: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title mg-u-visually-hidden">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  readonly: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  readonly: true,
  labelOnTop: true,
  tooltip: 'Tooltip message'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  readonly: true,
  value: '1234567890'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  readonly: true,
  value: '1234567890',
  lang: 'fr'
}: 1`] = `
<mg-input-numeric lang="fr" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1 234 567 890,00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  readonly: true,
  value: '1234567890',
  lang: 'xx'
}: 1`] = `
<mg-input-numeric lang="xx" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  required: true,
  disabled: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" required="" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  required: true,
  readonly: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="true" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  required: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  tooltip: 'My Tooltip Message'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
            <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
              <mg-icon>
                <mock:shadow-root>
                  <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                    <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                  </svg>
                </mock:shadow-root>
              </mg-icon>
            </mg-tooltip>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  tooltip: 'My Tooltip Message',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  tooltip: 'My Tooltip Message',
  tooltipPosition: 'input',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  tooltip: 'My Tooltip Message',
  tooltipPosition: 'label'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  value: '1234567890',
  currency: 'EUR'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  value: '1234567890',
  lang: 'fr'
}: 1`] = `
<mg-input-numeric lang="fr" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1 234 567 890,00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'decimal',
  value: '1234567890',
  lang: 'xx'
}: 1`] = `
<mg-input-numeric lang="xx" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should render with args { label: 'label', identifier: 'identifier', type: 'decimal' }: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should trigger events 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should update display value when value props change 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal Should update display value when value props change 2`] = `
<mg-input-numeric value="10">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="10.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal display error with displayError component's public method 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal display error with displayError component's public method 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal readonly false Should render with slot 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-input-group-append mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <mg-button aria-label="search" role="button" slot="append-input" tabindex="0">
    <mock:shadow-root>
      <div class="mg-c-button mg-c-button--primary">
        <div class="mg-c-button__content">
          <slot></slot>
        </div>
      </div>
    </mock:shadow-root>
    <mg-icon>
      <mock:shadow-root>
        <svg aria-hidden="true" class="mg-c-icon mg-c-icon--calculator mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.8.7H3.2c-.3 0-.5.2-.5.5v13.7c0 .3.2.5.5.5h9.7c.3 0 .5-.2.5-.5V1.2c-.1-.3-.3-.5-.6-.5M5.6 13.4q0 .3-.3.3H4.1q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H4.1q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3H7.4q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H7.4q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3h-1.2q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm0-7.2q0 .3-.3.3H4.1q-.3 0-.3-.3V2.6q0-.3.3-.3h7.8q.3 0 .3.3z" fill="currentColor"></path>
        </svg>
      </mock:shadow-root>
    </mg-icon>
    Calculate
  </mg-button>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal readonly false Should render with slot 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-append-input-slot-content mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <span slot="append-input">
    km
  </span>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal readonly true Should render with slot 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-input-group-append mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        3.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <mg-button aria-label="search" role="button" slot="append-input" tabindex="0">
    <mock:shadow-root>
      <div class="mg-c-button mg-c-button--primary">
        <div class="mg-c-button__content">
          <slot></slot>
        </div>
      </div>
    </mock:shadow-root>
    <mg-icon>
      <mock:shadow-root>
        <svg aria-hidden="true" class="mg-c-icon mg-c-icon--calculator mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.8.7H3.2c-.3 0-.5.2-.5.5v13.7c0 .3.2.5.5.5h9.7c.3 0 .5-.2.5-.5V1.2c-.1-.3-.3-.5-.6-.5M5.6 13.4q0 .3-.3.3H4.1q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H4.1q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3H7.4q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H7.4q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3h-1.2q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm0-7.2q0 .3-.3.3H4.1q-.3 0-.3-.3V2.6q0-.3.3-.3h7.8q.3 0 .3.3z" fill="currentColor"></path>
        </svg>
      </mock:shadow-root>
    </mg-icon>
    Calculate
  </mg-button>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal readonly true Should render with slot 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-append-input-slot-content mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <span class="mg-c-input__readonly-value">
        <b>
          3.00
        </b>
        km
      </span>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <span slot="append-input">
    km
  </span>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal validity, case next state is disabled validity ({ validity: false, valueMissing: true }) 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal validity, case next state is disabled validity ({ validity: false, valueMissing: true }) 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal validity, case next state is readonly validity ({ validity: false, valueMissing: true }) 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type decimal validity, case next state is readonly validity ({ validity: false, valueMissing: true }) 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format currency args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        $1,234,567,890.00
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format currency args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="$1,234,567,890.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format none args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1234567890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format none args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1234567890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format number args { readonly: true } 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Format number args {} 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  disabled: true,
  value: '1234567890'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  labelHide: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title mg-u-visually-hidden">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  readonly: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  readonly: true,
  labelOnTop: true,
  tooltip: 'Tooltip message'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  readonly: true,
  value: '1234567890'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  readonly: true,
  value: '1234567890',
  lang: 'fr'
}: 1`] = `
<mg-input-numeric lang="fr" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1 234 567 890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  readonly: true,
  value: '1234567890',
  lang: 'xx'
}: 1`] = `
<mg-input-numeric lang="xx" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  required: true,
  disabled: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" required="" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  required: true,
  readonly: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        1,234,567,890
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="true" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  required: true,
  value: '1234567890',
  helpText: 'My help text'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  tooltip: 'My Tooltip Message'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
            <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
              <mg-icon>
                <mock:shadow-root>
                  <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                    <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                  </svg>
                </mock:shadow-root>
              </mg-icon>
            </mg-tooltip>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  tooltip: 'My Tooltip Message',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  tooltip: 'My Tooltip Message',
  tooltipPosition: 'input',
  labelOnTop: true
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--label-on-top mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  tooltip: 'My Tooltip Message',
  tooltipPosition: 'label'
}: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
          <mg-tooltip identifier="identifier-tooltip" message="My Tooltip Message">
            <mg-icon>
              <mock:shadow-root>
                <svg aria-hidden="true" class="mg-c-icon mg-c-icon--info-circle mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                  <path clip-rule="evenodd" d="M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.75 4V7h1.5v5zm0-8v1.5h1.5V4z" fill="currentColor" fill-rule="evenodd"></path>
                </svg>
              </mock:shadow-root>
            </mg-icon>
          </mg-tooltip>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  value: '1234567890',
  currency: 'EUR'
}: 1`] = `
<mg-input-numeric value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  value: '1234567890',
  lang: 'fr'
}: 1`] = `
<mg-input-numeric lang="fr" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1 234 567 890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args {
  label: 'label',
  identifier: 'identifier',
  type: 'integer',
  value: '1234567890',
  lang: 'xx'
}: 1`] = `
<mg-input-numeric lang="xx" value="1234567890">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1,234,567,890">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should render with args { label: 'label', identifier: 'identifier', type: 'integer' }: 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should trigger events 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div class="mg-c-input__help-text">
            <slot name="help-text"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-help-text" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-help-text" slot="help-text">
        My help text
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should update display value when value props change 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer Should update display value when value props change 2`] = `
<mg-input-numeric value="10">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="10">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer display error with displayError component's public method 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer display error with displayError component's public method 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" required="" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="true" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
          <span class="mg-c-input-title__required">
            <span class="mg-u-is-asterisk">
              *
            </span>
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer readonly false Should render with slot 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-input-group-append mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <mg-button aria-label="search" role="button" slot="append-input" tabindex="0">
    <mock:shadow-root>
      <div class="mg-c-button mg-c-button--primary">
        <div class="mg-c-button__content">
          <slot></slot>
        </div>
      </div>
    </mock:shadow-root>
    <mg-icon>
      <mock:shadow-root>
        <svg aria-hidden="true" class="mg-c-icon mg-c-icon--calculator mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.8.7H3.2c-.3 0-.5.2-.5.5v13.7c0 .3.2.5.5.5h9.7c.3 0 .5-.2.5-.5V1.2c-.1-.3-.3-.5-.6-.5M5.6 13.4q0 .3-.3.3H4.1q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H4.1q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3H7.4q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H7.4q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3h-1.2q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm0-7.2q0 .3-.3.3H4.1q-.3 0-.3-.3V2.6q0-.3.3-.3h7.8q.3 0 .3.3z" fill="currentColor"></path>
        </svg>
      </mock:shadow-root>
    </mg-icon>
    Calculate
  </mg-button>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer readonly false Should render with slot 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-append-input-slot-content mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <span slot="append-input">
    km
  </span>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer readonly true Should render with slot 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-input-group-append mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <b class="mg-c-input__readonly-value">
        3
      </b>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <mg-button aria-label="search" role="button" slot="append-input" tabindex="0">
    <mock:shadow-root>
      <div class="mg-c-button mg-c-button--primary">
        <div class="mg-c-button__content">
          <slot></slot>
        </div>
      </div>
    </mock:shadow-root>
    <mg-icon>
      <mock:shadow-root>
        <svg aria-hidden="true" class="mg-c-icon mg-c-icon--calculator mg-c-icon--size-medium" fill="none" focusable="false" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.8.7H3.2c-.3 0-.5.2-.5.5v13.7c0 .3.2.5.5.5h9.7c.3 0 .5-.2.5-.5V1.2c-.1-.3-.3-.5-.6-.5M5.6 13.4q0 .3-.3.3H4.1q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H4.1q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3H7.4q-.3 0-.3-.3v-1.2q0-.3.3-.3h1.2q.3 0 .3.3zm0-3.3q0 .3-.3.3H7.4q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm3.3 3.3q0 .3-.3.3h-1.2q-.3 0-.3-.3V8.9q0-.3.3-.3h1.2q.3 0 .3.3zm0-7.2q0 .3-.3.3H4.1q-.3 0-.3-.3V2.6q0-.3.3-.3h7.8q.3 0 .3.3z" fill="currentColor"></path>
        </svg>
      </mock:shadow-root>
    </mg-icon>
    Calculate
  </mg-button>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer readonly true Should render with slot 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--is-append-input-slot-content mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <span class="mg-c-input__readonly-value">
        <b>
          3
        </b>
        km
      </span>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
  <span slot="append-input">
    km
  </span>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer validity, case next state is disabled validity ({ validity: false, valueMissing: true }) 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer validity, case next state is disabled validity ({ validity: false, valueMissing: true }) 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--disabled mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" disabled="" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer validity, case next state is readonly validity ({ validity: false, valueMissing: true }) 1`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        This field is required.
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric type integer validity, case next state is readonly validity ({ validity: false, valueMissing: true }) 2`] = `
<mg-input-numeric>
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric mg-c-input--readonly">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <mg-input-title identifier="identifier" is-legend="false" readonly="true" required="false" slot="label">
        <!---->
        <span class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </span>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, max: 2, next: 3 } 1`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, max: 2, next: 3 } 2`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, max: 2, next: 3 } 3`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" max="2" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, max: 2, next: 3 } 4`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" max="3" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, min: 2, next: 1 } 1`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, min: 2, next: 1 } 2`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, min: 2, next: 1 } 3`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" min="2" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        The value cannot be less than 2.00
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 1, min: 2, next: 1 } 4`] = `
<mg-input-numeric value="1">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" min="1" name="identifier" type="text" value="1.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, max: 2, next: 3 } 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, max: 2, next: 3 } 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, max: 2, next: 3 } 3`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--has-error mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
          <div aria-live="assertive" class="mg-c-input__error">
            <slot name="error"></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="identifier-error" aria-invalid="true" class="mg-c-input__box mg-c-input__box--width" id="identifier" max="2" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <div id="identifier-error" slot="error">
        The value cannot be greater than 2.00
      </div>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, max: 2, next: 3 } 4`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" max="3" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, min: 2, next: 1 } 1`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, min: 2, next: 1 } 2`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, min: 2, next: 1 } 3`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" min="2" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;

exports[`mg-input-numeric validity, case update min/max prop value value { value: 3, min: 2, next: 1 } 4`] = `
<mg-input-numeric value="3">
  <mock:shadow-root>
    <mg-input class="mg-c-input mg-c-input--numeric">
      <mock:shadow-root>
        <div class="mg-c-input__title">
          <slot name="label"></slot>
        </div>
        <div class="mg-c-input__input-container">
          <div class="mg-c-input__input">
            <slot></slot>
          </div>
        </div>
      </mock:shadow-root>
      <input aria-describedby="" aria-invalid="false" class="mg-c-input__box mg-c-input__box--width" id="identifier" min="1" name="identifier" type="text" value="3.00">
      <slot name="append-input"></slot>
      <mg-input-title identifier="identifier" is-legend="false" readonly="false" required="false" slot="label">
        <!---->
        <label class="mg-c-input-title" htmlfor="identifier">
          <span class="mg-c-input-title__text">
            label
          </span>
        </label>
      </mg-input-title>
    </mg-input>
  </mock:shadow-root>
</mg-input-numeric>
`;
