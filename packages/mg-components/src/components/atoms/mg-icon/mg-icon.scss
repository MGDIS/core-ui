@import '../../../styles/a11y.scss';

:host {
  display: inline-flex;
  vertical-align: middle;
}

$sizes: ('small', 'regular', 'medium', 'large', 'extra-large');
$colors: ('success', 'warning', 'danger', 'info', 'app');
$variantStyles: ('icon', 'background', 'full');

@function getColorPrefix($color) {
  @if $color == 'app' {
    @return 'mg-color';
  }
  @return 'color';
}

@mixin variant-size($size) {
  &[size='#{$size}'],
  &.mg-icon--size-#{$size} {
    width: var(--mg-icon-#{$size}-size);
    height: var(--mg-icon-#{$size}-size);
    &[class*='mg-icon--variant-']:not(.mg-icon--variant-style-icon) {
      padding: calc(var(--mg-icon-#{$size}-size) / 2);
    }
  }
}

@mixin variant-style($style) {
  @each $color in $colors {
    &.mg-icon--variant-#{$color}.mg-icon--variant-style-#{$style} {
      @if ($style == 'icon' or $style == 'full') {
        color: hsl(var(--#{getColorPrefix($color)}-#{$color}-h) var(--#{getColorPrefix($color)}-#{$color}-s) var(--#{getColorPrefix($color)}-#{$color}-l));
      }
      @if ($style == 'background' or $style == 'full') {
        background-color: hsl(var(--#{getColorPrefix($color)}-#{$color}-h) var(--#{getColorPrefix($color)}-#{$color}-s) var(--mg-color-soft-l));
      }
    }
  }
}

.mg-icon {
  color: currentColor;
  @each $size in $sizes {
    @include variant-size($size);
  }

  @each $style in $variantStyles {
    @include variant-style($style);
  }

  &[class*='mg-icon--variant-'] {
    border-radius: var(--mg-icon-border-radius);
  }
}

/**
* Animations
**/

.mg-icon--spin {
  animation-name: rotate;
  animation-duration: 0.75s;
  animation-iteration-count: infinite;
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
