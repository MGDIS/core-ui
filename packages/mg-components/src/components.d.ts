/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MgActionMoreButtonType, MgActionMoreDividerType, MgActionMoreIconType, MgActionMoreItemType } from "./components/molecules/mg-action-more/mg-action-more.conf";
import { VariantStyleType, VariantType } from "./components/molecules/mg-alert/mg-alert.conf";
import { BadgeVariantType } from "./components/atoms/mg-badge/mg-badge.conf";
import { ButtonType, SizeType, VariantType as VariantType1 } from "./components/atoms/mg-button/mg-button.conf";
import { AriaRoleType, RequiredMessageStatusType } from "./components/molecules/mg-form/mg-form.conf";
import { IconSizeType, IconType, IconVariantStyleType, IconVariantType } from "./components/atoms/mg-icon/mg-icon.conf";
import { IllustratedMessageDirectionType, IllustratedMessageSizeType } from "./components/molecules/mg-illustrated-message/mg-illustrated-message.conf";
import { TooltipPosition, Width } from "./components/molecules/inputs/mg-input/mg-input.conf";
import { CheckboxItem, CheckboxType, CheckboxValue, SectionKindType } from "./components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf";
import { Format, NumericType } from "./components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf";
import { RadioOption } from "./components/molecules/inputs/mg-input-radio/mg-input-radio.conf";
import { EditorOptionsType } from "./components/molecules/inputs/mg-input-rich-text-editor/editor";
import { SelectOption } from "./components/molecules/inputs/mg-input-select/mg-input-select.conf";
import { OptionType, TextType } from "./components/molecules/inputs/mg-input-text/mg-input-text.conf";
import { IconType as IconType1 } from "./components";
import { ToggleValue } from "./components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf";
import { IconType as IconType2, SizeType as SizeType1, SlotLabelType } from "./components/molecules/internals/mg-item-more/mg-item-more.conf";
import { Direction } from "./types";
import { ItemMoreType, MenuSizeType } from "./components/molecules/menu/mg-menu/mg-menu.conf";
import { MgMenuStatusType, TargetType } from "./components/molecules/menu/mg-menu-item/mg-menu-item.conf";
import { VariantStyleType as VariantStyleType1, VariantType as VariantType2 } from "./components/molecules/mg-message/mg-message.conf";
import { DialogRoleType } from "./components/molecules/mg-modal/mg-modal.conf";
import { ExpandToggleDisplayType, TitlePositionType } from "./components/molecules/mg-panel/mg-panel.conf";
import { PopoverPlacementType } from "./components/molecules/mg-popover/mg-popover.conf";
import { AriaRoleType as AriaRoleType1 } from "./components/molecules/mg-progress/mg-progress.conf";
import { SkipLink } from "./components/molecules/mg-skip-links/mg-skip-links.conf";
import { SizeType as SizeType2, TabItem } from "./components/molecules/mg-tabs/mg-tabs.conf";
import { TagVariantType } from "./components/atoms/mg-tag/mg-tag.conf";
import { TooltipPlacementType } from "./components/atoms/mg-tooltip/mg-tooltip.conf";
export { MgActionMoreButtonType, MgActionMoreDividerType, MgActionMoreIconType, MgActionMoreItemType } from "./components/molecules/mg-action-more/mg-action-more.conf";
export { VariantStyleType, VariantType } from "./components/molecules/mg-alert/mg-alert.conf";
export { BadgeVariantType } from "./components/atoms/mg-badge/mg-badge.conf";
export { ButtonType, SizeType, VariantType as VariantType1 } from "./components/atoms/mg-button/mg-button.conf";
export { AriaRoleType, RequiredMessageStatusType } from "./components/molecules/mg-form/mg-form.conf";
export { IconSizeType, IconType, IconVariantStyleType, IconVariantType } from "./components/atoms/mg-icon/mg-icon.conf";
export { IllustratedMessageDirectionType, IllustratedMessageSizeType } from "./components/molecules/mg-illustrated-message/mg-illustrated-message.conf";
export { TooltipPosition, Width } from "./components/molecules/inputs/mg-input/mg-input.conf";
export { CheckboxItem, CheckboxType, CheckboxValue, SectionKindType } from "./components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf";
export { Format, NumericType } from "./components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf";
export { RadioOption } from "./components/molecules/inputs/mg-input-radio/mg-input-radio.conf";
export { EditorOptionsType } from "./components/molecules/inputs/mg-input-rich-text-editor/editor";
export { SelectOption } from "./components/molecules/inputs/mg-input-select/mg-input-select.conf";
export { OptionType, TextType } from "./components/molecules/inputs/mg-input-text/mg-input-text.conf";
export { IconType as IconType1 } from "./components";
export { ToggleValue } from "./components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf";
export { IconType as IconType2, SizeType as SizeType1, SlotLabelType } from "./components/molecules/internals/mg-item-more/mg-item-more.conf";
export { Direction } from "./types";
export { ItemMoreType, MenuSizeType } from "./components/molecules/menu/mg-menu/mg-menu.conf";
export { MgMenuStatusType, TargetType } from "./components/molecules/menu/mg-menu-item/mg-menu-item.conf";
export { VariantStyleType as VariantStyleType1, VariantType as VariantType2 } from "./components/molecules/mg-message/mg-message.conf";
export { DialogRoleType } from "./components/molecules/mg-modal/mg-modal.conf";
export { ExpandToggleDisplayType, TitlePositionType } from "./components/molecules/mg-panel/mg-panel.conf";
export { PopoverPlacementType } from "./components/molecules/mg-popover/mg-popover.conf";
export { AriaRoleType as AriaRoleType1 } from "./components/molecules/mg-progress/mg-progress.conf";
export { SkipLink } from "./components/molecules/mg-skip-links/mg-skip-links.conf";
export { SizeType as SizeType2, TabItem } from "./components/molecules/mg-tabs/mg-tabs.conf";
export { TagVariantType } from "./components/atoms/mg-tag/mg-tag.conf";
export { TooltipPlacementType } from "./components/atoms/mg-tooltip/mg-tooltip.conf";
export namespace Components {
    interface MgActionMore {
        /**
          * Define button properties
         */
        "button"?: MgActionMoreButtonType;
        /**
          * Define if chevron is display
         */
        "displayChevron"?: boolean;
        /**
          * Define displayed icon
         */
        "icon"?: MgActionMoreIconType;
        /**
          * Define the menu-items elements
         */
        "items": (MgActionMoreItemType | MgActionMoreDividerType)[];
    }
    interface MgAlert {
        /**
          * Add a delay to hide/close message when it passed Value is defined in seconds and must greater than 2 seconds
         */
        "delay"?: number;
        /**
          * Define variant
         */
        "variant"?: VariantType;
        /**
          * Define variant style
         */
        "variantStyle"?: VariantStyleType;
    }
    interface MgBadge {
        /**
          * Badge label. Include short description. Required for accessibility
         */
        "label": string;
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Badge value
         */
        "value": string | number;
        /**
          * Define badge variant
         */
        "variant"?: BadgeVariantType;
    }
    interface MgButton {
        /**
          * Option to set input disable on click, in order to prevent multi-click. Parent component have to remove the attribute 'disabled' when the process ends.
         */
        "disableOnClick": boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Define form id to attach button with. If this attribute is not set, the `<button>` is associated with its ancestor `<form>` element.
         */
        "form"?: string;
        /**
          * Set button to full-width
         */
        "fullWidth": boolean;
        /**
          * Define if button is round. Used for icon button.
         */
        "isIcon": boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label"?: string;
        /**
          * Define button size
         */
        "size": SizeType;
        /**
          * Define button type
         */
        "type"?: ButtonType;
        /**
          * Define button variant
         */
        "variant": VariantType1;
    }
    interface MgCard {
    }
    interface MgCharacterLeft {
        /**
          * Sets the characters to count
         */
        "characters": string;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier"?: string;
        /**
          * Add maximum length
         */
        "maxlength": number;
    }
    interface MgDetails {
        /**
          * Define if details are diplayed
         */
        "expanded": boolean;
        /**
          * Hide summary element
         */
        "hideSummary": boolean;
        /**
          * Displayed title when details are closed
         */
        "toggleClosed": string;
        /**
          * Displayed title when details are opened
         */
        "toggleOpened": string;
    }
    interface MgDivider {
        /**
          * Define component size
         */
        "fullWidth": boolean;
    }
    interface MgForm {
        /**
          * Define `<form/>` element aria role see more about aria roles use case: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles
         */
        "ariaRole"?: AriaRoleType;
        /**
          * Define if form is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Define form invalid state
         */
        "invalid": boolean;
        /**
          * Define if slotted mg-component's label are displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define if form is readonly
         */
        "readonly": boolean;
        /**
          * Define when required message is display. When it is unset, component use it internal logic to manage "required message" help text display. When you set the prop to `default`, you override the component internal logique to torce it display "required message" help text. When you set the prop to `hide`, it will prevent the rendering of the message in the component's DOM. As **this element is an accessibility requirement in the view**, you **MUST*** re-implement this message on your own and display it when your form contains required inputs.
         */
        "requiredMessage"?: RequiredMessageStatusType;
        /**
          * Reset form inputs values, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Define form valid state
         */
        "valid": boolean;
    }
    interface MgIcon {
        /**
          * Icon to display.
         */
        "icon": IconType;
        /**
          * Define icon size
         */
        "size": IconSizeType;
        /**
          * Make the icon spin
         */
        "spin": boolean;
        /**
          * Define icon variant color
         */
        "variant"?: IconVariantType;
        /**
          * Define icon color variant style Add a color to the icon based on variant color with given style 'full': Used to set a circular background with variant soft color and icon variant color 'background': Used to set a circular background with variant soft color 'icon': Used to set a color only to the icon
         */
        "variantStyle": IconVariantStyleType;
    }
    interface MgIllustratedMessage {
        /**
          * Define component orientation
         */
        "direction": IllustratedMessageDirectionType;
        /**
          * Define illustration size
         */
        "size": IllustratedMessageSizeType;
    }
    interface MgInput {
        /**
          * Define aria-describedby ids to link with
         */
        "ariaDescribedbyIDs": string[];
        /**
          * Define error message to display
         */
        "errorMessage"?: string;
        /**
          * Define help text to display
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
    }
    interface MgInputCheckbox {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Display selected values list in "multi" type This prop is only applied with prop type "multi" or when an "unset" mode render a "multi" type.
         */
        "displaySelectedValues"?: boolean;
        /**
          * Overwrite default "edit" button message
         */
        "editButtonMessage": string;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList": boolean;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Define input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define if mg-input-checkbox is readonly
         */
        "readonly": boolean;
        /**
          * Define if mg-input-checkbox is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Overwrite default "select" button message
         */
        "selectButtonMessage": string;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputCheckbox["valid"], errorMessage: string) => Promise<void>;
        /**
          * Overwrite default "show" button message
         */
        "showButtonMessage": string;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define checkbox type When it's undefined the type is dynamic: - With 0-5 items type is 'checkbox' - With 5-10 items type is 'multi' When it set the type is locked to the defined value. When type is dynamic OR with 'multi' type AND Over 10 items "search" feature is enabled
         */
        "type": CheckboxType;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value If item.value is `null`, checkbox will be indeterminate by default
         */
        "value": CheckboxValue[];
    }
    /**
     * Internal component use to manage sections instances
     */
    interface MgInputCheckboxPaginated {
        /**
          * Define checkboxes to paginate
         */
        "checkboxes": CheckboxItem[];
        /**
          * Current page
         */
        "currentPage": number;
        /**
          * Define if mg-input-checkbox-list is disabled
         */
        "disabled"?: boolean;
        /**
          * Define mg-input-checkbox input invalid
         */
        "invalid"?: boolean;
        /**
          * Define component message
         */
        "messages": Record<string, string>;
        /**
          * Define mg-input-checkbox input name
         */
        "name"?: string;
        /**
          * Define if mg-input-checkbox-list is readonly
         */
        "readonly"?: boolean;
    }
    interface MgInputDate {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example Available string variables:  - `{pattern}`: render innerHTML pattern based on system  - `{date}`: render innerText date with a pattern base format.  - `{defaultHelpText}`: render default `helpText` usefull to concat helpText local with your custom text. ex: `Input use {pattern} pattern` as `helpText` prop value will be render as `Input use mm/dd/yyyy pattern`
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input maximum date format: yyyy-mm-dd
         */
        "max"?: string;
        /**
          * Define input minimum date format: yyyy-mm-dd
         */
        "min"?: string;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputDate["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputNumeric {
        /**
          * Define currency
         */
        "currency": string;
        /**
          * Override decimal length decimal is the number after the decimal point
         */
        "decimalLength": number;
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Set local formatting. Numbers are formatted based on the locale.
         */
        "format": Format;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Override integer length integer is the number before the decimal point
         */
        "integerLength": number;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Maximum value
         */
        "max"?: number;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Minimum value
         */
        "min"?: number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputNumeric["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define numeric type
         */
        "type": NumericType;
        /**
          * Define unit symbol (km, L, etc.)
         */
        "unit"?: Intl.NumberFormatOptions['unit'];
        /**
          * Define unit display format ('short', 'long', 'narrow')
         */
        "unitDisplay": Intl.NumberFormatOptions['unitDisplay'];
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputPassword {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength": any;
        /**
          * Define input width
         */
        "mgWidth": Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputPassword["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputRadio {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList": boolean;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | RadioOption[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputRadio["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": any;
    }
    interface MgInputRichTextEditor {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Get editor content as HTML
          * @returns HTML content of the editor
         */
        "getHTML": () => Promise<string>;
        /**
          * Get editor content as plain text
          * @returns Plain text content of the editor
         */
        "getText": () => Promise<string>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Editor modules configuration
         */
        "modules"?: EditorOptionsType['modules'];
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if the editor is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Define the number of visible text lines for the control
         */
        "rows": number;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputRichTextEditor["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Define the value of the editor Can be either HTML string or plain text
         */
        "value": string;
    }
    interface MgInputSelect {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Items are the possible options to select
         */
        "items": (string | SelectOption)[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input width
         */
        "mgWidth": Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Option to disable placeholder
         */
        "placeholderDisabled": boolean;
        /**
          * Option to remove placeholder
         */
        "placeholderHide": boolean;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputSelect["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": any;
    }
    interface MgInputText {
        /**
          * Define if component should display character left
         */
        "characterLeftHide": boolean;
        /**
          * Define datalist options
         */
        "datalistoptions": string[] | OptionType[];
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Input icon
         */
        "icon"?: IconType1;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength": number;
        /**
          * Define input width
         */
        "mgWidth": Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputText["valid"], errorMessage: string) => Promise<void>;
        /**
          * Public method to play input focus
         */
        "setFocus": () => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Input type
         */
        "type": TextType;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": any;
    }
    interface MgInputTextarea {
        /**
          * Define if component should display character left
         */
        "characterLeftHide": boolean;
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Display input error if it exists.
         */
        "displayError": () => Promise<void>;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength": number;
        /**
          * Define input width
         */
        "mgWidth": Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Reset value, validity and error state
         */
        "reset": () => Promise<void>;
        /**
          * Define if input is resizable
         */
        "resizable": 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * Define the number of visible text lines for the control
         */
        "rows": number;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: MgInputTextarea["valid"], errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputTitle {
        /**
          * Label input id
         */
        "identifier": string;
        /**
          * Switch from label to fieldset sementic
         */
        "isLegend": boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "readonly"?: boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required"?: boolean;
    }
    interface MgInputToggle {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if toggle display icon
         */
        "isIcon": boolean;
        /**
          * Define if toggle have on/off style
         */
        "isOnOff": boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | ToggleValue[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Reset value, validity, error and visual state
         */
        "reset": () => Promise<void>;
        /**
          * Set an error and display a custom error message. This method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter. It must be paired with an error message to display for the given context. When used to set validity to `false`, you should use this method again to reset the validity to `true`.
          * @param valid - value indicating the validity
          * @param errorMessage - the error message to display
         */
        "setError": (valid: boolean, errorMessage: string) => Promise<void>;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition": TooltipPosition;
        /**
          * Component value
         */
        "value": any;
    }
    interface MgItemMore {
        /**
          * Define icon
         */
        "icon"?: IconType2;
        /**
          * Define component child menu size.
         */
        "size"?: SizeType1;
        /**
          * Define slot label element
         */
        "slotlabel"?: SlotLabelType;
    }
    interface MgLoader {
        /**
          * Override loader message
         */
        "message"?: string;
        /**
          * Hide message
         */
        "messageHide"?: boolean;
    }
    interface MgMenu {
        /**
          * Component display direction.
         */
        "direction": Direction;
        /**
          * Customize "mg-item-more" element Used with direction: 'vertical' to manage overflow
         */
        "itemmore"?: ItemMoreType;
        /**
          * Menu label. Include short menu description. Required to define accessibility required attribute `aria-label`
         */
        "label": string;
        /**
          * Define mg-menu size
         */
        "size": MenuSizeType;
    }
    interface MgMenuItem {
        /**
          * Define menu-item content expanded.
         */
        "expanded"?: boolean;
        /**
          * Define menu-item href when defined menu-item contain an anchor instead of button
         */
        "href"?: string;
        /**
          * Identifier is used to control mg-popover
         */
        "identifier": string;
        /**
          * Define menu-item status.
         */
        "status"?: MgMenuStatusType;
        /**
          * Define target type
         */
        "target"?: TargetType;
    }
    interface MgMessage {
        /**
          * Define variant
         */
        "variant": VariantType2;
        /**
          * Define variant style
         */
        "variantStyle": VariantStyleType1;
    }
    interface MgModal {
        /**
          * Define if modal has a cross button
         */
        "closeButton": boolean;
        /**
          * Modal dialog role.
         */
        "dialogRole": DialogRoleType;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Displayed modal title
         */
        "modalTitle": string;
        /**
          * Define if modal is open
         */
        "open": boolean;
    }
    interface MgPagination {
        /**
          * Component current page
         */
        "currentPage": number;
        /**
          * Hide navigation label
         */
        "hideNavigationLabels"?: boolean;
        /**
          * Hide select input
         */
        "hidePageCount"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Panignation label. Is a short description. Customize default value can be usefull to improve accessibility
         */
        "label": string;
        /**
          * Component total pages
         */
        "totalPages": number;
    }
    interface MgPanel {
        /**
          * Disable possibility to toggle expand
         */
        "expandToggleDisabled"?: boolean;
        /**
          * Define expand toggle button display
         */
        "expandToggleDisplay": ExpandToggleDisplayType;
        /**
          * Panel is opened
         */
        "expanded": boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Panel title
         */
        "panelTitle": string;
        /**
          * Define if panel title is editable
         */
        "titleEditable": boolean;
        /**
          * Panel title pattern
         */
        "titlePattern"?: string;
        /**
          * Panel title pattern error message
         */
        "titlePatternErrorMessage"?: string;
        /**
          * Define title position
         */
        "titlePosition": TitlePositionType;
    }
    interface MgPopover {
        /**
          * Hide popover arrow
         */
        "arrowHide": boolean;
        /**
          * Define if popover has a cross button
         */
        "closeButton": boolean;
        /**
          * Disable popover
         */
        "disabled": boolean;
        /**
          * Display popover
         */
        "display": boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier": string;
        /**
          * Popover placement
         */
        "placement": PopoverPlacementType;
    }
    interface MgPopoverContent {
        /**
          * Define if popover has a cross button
         */
        "closeButton": boolean;
    }
    interface MgProgress {
        /**
          * Define progress role - `progressbar` to indicate a progress, such as loading or percent completion of a task - `meter` to indicate a graphical display of a numeric value that varies within a defined range
         */
        "ariaRole"?: AriaRoleType1;
        /**
          * Define label
         */
        "label": string;
        /**
          * Define the maximum value in the range
         */
        "max"?: number;
        /**
          * Define the minimum value in the range
         */
        "min"?: number;
        /**
          * Define current value By default, it will be displayed as a percentage value. If you don’t specify the min and max props, the value should be a number within the range of 0 to 100.
         */
        "value"?: number;
    }
    interface MgSkipLinks {
        /**
          * Skip links
         */
        "links": SkipLink[];
    }
    interface MgTabs {
        /**
          * Active tab number
         */
        "activeTab": number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Tabs items
         */
        "items": string[] | TabItem[];
        /**
          * Tabs label. Include short tabs description. Required for accessibility
         */
        "label": string;
        /**
          * Define tabs size
         */
        "size": SizeType2;
    }
    interface MgTag {
        /**
          * Define if tag is using outline style
         */
        "outline"?: boolean;
        /**
          * Define if tag is using soft style
         */
        "soft"?: boolean;
        /**
          * Define tag variant
         */
        "variant": TagVariantType;
    }
    interface MgTooltip {
        /**
          * Disable tooltip
         */
        "disabled": boolean;
        /**
          * Display tooltip
         */
        "display": boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier": string;
        /**
          * Displayed message in the tooltip
         */
        "message": string;
        /**
          * Tooltip placement
         */
        "placement": TooltipPlacementType;
    }
    interface MgTooltipContent {
        /**
          * Displayed message in the tooltip
         */
        "message": string;
    }
}
export interface MgAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgAlertElement;
}
export interface MgButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgButtonElement;
}
export interface MgDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgDetailsElement;
}
export interface MgFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgFormElement;
}
export interface MgInputCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputCheckboxElement;
}
export interface MgInputCheckboxPaginatedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputCheckboxPaginatedElement;
}
export interface MgInputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputDateElement;
}
export interface MgInputNumericCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputNumericElement;
}
export interface MgInputPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputPasswordElement;
}
export interface MgInputRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputRadioElement;
}
export interface MgInputRichTextEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputRichTextEditorElement;
}
export interface MgInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputSelectElement;
}
export interface MgInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputTextElement;
}
export interface MgInputTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputTextareaElement;
}
export interface MgInputToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgInputToggleElement;
}
export interface MgMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgMenuItemElement;
}
export interface MgModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgModalElement;
}
export interface MgPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgPaginationElement;
}
export interface MgPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgPanelElement;
}
export interface MgPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgPopoverElement;
}
export interface MgPopoverContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgPopoverContentElement;
}
export interface MgSkipLinksCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgSkipLinksElement;
}
export interface MgTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMgTabsElement;
}
declare global {
    interface HTMLMgActionMoreElement extends Components.MgActionMore, HTMLStencilElement {
    }
    var HTMLMgActionMoreElement: {
        prototype: HTMLMgActionMoreElement;
        new (): HTMLMgActionMoreElement;
    };
    interface HTMLMgAlertElementEventMap {
        "component-show": void;
        "component-hide": void;
        "component-close": void;
    }
    interface HTMLMgAlertElement extends Components.MgAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgAlertElementEventMap>(type: K, listener: (this: HTMLMgAlertElement, ev: MgAlertCustomEvent<HTMLMgAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgAlertElementEventMap>(type: K, listener: (this: HTMLMgAlertElement, ev: MgAlertCustomEvent<HTMLMgAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgAlertElement: {
        prototype: HTMLMgAlertElement;
        new (): HTMLMgAlertElement;
    };
    interface HTMLMgBadgeElement extends Components.MgBadge, HTMLStencilElement {
    }
    var HTMLMgBadgeElement: {
        prototype: HTMLMgBadgeElement;
        new (): HTMLMgBadgeElement;
    };
    interface HTMLMgButtonElementEventMap {
        "disabled-change": HTMLMgButtonElement['disabled'];
    }
    interface HTMLMgButtonElement extends Components.MgButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgButtonElementEventMap>(type: K, listener: (this: HTMLMgButtonElement, ev: MgButtonCustomEvent<HTMLMgButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgButtonElementEventMap>(type: K, listener: (this: HTMLMgButtonElement, ev: MgButtonCustomEvent<HTMLMgButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgButtonElement: {
        prototype: HTMLMgButtonElement;
        new (): HTMLMgButtonElement;
    };
    interface HTMLMgCardElement extends Components.MgCard, HTMLStencilElement {
    }
    var HTMLMgCardElement: {
        prototype: HTMLMgCardElement;
        new (): HTMLMgCardElement;
    };
    interface HTMLMgCharacterLeftElement extends Components.MgCharacterLeft, HTMLStencilElement {
    }
    var HTMLMgCharacterLeftElement: {
        prototype: HTMLMgCharacterLeftElement;
        new (): HTMLMgCharacterLeftElement;
    };
    interface HTMLMgDetailsElementEventMap {
        "expanded-change": HTMLMgDetailsElement['expanded'];
    }
    interface HTMLMgDetailsElement extends Components.MgDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgDetailsElementEventMap>(type: K, listener: (this: HTMLMgDetailsElement, ev: MgDetailsCustomEvent<HTMLMgDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgDetailsElementEventMap>(type: K, listener: (this: HTMLMgDetailsElement, ev: MgDetailsCustomEvent<HTMLMgDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgDetailsElement: {
        prototype: HTMLMgDetailsElement;
        new (): HTMLMgDetailsElement;
    };
    interface HTMLMgDividerElement extends Components.MgDivider, HTMLStencilElement {
    }
    var HTMLMgDividerElement: {
        prototype: HTMLMgDividerElement;
        new (): HTMLMgDividerElement;
    };
    interface HTMLMgFormElementEventMap {
        "form-valid": HTMLMgFormElement['valid'];
        "form-submit": boolean;
    }
    interface HTMLMgFormElement extends Components.MgForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgFormElementEventMap>(type: K, listener: (this: HTMLMgFormElement, ev: MgFormCustomEvent<HTMLMgFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgFormElementEventMap>(type: K, listener: (this: HTMLMgFormElement, ev: MgFormCustomEvent<HTMLMgFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgFormElement: {
        prototype: HTMLMgFormElement;
        new (): HTMLMgFormElement;
    };
    interface HTMLMgIconElement extends Components.MgIcon, HTMLStencilElement {
    }
    var HTMLMgIconElement: {
        prototype: HTMLMgIconElement;
        new (): HTMLMgIconElement;
    };
    interface HTMLMgIllustratedMessageElement extends Components.MgIllustratedMessage, HTMLStencilElement {
    }
    var HTMLMgIllustratedMessageElement: {
        prototype: HTMLMgIllustratedMessageElement;
        new (): HTMLMgIllustratedMessageElement;
    };
    interface HTMLMgInputElement extends Components.MgInput, HTMLStencilElement {
    }
    var HTMLMgInputElement: {
        prototype: HTMLMgInputElement;
        new (): HTMLMgInputElement;
    };
    interface HTMLMgInputCheckboxElementEventMap {
        "value-change": HTMLMgInputCheckboxElement['value'];
        "input-valid": HTMLMgInputCheckboxElement['valid'];
    }
    interface HTMLMgInputCheckboxElement extends Components.MgInputCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputCheckboxElementEventMap>(type: K, listener: (this: HTMLMgInputCheckboxElement, ev: MgInputCheckboxCustomEvent<HTMLMgInputCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputCheckboxElementEventMap>(type: K, listener: (this: HTMLMgInputCheckboxElement, ev: MgInputCheckboxCustomEvent<HTMLMgInputCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputCheckboxElement: {
        prototype: HTMLMgInputCheckboxElement;
        new (): HTMLMgInputCheckboxElement;
    };
    interface HTMLMgInputCheckboxPaginatedElementEventMap {
        "mass-action": SectionKindType;
    }
    /**
     * Internal component use to manage sections instances
     */
    interface HTMLMgInputCheckboxPaginatedElement extends Components.MgInputCheckboxPaginated, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputCheckboxPaginatedElementEventMap>(type: K, listener: (this: HTMLMgInputCheckboxPaginatedElement, ev: MgInputCheckboxPaginatedCustomEvent<HTMLMgInputCheckboxPaginatedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputCheckboxPaginatedElementEventMap>(type: K, listener: (this: HTMLMgInputCheckboxPaginatedElement, ev: MgInputCheckboxPaginatedCustomEvent<HTMLMgInputCheckboxPaginatedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputCheckboxPaginatedElement: {
        prototype: HTMLMgInputCheckboxPaginatedElement;
        new (): HTMLMgInputCheckboxPaginatedElement;
    };
    interface HTMLMgInputDateElementEventMap {
        "value-change": HTMLMgInputDateElement['value'];
        "input-valid": HTMLMgInputDateElement['valid'];
    }
    interface HTMLMgInputDateElement extends Components.MgInputDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputDateElementEventMap>(type: K, listener: (this: HTMLMgInputDateElement, ev: MgInputDateCustomEvent<HTMLMgInputDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputDateElementEventMap>(type: K, listener: (this: HTMLMgInputDateElement, ev: MgInputDateCustomEvent<HTMLMgInputDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputDateElement: {
        prototype: HTMLMgInputDateElement;
        new (): HTMLMgInputDateElement;
    };
    interface HTMLMgInputNumericElementEventMap {
        "value-change": number;
        "input-valid": HTMLMgInputNumericElement['valid'];
    }
    interface HTMLMgInputNumericElement extends Components.MgInputNumeric, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputNumericElementEventMap>(type: K, listener: (this: HTMLMgInputNumericElement, ev: MgInputNumericCustomEvent<HTMLMgInputNumericElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputNumericElementEventMap>(type: K, listener: (this: HTMLMgInputNumericElement, ev: MgInputNumericCustomEvent<HTMLMgInputNumericElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputNumericElement: {
        prototype: HTMLMgInputNumericElement;
        new (): HTMLMgInputNumericElement;
    };
    interface HTMLMgInputPasswordElementEventMap {
        "value-change": HTMLMgInputPasswordElement['value'];
        "input-valid": HTMLMgInputPasswordElement['valid'];
    }
    interface HTMLMgInputPasswordElement extends Components.MgInputPassword, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputPasswordElementEventMap>(type: K, listener: (this: HTMLMgInputPasswordElement, ev: MgInputPasswordCustomEvent<HTMLMgInputPasswordElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputPasswordElementEventMap>(type: K, listener: (this: HTMLMgInputPasswordElement, ev: MgInputPasswordCustomEvent<HTMLMgInputPasswordElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputPasswordElement: {
        prototype: HTMLMgInputPasswordElement;
        new (): HTMLMgInputPasswordElement;
    };
    interface HTMLMgInputRadioElementEventMap {
        "value-change": HTMLMgInputRadioElement['value'];
        "input-valid": HTMLMgInputRadioElement['valid'];
    }
    interface HTMLMgInputRadioElement extends Components.MgInputRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputRadioElementEventMap>(type: K, listener: (this: HTMLMgInputRadioElement, ev: MgInputRadioCustomEvent<HTMLMgInputRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputRadioElementEventMap>(type: K, listener: (this: HTMLMgInputRadioElement, ev: MgInputRadioCustomEvent<HTMLMgInputRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputRadioElement: {
        prototype: HTMLMgInputRadioElement;
        new (): HTMLMgInputRadioElement;
    };
    interface HTMLMgInputRichTextEditorElementEventMap {
        "input-valid": boolean;
        "value-change": string;
    }
    interface HTMLMgInputRichTextEditorElement extends Components.MgInputRichTextEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputRichTextEditorElementEventMap>(type: K, listener: (this: HTMLMgInputRichTextEditorElement, ev: MgInputRichTextEditorCustomEvent<HTMLMgInputRichTextEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputRichTextEditorElementEventMap>(type: K, listener: (this: HTMLMgInputRichTextEditorElement, ev: MgInputRichTextEditorCustomEvent<HTMLMgInputRichTextEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputRichTextEditorElement: {
        prototype: HTMLMgInputRichTextEditorElement;
        new (): HTMLMgInputRichTextEditorElement;
    };
    interface HTMLMgInputSelectElementEventMap {
        "value-change": HTMLMgInputCheckboxElement['value'];
        "input-valid": HTMLMgInputCheckboxElement['valid'];
    }
    interface HTMLMgInputSelectElement extends Components.MgInputSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputSelectElementEventMap>(type: K, listener: (this: HTMLMgInputSelectElement, ev: MgInputSelectCustomEvent<HTMLMgInputSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputSelectElementEventMap>(type: K, listener: (this: HTMLMgInputSelectElement, ev: MgInputSelectCustomEvent<HTMLMgInputSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputSelectElement: {
        prototype: HTMLMgInputSelectElement;
        new (): HTMLMgInputSelectElement;
    };
    interface HTMLMgInputTextElementEventMap {
        "value-change": HTMLMgInputTextElement['value'];
        "input-valid": HTMLMgInputTextElement['valid'];
    }
    interface HTMLMgInputTextElement extends Components.MgInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputTextElementEventMap>(type: K, listener: (this: HTMLMgInputTextElement, ev: MgInputTextCustomEvent<HTMLMgInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputTextElementEventMap>(type: K, listener: (this: HTMLMgInputTextElement, ev: MgInputTextCustomEvent<HTMLMgInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputTextElement: {
        prototype: HTMLMgInputTextElement;
        new (): HTMLMgInputTextElement;
    };
    interface HTMLMgInputTextareaElementEventMap {
        "value-change": HTMLMgInputTextareaElement['value'];
        "input-valid": HTMLMgInputTextareaElement['valid'];
    }
    interface HTMLMgInputTextareaElement extends Components.MgInputTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputTextareaElementEventMap>(type: K, listener: (this: HTMLMgInputTextareaElement, ev: MgInputTextareaCustomEvent<HTMLMgInputTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputTextareaElementEventMap>(type: K, listener: (this: HTMLMgInputTextareaElement, ev: MgInputTextareaCustomEvent<HTMLMgInputTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputTextareaElement: {
        prototype: HTMLMgInputTextareaElement;
        new (): HTMLMgInputTextareaElement;
    };
    interface HTMLMgInputTitleElement extends Components.MgInputTitle, HTMLStencilElement {
    }
    var HTMLMgInputTitleElement: {
        prototype: HTMLMgInputTitleElement;
        new (): HTMLMgInputTitleElement;
    };
    interface HTMLMgInputToggleElementEventMap {
        "value-change": HTMLMgInputToggleElement['value'];
        "input-valid": boolean;
    }
    interface HTMLMgInputToggleElement extends Components.MgInputToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgInputToggleElementEventMap>(type: K, listener: (this: HTMLMgInputToggleElement, ev: MgInputToggleCustomEvent<HTMLMgInputToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgInputToggleElementEventMap>(type: K, listener: (this: HTMLMgInputToggleElement, ev: MgInputToggleCustomEvent<HTMLMgInputToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgInputToggleElement: {
        prototype: HTMLMgInputToggleElement;
        new (): HTMLMgInputToggleElement;
    };
    interface HTMLMgItemMoreElement extends Components.MgItemMore, HTMLStencilElement {
    }
    var HTMLMgItemMoreElement: {
        prototype: HTMLMgItemMoreElement;
        new (): HTMLMgItemMoreElement;
    };
    interface HTMLMgLoaderElement extends Components.MgLoader, HTMLStencilElement {
    }
    var HTMLMgLoaderElement: {
        prototype: HTMLMgLoaderElement;
        new (): HTMLMgLoaderElement;
    };
    interface HTMLMgMenuElement extends Components.MgMenu, HTMLStencilElement {
    }
    var HTMLMgMenuElement: {
        prototype: HTMLMgMenuElement;
        new (): HTMLMgMenuElement;
    };
    interface HTMLMgMenuItemElementEventMap {
        "item-loaded": void;
        "item-updated": void;
    }
    interface HTMLMgMenuItemElement extends Components.MgMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgMenuItemElementEventMap>(type: K, listener: (this: HTMLMgMenuItemElement, ev: MgMenuItemCustomEvent<HTMLMgMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgMenuItemElementEventMap>(type: K, listener: (this: HTMLMgMenuItemElement, ev: MgMenuItemCustomEvent<HTMLMgMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgMenuItemElement: {
        prototype: HTMLMgMenuItemElement;
        new (): HTMLMgMenuItemElement;
    };
    interface HTMLMgMessageElement extends Components.MgMessage, HTMLStencilElement {
    }
    var HTMLMgMessageElement: {
        prototype: HTMLMgMessageElement;
        new (): HTMLMgMessageElement;
    };
    interface HTMLMgModalElementEventMap {
        "component-show": void;
        "component-hide": void;
        "component-close": void;
    }
    interface HTMLMgModalElement extends Components.MgModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgModalElementEventMap>(type: K, listener: (this: HTMLMgModalElement, ev: MgModalCustomEvent<HTMLMgModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgModalElementEventMap>(type: K, listener: (this: HTMLMgModalElement, ev: MgModalCustomEvent<HTMLMgModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgModalElement: {
        prototype: HTMLMgModalElement;
        new (): HTMLMgModalElement;
    };
    interface HTMLMgPaginationElementEventMap {
        "current-page-change": number;
    }
    interface HTMLMgPaginationElement extends Components.MgPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgPaginationElementEventMap>(type: K, listener: (this: HTMLMgPaginationElement, ev: MgPaginationCustomEvent<HTMLMgPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgPaginationElementEventMap>(type: K, listener: (this: HTMLMgPaginationElement, ev: MgPaginationCustomEvent<HTMLMgPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgPaginationElement: {
        prototype: HTMLMgPaginationElement;
        new (): HTMLMgPaginationElement;
    };
    interface HTMLMgPanelElementEventMap {
        "title-change": HTMLMgPanelElement['panelTitle'];
        "expanded-change": HTMLMgPanelElement['expanded'];
    }
    interface HTMLMgPanelElement extends Components.MgPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgPanelElementEventMap>(type: K, listener: (this: HTMLMgPanelElement, ev: MgPanelCustomEvent<HTMLMgPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgPanelElementEventMap>(type: K, listener: (this: HTMLMgPanelElement, ev: MgPanelCustomEvent<HTMLMgPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgPanelElement: {
        prototype: HTMLMgPanelElement;
        new (): HTMLMgPanelElement;
    };
    interface HTMLMgPopoverElementEventMap {
        "display-change": HTMLMgPopoverElement['display'];
        "component-close": void;
    }
    interface HTMLMgPopoverElement extends Components.MgPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgPopoverElementEventMap>(type: K, listener: (this: HTMLMgPopoverElement, ev: MgPopoverCustomEvent<HTMLMgPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgPopoverElementEventMap>(type: K, listener: (this: HTMLMgPopoverElement, ev: MgPopoverCustomEvent<HTMLMgPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgPopoverElement: {
        prototype: HTMLMgPopoverElement;
        new (): HTMLMgPopoverElement;
    };
    interface HTMLMgPopoverContentElementEventMap {
        "hide-content": void;
    }
    interface HTMLMgPopoverContentElement extends Components.MgPopoverContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgPopoverContentElementEventMap>(type: K, listener: (this: HTMLMgPopoverContentElement, ev: MgPopoverContentCustomEvent<HTMLMgPopoverContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgPopoverContentElementEventMap>(type: K, listener: (this: HTMLMgPopoverContentElement, ev: MgPopoverContentCustomEvent<HTMLMgPopoverContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgPopoverContentElement: {
        prototype: HTMLMgPopoverContentElement;
        new (): HTMLMgPopoverContentElement;
    };
    interface HTMLMgProgressElement extends Components.MgProgress, HTMLStencilElement {
    }
    var HTMLMgProgressElement: {
        prototype: HTMLMgProgressElement;
        new (): HTMLMgProgressElement;
    };
    interface HTMLMgSkipLinksElementEventMap {
        "go-to-anchor": string;
    }
    interface HTMLMgSkipLinksElement extends Components.MgSkipLinks, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgSkipLinksElementEventMap>(type: K, listener: (this: HTMLMgSkipLinksElement, ev: MgSkipLinksCustomEvent<HTMLMgSkipLinksElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgSkipLinksElementEventMap>(type: K, listener: (this: HTMLMgSkipLinksElement, ev: MgSkipLinksCustomEvent<HTMLMgSkipLinksElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgSkipLinksElement: {
        prototype: HTMLMgSkipLinksElement;
        new (): HTMLMgSkipLinksElement;
    };
    interface HTMLMgTabsElementEventMap {
        "active-tab-change": HTMLMgTabsElement['activeTab'];
    }
    interface HTMLMgTabsElement extends Components.MgTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMgTabsElementEventMap>(type: K, listener: (this: HTMLMgTabsElement, ev: MgTabsCustomEvent<HTMLMgTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMgTabsElementEventMap>(type: K, listener: (this: HTMLMgTabsElement, ev: MgTabsCustomEvent<HTMLMgTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMgTabsElement: {
        prototype: HTMLMgTabsElement;
        new (): HTMLMgTabsElement;
    };
    interface HTMLMgTagElement extends Components.MgTag, HTMLStencilElement {
    }
    var HTMLMgTagElement: {
        prototype: HTMLMgTagElement;
        new (): HTMLMgTagElement;
    };
    interface HTMLMgTooltipElement extends Components.MgTooltip, HTMLStencilElement {
    }
    var HTMLMgTooltipElement: {
        prototype: HTMLMgTooltipElement;
        new (): HTMLMgTooltipElement;
    };
    interface HTMLMgTooltipContentElement extends Components.MgTooltipContent, HTMLStencilElement {
    }
    var HTMLMgTooltipContentElement: {
        prototype: HTMLMgTooltipContentElement;
        new (): HTMLMgTooltipContentElement;
    };
    interface HTMLElementTagNameMap {
        "mg-action-more": HTMLMgActionMoreElement;
        "mg-alert": HTMLMgAlertElement;
        "mg-badge": HTMLMgBadgeElement;
        "mg-button": HTMLMgButtonElement;
        "mg-card": HTMLMgCardElement;
        "mg-character-left": HTMLMgCharacterLeftElement;
        "mg-details": HTMLMgDetailsElement;
        "mg-divider": HTMLMgDividerElement;
        "mg-form": HTMLMgFormElement;
        "mg-icon": HTMLMgIconElement;
        "mg-illustrated-message": HTMLMgIllustratedMessageElement;
        "mg-input": HTMLMgInputElement;
        "mg-input-checkbox": HTMLMgInputCheckboxElement;
        "mg-input-checkbox-paginated": HTMLMgInputCheckboxPaginatedElement;
        "mg-input-date": HTMLMgInputDateElement;
        "mg-input-numeric": HTMLMgInputNumericElement;
        "mg-input-password": HTMLMgInputPasswordElement;
        "mg-input-radio": HTMLMgInputRadioElement;
        "mg-input-rich-text-editor": HTMLMgInputRichTextEditorElement;
        "mg-input-select": HTMLMgInputSelectElement;
        "mg-input-text": HTMLMgInputTextElement;
        "mg-input-textarea": HTMLMgInputTextareaElement;
        "mg-input-title": HTMLMgInputTitleElement;
        "mg-input-toggle": HTMLMgInputToggleElement;
        "mg-item-more": HTMLMgItemMoreElement;
        "mg-loader": HTMLMgLoaderElement;
        "mg-menu": HTMLMgMenuElement;
        "mg-menu-item": HTMLMgMenuItemElement;
        "mg-message": HTMLMgMessageElement;
        "mg-modal": HTMLMgModalElement;
        "mg-pagination": HTMLMgPaginationElement;
        "mg-panel": HTMLMgPanelElement;
        "mg-popover": HTMLMgPopoverElement;
        "mg-popover-content": HTMLMgPopoverContentElement;
        "mg-progress": HTMLMgProgressElement;
        "mg-skip-links": HTMLMgSkipLinksElement;
        "mg-tabs": HTMLMgTabsElement;
        "mg-tag": HTMLMgTagElement;
        "mg-tooltip": HTMLMgTooltipElement;
        "mg-tooltip-content": HTMLMgTooltipContentElement;
    }
}
declare namespace LocalJSX {
    interface MgActionMore {
        /**
          * Define button properties
         */
        "button"?: MgActionMoreButtonType;
        /**
          * Define if chevron is display
         */
        "displayChevron"?: boolean;
        /**
          * Define displayed icon
         */
        "icon"?: MgActionMoreIconType;
        /**
          * Define the menu-items elements
         */
        "items": (MgActionMoreItemType | MgActionMoreDividerType)[];
    }
    interface MgAlert {
        /**
          * Add a delay to hide/close message when it passed Value is defined in seconds and must greater than 2 seconds
         */
        "delay"?: number;
        /**
          * Emmited event when alert is closed
         */
        "onComponent-close"?: (event: MgAlertCustomEvent<void>) => void;
        /**
          * Emited event when alert is hidden
         */
        "onComponent-hide"?: (event: MgAlertCustomEvent<void>) => void;
        /**
          * Emited event when alert is diplayed
         */
        "onComponent-show"?: (event: MgAlertCustomEvent<void>) => void;
        /**
          * Define variant
         */
        "variant"?: VariantType;
        /**
          * Define variant style
         */
        "variantStyle"?: VariantStyleType;
    }
    interface MgBadge {
        /**
          * Badge label. Include short description. Required for accessibility
         */
        "label": string;
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Badge value
         */
        "value": string | number;
        /**
          * Define badge variant
         */
        "variant"?: BadgeVariantType;
    }
    interface MgButton {
        /**
          * Option to set input disable on click, in order to prevent multi-click. Parent component have to remove the attribute 'disabled' when the process ends.
         */
        "disableOnClick"?: boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Define form id to attach button with. If this attribute is not set, the `<button>` is associated with its ancestor `<form>` element.
         */
        "form"?: string;
        /**
          * Set button to full-width
         */
        "fullWidth"?: boolean;
        /**
          * Define if button is round. Used for icon button.
         */
        "isIcon"?: boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label"?: string;
        /**
          * Emmited event when disabled change
         */
        "onDisabled-change"?: (event: MgButtonCustomEvent<HTMLMgButtonElement['disabled']>) => void;
        /**
          * Define button size
         */
        "size"?: SizeType;
        /**
          * Define button type
         */
        "type"?: ButtonType;
        /**
          * Define button variant
         */
        "variant"?: VariantType1;
    }
    interface MgCard {
    }
    interface MgCharacterLeft {
        /**
          * Sets the characters to count
         */
        "characters"?: string;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier"?: string;
        /**
          * Add maximum length
         */
        "maxlength": number;
    }
    interface MgDetails {
        /**
          * Define if details are diplayed
         */
        "expanded"?: boolean;
        /**
          * Hide summary element
         */
        "hideSummary"?: boolean;
        /**
          * Emmited event when expanded change
         */
        "onExpanded-change"?: (event: MgDetailsCustomEvent<HTMLMgDetailsElement['expanded']>) => void;
        /**
          * Displayed title when details are closed
         */
        "toggleClosed": string;
        /**
          * Displayed title when details are opened
         */
        "toggleOpened": string;
    }
    interface MgDivider {
        /**
          * Define component size
         */
        "fullWidth"?: boolean;
    }
    interface MgForm {
        /**
          * Define `<form/>` element aria role see more about aria roles use case: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles
         */
        "ariaRole"?: AriaRoleType;
        /**
          * Define if form is disabled
         */
        "disabled"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define form invalid state
         */
        "invalid"?: boolean;
        /**
          * Define if slotted mg-component's label are displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emitted event on form submit
         */
        "onForm-submit"?: (event: MgFormCustomEvent<boolean>) => void;
        /**
          * Emitted event on form validity check Tells if form is valid or not
         */
        "onForm-valid"?: (event: MgFormCustomEvent<HTMLMgFormElement['valid']>) => void;
        /**
          * Define if form is readonly
         */
        "readonly"?: boolean;
        /**
          * Define when required message is display. When it is unset, component use it internal logic to manage "required message" help text display. When you set the prop to `default`, you override the component internal logique to torce it display "required message" help text. When you set the prop to `hide`, it will prevent the rendering of the message in the component's DOM. As **this element is an accessibility requirement in the view**, you **MUST*** re-implement this message on your own and display it when your form contains required inputs.
         */
        "requiredMessage"?: RequiredMessageStatusType;
        /**
          * Define form valid state
         */
        "valid"?: boolean;
    }
    interface MgIcon {
        /**
          * Icon to display.
         */
        "icon": IconType;
        /**
          * Define icon size
         */
        "size"?: IconSizeType;
        /**
          * Make the icon spin
         */
        "spin"?: boolean;
        /**
          * Define icon variant color
         */
        "variant"?: IconVariantType;
        /**
          * Define icon color variant style Add a color to the icon based on variant color with given style 'full': Used to set a circular background with variant soft color and icon variant color 'background': Used to set a circular background with variant soft color 'icon': Used to set a color only to the icon
         */
        "variantStyle"?: IconVariantStyleType;
    }
    interface MgIllustratedMessage {
        /**
          * Define component orientation
         */
        "direction"?: IllustratedMessageDirectionType;
        /**
          * Define illustration size
         */
        "size"?: IllustratedMessageSizeType;
    }
    interface MgInput {
        /**
          * Define aria-describedby ids to link with
         */
        "ariaDescribedbyIDs"?: string[];
        /**
          * Define error message to display
         */
        "errorMessage"?: string;
        /**
          * Define help text to display
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
    }
    interface MgInputCheckbox {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Display selected values list in "multi" type This prop is only applied with prop type "multi" or when an "unset" mode render a "multi" type.
         */
        "displaySelectedValues"?: boolean;
        /**
          * Overwrite default "edit" button message
         */
        "editButtonMessage"?: string;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList"?: boolean;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Define input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputCheckboxCustomEvent<HTMLMgInputCheckboxElement['valid']>) => void;
        /**
          * Emitted event when value change
         */
        "onValue-change"?: (event: MgInputCheckboxCustomEvent<HTMLMgInputCheckboxElement['value']>) => void;
        /**
          * Define if mg-input-checkbox is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if mg-input-checkbox is required
         */
        "required"?: boolean;
        /**
          * Overwrite default "select" button message
         */
        "selectButtonMessage"?: string;
        /**
          * Overwrite default "show" button message
         */
        "showButtonMessage"?: string;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define checkbox type When it's undefined the type is dynamic: - With 0-5 items type is 'checkbox' - With 5-10 items type is 'multi' When it set the type is locked to the defined value. When type is dynamic OR with 'multi' type AND Over 10 items "search" feature is enabled
         */
        "type"?: CheckboxType;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value If item.value is `null`, checkbox will be indeterminate by default
         */
        "value": CheckboxValue[];
    }
    /**
     * Internal component use to manage sections instances
     */
    interface MgInputCheckboxPaginated {
        /**
          * Define checkboxes to paginate
         */
        "checkboxes"?: CheckboxItem[];
        /**
          * Current page
         */
        "currentPage"?: number;
        /**
          * Define if mg-input-checkbox-list is disabled
         */
        "disabled"?: boolean;
        /**
          * Define mg-input-checkbox input invalid
         */
        "invalid"?: boolean;
        /**
          * Define component message
         */
        "messages"?: Record<string, string>;
        /**
          * Define mg-input-checkbox input name
         */
        "name"?: string;
        /**
          * Emit 'mass-action' event used to informe that select-all/unselect-all button listner is triggered
         */
        "onMass-action"?: (event: MgInputCheckboxPaginatedCustomEvent<SectionKindType>) => void;
        /**
          * Define if mg-input-checkbox-list is readonly
         */
        "readonly"?: boolean;
    }
    interface MgInputDate {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example Available string variables:  - `{pattern}`: render innerHTML pattern based on system  - `{date}`: render innerText date with a pattern base format.  - `{defaultHelpText}`: render default `helpText` usefull to concat helpText local with your custom text. ex: `Input use {pattern} pattern` as `helpText` prop value will be render as `Input use mm/dd/yyyy pattern`
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input maximum date format: yyyy-mm-dd
         */
        "max"?: string;
        /**
          * Define input minimum date format: yyyy-mm-dd
         */
        "min"?: string;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputDateCustomEvent<HTMLMgInputDateElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputDateCustomEvent<HTMLMgInputDateElement['value']>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputNumeric {
        /**
          * Define currency
         */
        "currency"?: string;
        /**
          * Override decimal length decimal is the number after the decimal point
         */
        "decimalLength"?: number;
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Set local formatting. Numbers are formatted based on the locale.
         */
        "format"?: Format;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Override integer length integer is the number before the decimal point
         */
        "integerLength"?: number;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Maximum value
         */
        "max"?: number;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Minimum value
         */
        "min"?: number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputNumericCustomEvent<HTMLMgInputNumericElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputNumericCustomEvent<number>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define numeric type
         */
        "type"?: NumericType;
        /**
          * Define unit symbol (km, L, etc.)
         */
        "unit"?: Intl.NumberFormatOptions['unit'];
        /**
          * Define unit display format ('short', 'long', 'narrow')
         */
        "unitDisplay"?: Intl.NumberFormatOptions['unitDisplay'];
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputPassword {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength"?: any;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputPasswordCustomEvent<HTMLMgInputPasswordElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputPasswordCustomEvent<HTMLMgInputPasswordElement['value']>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputRadio {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList"?: boolean;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | RadioOption[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputRadioCustomEvent<HTMLMgInputRadioElement['valid']>) => void;
        /**
          * Emitted event when value change
         */
        "onValue-change"?: (event: MgInputRadioCustomEvent<HTMLMgInputRadioElement['value']>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgInputRichTextEditor {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Editor modules configuration
         */
        "modules"?: EditorOptionsType['modules'];
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputRichTextEditorCustomEvent<boolean>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputRichTextEditorCustomEvent<string>) => void;
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if the editor is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Define the number of visible text lines for the control
         */
        "rows"?: number;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Define the value of the editor Can be either HTML string or plain text
         */
        "value"?: string;
    }
    interface MgInputSelect {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Items are the possible options to select
         */
        "items": (string | SelectOption)[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputSelectCustomEvent<HTMLMgInputCheckboxElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputSelectCustomEvent<HTMLMgInputCheckboxElement['value']>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Option to disable placeholder
         */
        "placeholderDisabled"?: boolean;
        /**
          * Option to remove placeholder
         */
        "placeholderHide"?: boolean;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgInputText {
        /**
          * Define if component should display character left
         */
        "characterLeftHide"?: boolean;
        /**
          * Define datalist options
         */
        "datalistoptions"?: string[] | OptionType[];
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Input icon
         */
        "icon"?: IconType1;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength"?: number;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputTextCustomEvent<HTMLMgInputTextElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputTextCustomEvent<HTMLMgInputTextElement['value']>) => void;
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Input type
         */
        "type"?: TextType;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgInputTextarea {
        /**
          * Define if component should display character left
         */
        "characterLeftHide"?: boolean;
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength"?: number;
        /**
          * Define input width
         */
        "mgWidth"?: Width;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputTextareaCustomEvent<HTMLMgInputTextareaElement['valid']>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputTextareaCustomEvent<HTMLMgInputTextareaElement['value']>) => void;
        /**
          * Define input pattern to validate Please refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Define if input is resizable
         */
        "resizable"?: 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * Define the number of visible text lines for the control
         */
        "rows"?: number;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputTitle {
        /**
          * Label input id
         */
        "identifier": string;
        /**
          * Switch from label to fieldset sementic
         */
        "isLegend"?: boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "readonly"?: boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required"?: boolean;
    }
    interface MgInputToggle {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js)
         */
        "identifier": string;
        /**
          * Define if toggle display icon
         */
        "isIcon"?: boolean;
        /**
          * Define if toggle have on/off style
         */
        "isOnOff"?: boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | ToggleValue[];
        /**
          * Input label
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emited event when checking validity
         */
        "onInput-valid"?: (event: MgInputToggleCustomEvent<boolean>) => void;
        /**
          * Emited event when value change
         */
        "onValue-change"?: (event: MgInputToggleCustomEvent<HTMLMgInputToggleElement['value']>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define tooltip position
         */
        "tooltipPosition"?: TooltipPosition;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgItemMore {
        /**
          * Define icon
         */
        "icon"?: IconType2;
        /**
          * Define component child menu size.
         */
        "size"?: SizeType1;
        /**
          * Define slot label element
         */
        "slotlabel"?: SlotLabelType;
    }
    interface MgLoader {
        /**
          * Override loader message
         */
        "message"?: string;
        /**
          * Hide message
         */
        "messageHide"?: boolean;
    }
    interface MgMenu {
        /**
          * Component display direction.
         */
        "direction"?: Direction;
        /**
          * Customize "mg-item-more" element Used with direction: 'vertical' to manage overflow
         */
        "itemmore"?: ItemMoreType;
        /**
          * Menu label. Include short menu description. Required to define accessibility required attribute `aria-label`
         */
        "label": string;
        /**
          * Define mg-menu size
         */
        "size"?: MenuSizeType;
    }
    interface MgMenuItem {
        /**
          * Define menu-item content expanded.
         */
        "expanded"?: boolean;
        /**
          * Define menu-item href when defined menu-item contain an anchor instead of button
         */
        "href"?: string;
        /**
          * Identifier is used to control mg-popover
         */
        "identifier"?: string;
        /**
          * Emited event when item is loaded
         */
        "onItem-loaded"?: (event: MgMenuItemCustomEvent<void>) => void;
        /**
          * Emited event when item is updated
         */
        "onItem-updated"?: (event: MgMenuItemCustomEvent<void>) => void;
        /**
          * Define menu-item status.
         */
        "status"?: MgMenuStatusType;
        /**
          * Define target type
         */
        "target"?: TargetType;
    }
    interface MgMessage {
        /**
          * Define variant
         */
        "variant"?: VariantType2;
        /**
          * Define variant style
         */
        "variantStyle"?: VariantStyleType1;
    }
    interface MgModal {
        /**
          * Define if modal has a cross button
         */
        "closeButton"?: boolean;
        /**
          * Modal dialog role.
         */
        "dialogRole"?: DialogRoleType;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Displayed modal title
         */
        "modalTitle": string;
        /**
          * Emmited event when modal is closed
         */
        "onComponent-close"?: (event: MgModalCustomEvent<void>) => void;
        /**
          * Emmited event when modal is hidden
         */
        "onComponent-hide"?: (event: MgModalCustomEvent<void>) => void;
        /**
          * Emmited event when modal is diplayed
         */
        "onComponent-show"?: (event: MgModalCustomEvent<void>) => void;
        /**
          * Define if modal is open
         */
        "open"?: boolean;
    }
    interface MgPagination {
        /**
          * Component current page
         */
        "currentPage"?: number;
        /**
          * Hide navigation label
         */
        "hideNavigationLabels"?: boolean;
        /**
          * Hide select input
         */
        "hidePageCount"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Panignation label. Is a short description. Customize default value can be usefull to improve accessibility
         */
        "label"?: string;
        /**
          * Emmited event when current page change
         */
        "onCurrent-page-change"?: (event: MgPaginationCustomEvent<number>) => void;
        /**
          * Component total pages
         */
        "totalPages"?: number;
    }
    interface MgPanel {
        /**
          * Disable possibility to toggle expand
         */
        "expandToggleDisabled"?: boolean;
        /**
          * Define expand toggle button display
         */
        "expandToggleDisplay"?: ExpandToggleDisplayType;
        /**
          * Panel is opened
         */
        "expanded"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Emmited event when expanded change
         */
        "onExpanded-change"?: (event: MgPanelCustomEvent<HTMLMgPanelElement['expanded']>) => void;
        /**
          * Emmited event when title change
         */
        "onTitle-change"?: (event: MgPanelCustomEvent<HTMLMgPanelElement['panelTitle']>) => void;
        /**
          * Panel title
         */
        "panelTitle": string;
        /**
          * Define if panel title is editable
         */
        "titleEditable"?: boolean;
        /**
          * Panel title pattern
         */
        "titlePattern"?: string;
        /**
          * Panel title pattern error message
         */
        "titlePatternErrorMessage"?: string;
        /**
          * Define title position
         */
        "titlePosition"?: TitlePositionType;
    }
    interface MgPopover {
        /**
          * Hide popover arrow
         */
        "arrowHide"?: boolean;
        /**
          * Define if popover has a cross button
         */
        "closeButton"?: boolean;
        /**
          * Disable popover
         */
        "disabled"?: boolean;
        /**
          * Display popover
         */
        "display"?: boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier"?: string;
        /**
          * Emmited event when popover is closed
         */
        "onComponent-close"?: (event: MgPopoverCustomEvent<void>) => void;
        /**
          * Emited event when display value change
         */
        "onDisplay-change"?: (event: MgPopoverCustomEvent<HTMLMgPopoverElement['display']>) => void;
        /**
          * Popover placement
         */
        "placement"?: PopoverPlacementType;
    }
    interface MgPopoverContent {
        /**
          * Define if popover has a cross button
         */
        "closeButton"?: boolean;
        /**
          * Emited event when close button is clicked
         */
        "onHide-content"?: (event: MgPopoverContentCustomEvent<void>) => void;
    }
    interface MgProgress {
        /**
          * Define progress role - `progressbar` to indicate a progress, such as loading or percent completion of a task - `meter` to indicate a graphical display of a numeric value that varies within a defined range
         */
        "ariaRole"?: AriaRoleType1;
        /**
          * Define label
         */
        "label": string;
        /**
          * Define the maximum value in the range
         */
        "max"?: number;
        /**
          * Define the minimum value in the range
         */
        "min"?: number;
        /**
          * Define current value By default, it will be displayed as a percentage value. If you don’t specify the min and max props, the value should be a number within the range of 0 to 100.
         */
        "value"?: number;
    }
    interface MgSkipLinks {
        /**
          * Skip links
         */
        "links"?: SkipLink[];
        /**
          * Emited event when link is clicked
         */
        "onGo-to-anchor"?: (event: MgSkipLinksCustomEvent<string>) => void;
    }
    interface MgTabs {
        /**
          * Active tab number
         */
        "activeTab"?: number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Tabs items
         */
        "items": string[] | TabItem[];
        /**
          * Tabs label. Include short tabs description. Required for accessibility
         */
        "label": string;
        /**
          * Emited event when active tab change
         */
        "onActive-tab-change"?: (event: MgTabsCustomEvent<HTMLMgTabsElement['activeTab']>) => void;
        /**
          * Define tabs size
         */
        "size"?: SizeType2;
    }
    interface MgTag {
        /**
          * Define if tag is using outline style
         */
        "outline"?: boolean;
        /**
          * Define if tag is using soft style
         */
        "soft"?: boolean;
        /**
          * Define tag variant
         */
        "variant"?: TagVariantType;
    }
    interface MgTooltip {
        /**
          * Disable tooltip
         */
        "disabled"?: boolean;
        /**
          * Display tooltip
         */
        "display"?: boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `aria-decribedby`.
         */
        "identifier"?: string;
        /**
          * Displayed message in the tooltip
         */
        "message": string;
        /**
          * Tooltip placement
         */
        "placement"?: TooltipPlacementType;
    }
    interface MgTooltipContent {
        /**
          * Displayed message in the tooltip
         */
        "message": string;
    }
    interface IntrinsicElements {
        "mg-action-more": MgActionMore;
        "mg-alert": MgAlert;
        "mg-badge": MgBadge;
        "mg-button": MgButton;
        "mg-card": MgCard;
        "mg-character-left": MgCharacterLeft;
        "mg-details": MgDetails;
        "mg-divider": MgDivider;
        "mg-form": MgForm;
        "mg-icon": MgIcon;
        "mg-illustrated-message": MgIllustratedMessage;
        "mg-input": MgInput;
        "mg-input-checkbox": MgInputCheckbox;
        "mg-input-checkbox-paginated": MgInputCheckboxPaginated;
        "mg-input-date": MgInputDate;
        "mg-input-numeric": MgInputNumeric;
        "mg-input-password": MgInputPassword;
        "mg-input-radio": MgInputRadio;
        "mg-input-rich-text-editor": MgInputRichTextEditor;
        "mg-input-select": MgInputSelect;
        "mg-input-text": MgInputText;
        "mg-input-textarea": MgInputTextarea;
        "mg-input-title": MgInputTitle;
        "mg-input-toggle": MgInputToggle;
        "mg-item-more": MgItemMore;
        "mg-loader": MgLoader;
        "mg-menu": MgMenu;
        "mg-menu-item": MgMenuItem;
        "mg-message": MgMessage;
        "mg-modal": MgModal;
        "mg-pagination": MgPagination;
        "mg-panel": MgPanel;
        "mg-popover": MgPopover;
        "mg-popover-content": MgPopoverContent;
        "mg-progress": MgProgress;
        "mg-skip-links": MgSkipLinks;
        "mg-tabs": MgTabs;
        "mg-tag": MgTag;
        "mg-tooltip": MgTooltip;
        "mg-tooltip-content": MgTooltipContent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mg-action-more": LocalJSX.MgActionMore & JSXBase.HTMLAttributes<HTMLMgActionMoreElement>;
            "mg-alert": LocalJSX.MgAlert & JSXBase.HTMLAttributes<HTMLMgAlertElement>;
            "mg-badge": LocalJSX.MgBadge & JSXBase.HTMLAttributes<HTMLMgBadgeElement>;
            "mg-button": LocalJSX.MgButton & JSXBase.HTMLAttributes<HTMLMgButtonElement>;
            "mg-card": LocalJSX.MgCard & JSXBase.HTMLAttributes<HTMLMgCardElement>;
            "mg-character-left": LocalJSX.MgCharacterLeft & JSXBase.HTMLAttributes<HTMLMgCharacterLeftElement>;
            "mg-details": LocalJSX.MgDetails & JSXBase.HTMLAttributes<HTMLMgDetailsElement>;
            "mg-divider": LocalJSX.MgDivider & JSXBase.HTMLAttributes<HTMLMgDividerElement>;
            "mg-form": LocalJSX.MgForm & JSXBase.HTMLAttributes<HTMLMgFormElement>;
            "mg-icon": LocalJSX.MgIcon & JSXBase.HTMLAttributes<HTMLMgIconElement>;
            "mg-illustrated-message": LocalJSX.MgIllustratedMessage & JSXBase.HTMLAttributes<HTMLMgIllustratedMessageElement>;
            "mg-input": LocalJSX.MgInput & JSXBase.HTMLAttributes<HTMLMgInputElement>;
            "mg-input-checkbox": LocalJSX.MgInputCheckbox & JSXBase.HTMLAttributes<HTMLMgInputCheckboxElement>;
            /**
             * Internal component use to manage sections instances
             */
            "mg-input-checkbox-paginated": LocalJSX.MgInputCheckboxPaginated & JSXBase.HTMLAttributes<HTMLMgInputCheckboxPaginatedElement>;
            "mg-input-date": LocalJSX.MgInputDate & JSXBase.HTMLAttributes<HTMLMgInputDateElement>;
            "mg-input-numeric": LocalJSX.MgInputNumeric & JSXBase.HTMLAttributes<HTMLMgInputNumericElement>;
            "mg-input-password": LocalJSX.MgInputPassword & JSXBase.HTMLAttributes<HTMLMgInputPasswordElement>;
            "mg-input-radio": LocalJSX.MgInputRadio & JSXBase.HTMLAttributes<HTMLMgInputRadioElement>;
            "mg-input-rich-text-editor": LocalJSX.MgInputRichTextEditor & JSXBase.HTMLAttributes<HTMLMgInputRichTextEditorElement>;
            "mg-input-select": LocalJSX.MgInputSelect & JSXBase.HTMLAttributes<HTMLMgInputSelectElement>;
            "mg-input-text": LocalJSX.MgInputText & JSXBase.HTMLAttributes<HTMLMgInputTextElement>;
            "mg-input-textarea": LocalJSX.MgInputTextarea & JSXBase.HTMLAttributes<HTMLMgInputTextareaElement>;
            "mg-input-title": LocalJSX.MgInputTitle & JSXBase.HTMLAttributes<HTMLMgInputTitleElement>;
            "mg-input-toggle": LocalJSX.MgInputToggle & JSXBase.HTMLAttributes<HTMLMgInputToggleElement>;
            "mg-item-more": LocalJSX.MgItemMore & JSXBase.HTMLAttributes<HTMLMgItemMoreElement>;
            "mg-loader": LocalJSX.MgLoader & JSXBase.HTMLAttributes<HTMLMgLoaderElement>;
            "mg-menu": LocalJSX.MgMenu & JSXBase.HTMLAttributes<HTMLMgMenuElement>;
            "mg-menu-item": LocalJSX.MgMenuItem & JSXBase.HTMLAttributes<HTMLMgMenuItemElement>;
            "mg-message": LocalJSX.MgMessage & JSXBase.HTMLAttributes<HTMLMgMessageElement>;
            "mg-modal": LocalJSX.MgModal & JSXBase.HTMLAttributes<HTMLMgModalElement>;
            "mg-pagination": LocalJSX.MgPagination & JSXBase.HTMLAttributes<HTMLMgPaginationElement>;
            "mg-panel": LocalJSX.MgPanel & JSXBase.HTMLAttributes<HTMLMgPanelElement>;
            "mg-popover": LocalJSX.MgPopover & JSXBase.HTMLAttributes<HTMLMgPopoverElement>;
            "mg-popover-content": LocalJSX.MgPopoverContent & JSXBase.HTMLAttributes<HTMLMgPopoverContentElement>;
            "mg-progress": LocalJSX.MgProgress & JSXBase.HTMLAttributes<HTMLMgProgressElement>;
            "mg-skip-links": LocalJSX.MgSkipLinks & JSXBase.HTMLAttributes<HTMLMgSkipLinksElement>;
            "mg-tabs": LocalJSX.MgTabs & JSXBase.HTMLAttributes<HTMLMgTabsElement>;
            "mg-tag": LocalJSX.MgTag & JSXBase.HTMLAttributes<HTMLMgTagElement>;
            "mg-tooltip": LocalJSX.MgTooltip & JSXBase.HTMLAttributes<HTMLMgTooltipElement>;
            "mg-tooltip-content": LocalJSX.MgTooltipContent & JSXBase.HTMLAttributes<HTMLMgTooltipContentElement>;
        }
    }
}
