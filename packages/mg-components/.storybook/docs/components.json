{
  "timestamp": "2024-07-16T08:32:34",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.19.2",
    "typescriptVersion": "5.4.5"
  },
  "components": [
    {
      "filePath": "src/components/molecules/mg-action-more/mg-action-more.tsx",
      "encapsulation": "shadow",
      "tag": "mg-action-more",
      "readme": "## Behavior\n\n### Action\n\nIn addition of the standard popover's behavior, when an item of the menu is clicked the popover closes itself.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "button",
          "type": "{ label?: string; disabled?: boolean; variant: \"flat\" | \"info\" | \"success\" | \"link\" | \"danger\" | \"danger-alt\" | \"primary\" | \"secondary\"; isIcon: boolean; }",
          "complexType": {
            "original": "MgActionMoreButtonType",
            "resolved": "{ label?: string; disabled?: boolean; variant: \"flat\" | \"info\" | \"success\" | \"link\" | \"danger\" | \"danger-alt\" | \"primary\" | \"secondary\"; isIcon: boolean; }",
            "references": {
              "MgActionMoreButtonType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreButtonType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define button properties",
          "docsTags": [],
          "default": "{ variant: 'flat', isIcon: true }",
          "values": [
            {
              "type": "{ label?: string; disabled?: boolean; variant: \"flat\""
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "danger-alt",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "type": "\"secondary\"; isIcon: boolean; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "displayChevron",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-chevron",
          "reflectToAttr": false,
          "docs": "Define if chevron is display",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
          "complexType": {
            "original": "MgActionMoreIconType",
            "resolved": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
            "references": {
              "MgActionMoreIconType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreIconType"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Define displayed icon",
          "docsTags": [],
          "values": [
            {
              "type": "{ icon: \"filter\""
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "type": "\"wallet-outline\"; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "items",
          "type": "(MgActionMoreItemType | MgActionMoreDividerType)[]",
          "complexType": {
            "original": "(MgActionMoreItemType | MgActionMoreDividerType)[]",
            "resolved": "(MgActionMoreItemType | MgActionMoreDividerType)[]",
            "references": {
              "MgActionMoreItemType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreItemType"
              },
              "MgActionMoreDividerType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreDividerType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define the menu-items elements",
          "docsTags": [],
          "values": [
            {
              "type": "(MgActionMoreItemType"
            },
            {
              "type": "MgActionMoreDividerType)[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-popover",
        "mg-button",
        "mg-menu",
        "mg-divider",
        "mg-menu-item",
        "mg-badge"
      ],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-icon",
          "mg-popover",
          "mg-button",
          "mg-menu",
          "mg-divider",
          "mg-menu-item",
          "mg-badge"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-menu": [
          "mg-item-more"
        ],
        "mg-item-more": [
          "mg-menu-item",
          "mg-icon",
          "mg-menu"
        ],
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-alert/mg-alert.tsx",
      "encapsulation": "shadow",
      "tag": "mg-alert",
      "readme": "## Usage\n\nWhen a trigger (such as a button) is activated, it can display an alert message. By default, activating the trigger erases any previous alert messages of the same type on the screen.\n\n## Hide component\n\nTo hide the component, you must use the native `hidden` attribute.\n",
      "docs": "When a trigger (such as a button) is activated, it can display an alert message. By default, activating the trigger erases any previous alert messages of the same type on the screen.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Alert content"
        },
        {
          "name": "slot",
          "text": "actions - Actions content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if message has a close button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "delay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "Add a delay to hide/close message when it passed\nValue is defined in seconds and must greater than 2 seconds",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "VariantType",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-alert.conf",
                "id": "src/components/molecules/mg-alert/mg-alert.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define variant",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variantStyle",
          "type": "\"background\" | \"bar-left\"",
          "complexType": {
            "original": "VariantStyleType",
            "resolved": "\"background\" | \"bar-left\"",
            "references": {
              "VariantStyleType": {
                "location": "import",
                "path": "./mg-alert.conf",
                "id": "src/components/molecules/mg-alert/mg-alert.conf.ts::VariantStyleType"
              }
            }
          },
          "mutable": false,
          "attr": "variant-style",
          "reflectToAttr": false,
          "docs": "Define variant style",
          "docsTags": [],
          "values": [
            {
              "value": "background",
              "type": "string"
            },
            {
              "value": "bar-left",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when alert is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when alert is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Alert content"
        },
        {
          "name": "actions",
          "docs": "Actions content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-message",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-alert": [
          "mg-message",
          "mg-button",
          "mg-icon"
        ],
        "mg-message": [
          "mg-card",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-badge/mg-badge.tsx",
      "encapsulation": "shadow",
      "tag": "mg-badge",
      "readme": "## Usage \n\nThe badge is always placed on top of or next to the element it is associated with.\n\nThe badge displays a number (which can be followed by the `+` character) or a punctuation character.\n",
      "docs": "The badge is always placed on top of or next to the element it is associated with.\n\nThe badge displays a number (which can be followed by the `+` character) or a punctuation character.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Badge label. Include short description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if button is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Badge value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"text-color\" | \"warning\"",
          "complexType": {
            "original": "BadgeVariantType",
            "resolved": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"text-color\" | \"warning\"",
            "references": {
              "BadgeVariantType": {
                "location": "import",
                "path": "./mg-badge.conf",
                "id": "src/components/atoms/mg-badge/mg-badge.conf.ts::BadgeVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define badge variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text-color",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-badge-font-size",
          "annotation": "prop",
          "docs": "Defines the font size of the badge. The default value is `--mg-b-font-size-small`."
        },
        {
          "name": "--mg-c-badge-size",
          "annotation": "prop",
          "docs": "Defines the height and minimum width of the badge. The default value is `--mg-b-size-16`."
        },
        {
          "name": "--mg-c-badge-text-color",
          "annotation": "prop",
          "docs": "Defines the font color of the badge when used with the `text-color` variant and without `outline`. The default value is `--mg-b-color-light`."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-menu-item",
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-badge"
        ],
        "mg-menu-item": [
          "mg-badge"
        ],
        "mg-tabs": [
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-button/mg-button.tsx",
      "encapsulation": "shadow",
      "tag": "mg-button",
      "readme": "## Usage\n\nA primary action button is usually unique on the screen, with other buttons displayed as \"secondary\" to highlight the primary action, such as Validation or Save.\n\nA tooltip should be displayed on hover when the button only shows a non-explicit icon and has no label. The tooltip must indicate the button's action.\n\nFor a button that launches a potentially long process, it should be disabled and display a loader for the duration of the process. Use the `disable-on-click` attribute to ensure the button is disabled when clicked.\n\nA button with an `undefined` `type` in a form will natively have a [submit type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Button#attributes) and trigger form submission. For non-submission buttons, explicitly set the `type` attribute to \"button\".\n\n## Attribute combination: `disable-on-click` and `disabled`\n\nWhen a click is triggered, the component sets the `disabled` prop to `true`.\n\nTo benefit from a reactive `disabled` prop, you need to handle the `disabled-change` event.\n\nTo reset the loader after the process has completed, set the `disabled` prop asynchronously.\n",
      "docs": "A primary action button is usually unique on the screen, with other buttons displayed as \"secondary\" to highlight the primary action, such as Validation or Save.\n\nA tooltip should be displayed on hover when the button only shows a non-explicit icon and has no label. The tooltip must indicate the button's action.\n\nFor a button that launches a potentially long process, it should be disabled and display a loader for the duration of the process. Use the `disable-on-click` attribute to ensure the button is disabled when clicked.\n\nA button with an `undefined` `type` in a form will natively have a [submit type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Button#attributes) and trigger form submission. For non-submission buttons, explicitly set the `type` attribute to \"button\".",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Button content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disableOnClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-on-click",
          "reflectToAttr": false,
          "docs": "Option to set input disable on click, in order to prevent multi-click.\nParent component have to remove the attribute 'disabled' when the process ends.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable button",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Define form id to attach button with.\nIf this attribute is not set, the <button> is associated with its ancestor <form> element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "Set button to full-width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if button is round.\nUsed for icon button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "aria-label\nIn case button text is not explicit enough",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "ButtonType",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {
              "ButtonType": {
                "location": "import",
                "path": "./mg-button.conf",
                "id": "src/components/atoms/mg-button/mg-button.conf.ts::ButtonType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define button type",
          "docsTags": [],
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"danger-alt\" | \"flat\" | \"info\" | \"link\" | \"primary\" | \"secondary\" | \"success\"",
          "complexType": {
            "original": "VariantType",
            "resolved": "\"danger\" | \"danger-alt\" | \"flat\" | \"info\" | \"link\" | \"primary\" | \"secondary\" | \"success\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-button.conf",
                "id": "src/components/atoms/mg-button/mg-button.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define button variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "danger-alt",
              "type": "string"
            },
            {
              "value": "flat",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "disabled-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgButtonElement['disabled']",
            "resolved": "boolean",
            "references": {
              "HTMLMgButtonElement": {
                "location": "global",
                "id": "global::HTMLMgButtonElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when disabled change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-button-border-bottom-width",
          "annotation": "prop",
          "docs": "Defines the bottom border width of the button. Unset by default, fallback on `--mg-b-size-border`."
        },
        {
          "name": "--mg-c-button-border-left-width",
          "annotation": "prop",
          "docs": "Defines the left border width of the button. Unset by default, fallback on `--mg-b-size-border`."
        },
        {
          "name": "--mg-c-button-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the button. The default value is `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-button-border-radius-bottom-left",
          "annotation": "prop",
          "docs": "Defines the bottom left border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`."
        },
        {
          "name": "--mg-c-button-border-radius-bottom-right",
          "annotation": "prop",
          "docs": "Defines the bottom right border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`."
        },
        {
          "name": "--mg-c-button-border-radius-top-left",
          "annotation": "prop",
          "docs": "Defines the top left border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`."
        },
        {
          "name": "--mg-c-button-border-radius-top-right",
          "annotation": "prop",
          "docs": "Defines the top right border radius of the button. Unset by default, fallback on `--mg-c-button-border-radius`."
        },
        {
          "name": "--mg-c-button-border-right-width",
          "annotation": "prop",
          "docs": "Defines the right border width of the button. Unset by default, fallback on `--mg-b-size-border`."
        },
        {
          "name": "--mg-c-button-border-top-width",
          "annotation": "prop",
          "docs": "Defines the top border width of the button. Unset by default, fallback on `--mg-b-size-border`."
        },
        {
          "name": "--mg-c-button-color-background-danger",
          "annotation": "prop",
          "docs": "Defines the background color for the danger variant button."
        },
        {
          "name": "--mg-c-button-color-background-danger-alt",
          "annotation": "prop",
          "docs": "Defines the background color for the danger-alt variant button."
        },
        {
          "name": "--mg-c-button-color-background-info",
          "annotation": "prop",
          "docs": "Defines the background color for the info variant button."
        },
        {
          "name": "--mg-c-button-color-background-primary",
          "annotation": "prop",
          "docs": "Defines the background color for the primary variant button."
        },
        {
          "name": "--mg-c-button-color-background-secondary",
          "annotation": "prop",
          "docs": "Defines the background color for the secondary variant button."
        },
        {
          "name": "--mg-c-button-color-background-success",
          "annotation": "prop",
          "docs": "Defines the background color for the success variant button."
        },
        {
          "name": "--mg-c-button-color-background-warning",
          "annotation": "prop",
          "docs": "Defines the background color for the warning variant button."
        },
        {
          "name": "--mg-c-button-color-border-danger",
          "annotation": "prop",
          "docs": "Defines the border color for the danger variant button."
        },
        {
          "name": "--mg-c-button-color-border-danger-alt",
          "annotation": "prop",
          "docs": "Defines the border color for the danger-alt variant button."
        },
        {
          "name": "--mg-c-button-color-border-info",
          "annotation": "prop",
          "docs": "Defines the border color for the info variant button."
        },
        {
          "name": "--mg-c-button-color-border-primary",
          "annotation": "prop",
          "docs": "Defines the border color for the primary variant button."
        },
        {
          "name": "--mg-c-button-color-border-secondary",
          "annotation": "prop",
          "docs": "Defines the border color for the secondary variant button."
        },
        {
          "name": "--mg-c-button-color-border-success",
          "annotation": "prop",
          "docs": "Defines the border color for the success variant button."
        },
        {
          "name": "--mg-c-button-color-border-warning",
          "annotation": "prop",
          "docs": "Defines the border color for the warning variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-danger",
          "annotation": "prop",
          "docs": "Defines the gradient color for the danger variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-danger-alt",
          "annotation": "prop",
          "docs": "Defines the gradient color for the danger-alt variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-info",
          "annotation": "prop",
          "docs": "Defines the gradient color for the info variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-primary",
          "annotation": "prop",
          "docs": "Defines the gradient color for the primary variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-secondary",
          "annotation": "prop",
          "docs": "Defines the gradient color for the secondary variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-success",
          "annotation": "prop",
          "docs": "Defines the gradient color for the success variant button."
        },
        {
          "name": "--mg-c-button-color-gradient-warning",
          "annotation": "prop",
          "docs": "Defines the gradient color for the warning variant button."
        },
        {
          "name": "--mg-c-button-color-text-danger",
          "annotation": "prop",
          "docs": "Defines the font color for the danger variant button."
        },
        {
          "name": "--mg-c-button-color-text-danger-alt",
          "annotation": "prop",
          "docs": "Defines the font color for the danger-alt variant button."
        },
        {
          "name": "--mg-c-button-color-text-info",
          "annotation": "prop",
          "docs": "Defines the font color for the info variant button."
        },
        {
          "name": "--mg-c-button-color-text-primary",
          "annotation": "prop",
          "docs": "Defines the font color for the primary variant button."
        },
        {
          "name": "--mg-c-button-color-text-secondary",
          "annotation": "prop",
          "docs": "Defines the font color for the secondary variant button."
        },
        {
          "name": "--mg-c-button-color-text-success",
          "annotation": "prop",
          "docs": "Defines the font color for the success variant button."
        },
        {
          "name": "--mg-c-button-color-text-warning",
          "annotation": "prop",
          "docs": "Defines the font color for the warning variant button."
        },
        {
          "name": "--mg-c-button-font-weight",
          "annotation": "prop",
          "docs": "Defines the font weight of the button. Unset by default, fallback on `normal`."
        },
        {
          "name": "--mg-c-button-icon-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the button in icon mode. The default value is `--mg-b-size-min-height`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Button content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-alert",
        "mg-input-checkbox",
        "mg-input-checkbox-paginated",
        "mg-input-password",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover-content"
      ],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-button"
        ],
        "mg-alert": [
          "mg-button"
        ],
        "mg-input-checkbox": [
          "mg-button"
        ],
        "mg-input-checkbox-paginated": [
          "mg-button"
        ],
        "mg-input-password": [
          "mg-button"
        ],
        "mg-modal": [
          "mg-button"
        ],
        "mg-pagination": [
          "mg-button"
        ],
        "mg-panel": [
          "mg-button"
        ],
        "mg-popover-content": [
          "mg-button"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-card/mg-card.tsx",
      "encapsulation": "shadow",
      "tag": "mg-card",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Card content"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-card-border",
          "annotation": "prop",
          "docs": "Defines the border property for the card. Unset by default, fallback on `--mg-c-card-border-default`."
        },
        {
          "name": "--mg-c-card-border-default",
          "annotation": "prop",
          "docs": "Defines the default border property for the card. Default value: `var(--mg-b-size-border) solid color-mix(in srgb, var(--mg-b-color-dark), transparent 95%)`."
        },
        {
          "name": "--mg-c-card-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius property for the card. Unset by default, fallback on `--mg-c-card-border-radius-default`."
        },
        {
          "name": "--mg-c-card-border-radius-default",
          "annotation": "prop",
          "docs": "Defines the default border radius property for the card. Default value: `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-card-box-shadow",
          "annotation": "prop",
          "docs": "Defines the box shadow property for the card. Unset by default, fallback on `--mg-c-card-box-shadow-default`."
        },
        {
          "name": "--mg-c-card-box-shadow-default",
          "annotation": "prop",
          "docs": "Defines the default box shadow property for the card. Default value: `--mg-b-box-shadow`."
        },
        {
          "name": "--mg-c-card-color-background",
          "annotation": "prop",
          "docs": "Defines the background property for the card. Unset by default, fallback on `--mg-c-card-color-background-default`."
        },
        {
          "name": "--mg-c-card-color-background-default",
          "annotation": "prop",
          "docs": "Defines the default background property for the card. Default value: `--mg-b-color-light`."
        },
        {
          "name": "--mg-c-card-max-width",
          "annotation": "prop",
          "docs": "Defines the max-width property for the card. Unset by default."
        },
        {
          "name": "--mg-c-card-overflow",
          "annotation": "prop",
          "docs": "Defines the overflow property for the card. Unset by default, fallback on `--mg-c-card-overflow-default`."
        },
        {
          "name": "--mg-c-card-overflow-default",
          "annotation": "prop",
          "docs": "Defines the default overflow property for the card. Unset by default."
        },
        {
          "name": "--mg-c-card-spacing",
          "annotation": "prop",
          "docs": "Defines the padding property for the card. Unset by default, fallback on `--mg-c-card-spacing-default`."
        },
        {
          "name": "--mg-c-card-spacing-default",
          "annotation": "prop",
          "docs": "Defines the default padding property for the card. Default value: `--mg-b-size-16`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Card content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-message",
        "mg-modal",
        "mg-panel",
        "mg-popover-content"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-message": [
          "mg-card"
        ],
        "mg-modal": [
          "mg-card"
        ],
        "mg-panel": [
          "mg-card"
        ],
        "mg-popover-content": [
          "mg-card"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-details/mg-details.tsx",
      "encapsulation": "shadow",
      "tag": "mg-details",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "summary - Summary content"
        },
        {
          "name": "slot",
          "text": "details - Details content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Define if details are diplayed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSummary",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-summary",
          "reflectToAttr": false,
          "docs": "Hide summary element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleClosed",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-closed",
          "reflectToAttr": false,
          "docs": "Displayed title when details are closed",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "toggleOpened",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-opened",
          "reflectToAttr": false,
          "docs": "Displayed title when details are opened",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "expanded-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgDetailsElement['expanded']",
            "resolved": "boolean",
            "references": {
              "HTMLMgDetailsElement": {
                "location": "global",
                "id": "global::HTMLMgDetailsElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when expanded change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-details-spacing",
          "annotation": "prop",
          "docs": "Defines the spacing between the summary and the details. Default value: `--mg-b-size-8`."
        }
      ],
      "slots": [
        {
          "name": "details",
          "docs": "Details content"
        },
        {
          "name": "summary",
          "docs": "Summary content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-details": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-divider/mg-divider.tsx",
      "encapsulation": "shadow",
      "tag": "mg-divider",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "Define component size",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-divider-color-background",
          "annotation": "prop",
          "docs": "Defines the background color of the divider. The default value is `color-mix(in srgb, var(--mg-b-color-dark), transparent 85%)`."
        },
        {
          "name": "--mg-c-divider-spacing-vertical",
          "annotation": "prop",
          "docs": "Defines the vertical spacing of the divider. The default value is `--mg-b-size-40`."
        },
        {
          "name": "--mg-c-divider-thickness",
          "annotation": "prop",
          "docs": "Defines the thickness of the divider. The default value is `--mg-b-size-border`."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-divider"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-form/mg-form.tsx",
      "encapsulation": "shadow",
      "tag": "mg-form",
      "readme": "## Usage\n\nUse mg-form to build clean forms.  \nThe component manages:\n\n- the spacing between inputs\n- the required fields message\n\n## Behavior\n\n### Required field(s) message\n\nThis message is automatically generated by the component.\n\n- If there is only 1 required input (among other inputs)\n\n  > Field with a \\* is required\n\n- If there are many required inputs (among other inputs)\n\n  > Fields with a \\* are required\n\n- If there is only 1 input and it is required\n\n  > The field is required\n\n  In this case, the \\* is hidden on input labels.\n\n- If all inputs are required\n\n  > All fields are required\n\n  In this case, the \\* is hidden on input labels.\n\n## Combining `mg-input-*` with legacy libraries\n\nIf you are creating a form that combines `mg-components` inputs with inputs from one of our legacy libraries (e.g., form, ui-components, ui-components-vuejs), you can achieve consistent styling by applying the `mg-u-form-legacy` class to the `mg-form` element. This ensures that `mg-input-*` components behave in accordance with Bootstrap styling conventions.\n\n```html\n<mg-form class=\"form-horizontal mg-u-form-legacy\">\n  <text-field\n    label=\"Text field label\"\n    reference=\"reference\"\n    help=\"Text field tooltip\"\n  ></text-field>\n  <mg-input-text\n    label=\"Mg input text label\"\n    identifier=\"identifier\"\n    tooltip=\"Mg input text tooltip\"\n  ></mg-input-text>\n</mg-form>\n\n```\n\n## 👍 Good practices\n\n### Enabling _submit_ button\n\nYou can disable the _submit button_ until all required fields are filled. To do this, use the \"valid/invalid\" options.\n\n## 💥 Troubleshooting\n\n### axe-core: `aria-valid-attr` error for `aria-role` props\n\n#### Issue\n\nWhen we run a unit test with axe-core on an `<mg-form />` element, we can get the following error: [`aria-valid-attr`](https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md).\n\n#### Workaround\n\nTo pass the test with the `<mg-form />` property `aria-role`, you need to bind this `prop` as a framework JS property, for example:\n- Vue: `<mg-form :aria-role.prop=\"presentation\"></mg-form>`\n- Angular: `<mg-form ng-prop-aria-role=\"presentation\"></mg-form>`\n- JSX: `<mg-form ariaRole={\"presentation\"}></mg-form>`\n\n#### Explanation\n\nWhen you use JS property binding instead of an HTML attribute, the component prop isn't rendered in the DOM, which results in valid HTML DOM semantics and passes the test.\n\n## Example\n\n**Code example does not reflect all the code.**\n\nHere we have a `form-valid` event listener on the `mg-form` to determine if the \"submit\" button should be enabled or not. The \"Display errors\" button uses the `mg-form` `displayError()` method.\n",
      "docs": "Use mg-form to build clean forms.  \nThe component manages:\n\n- the spacing between inputs\n- the required fields message",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Form content"
        },
        {
          "name": "slot",
          "text": "actions - Actions content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "ariaRole",
          "type": "\"form\" | \"none\" | \"presentation\" | \"search\"",
          "complexType": {
            "original": "AriaRoleType",
            "resolved": "\"form\" | \"none\" | \"presentation\" | \"search\"",
            "references": {
              "AriaRoleType": {
                "location": "import",
                "path": "./mg-form.conf",
                "id": "src/components/molecules/mg-form/mg-form.conf.ts::AriaRoleType"
              }
            }
          },
          "mutable": false,
          "attr": "aria-role",
          "reflectToAttr": false,
          "docs": "Define `<form/>` element aria role\nsee more about aria roles use case: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles",
          "docsTags": [],
          "values": [
            {
              "value": "form",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "presentation",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if form is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-form')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define form invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if slotted mg-component's label are displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if form is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "requiredMessage",
          "type": "\"default\" | \"hide\"",
          "complexType": {
            "original": "RequiredMessageStatusType",
            "resolved": "\"default\" | \"hide\"",
            "references": {
              "RequiredMessageStatusType": {
                "location": "import",
                "path": "./mg-form.conf",
                "id": "src/components/molecules/mg-form/mg-form.conf.ts::RequiredMessageStatusType"
              }
            }
          },
          "mutable": false,
          "attr": "required-message",
          "reflectToAttr": false,
          "docs": "Define when required message is display.\nWhen it is unset, component use it internal logic to manage \"required message\" help text display.\nWhen you set the prop to `default`, you override the component internal logique to torce it display \"required message\" help text.\nWhen you set the prop to `hide`, it will prevent the rendering of the message in the component's DOM.\nAs **this element is an accessibility requirement in the view**,\nyou **MUST*** re-implement this message on your own and display it when your form contains required inputs.",
          "docsTags": [],
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "hide",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define form valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "form-submit",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event on form submit",
          "docsTags": []
        },
        {
          "event": "form-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgFormElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgFormElement": {
                "location": "global",
                "id": "global::HTMLMgFormElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event on form validity check\nTells if form is valid or not",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-form-inputs-title-width",
          "annotation": "prop",
          "docs": "Defines the width of the input title. Fallback on `calc(28 * var(--mg-b-size-8))`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Form content"
        },
        {
          "name": "actions",
          "docs": "Actions content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/atoms/mg-icon/mg-icon.tsx",
      "encapsulation": "shadow",
      "tag": "mg-icon",
      "readme": "## File Naming\n\n- **Separator:** Use \"-\" (dash) as the separator.\n- **Default Version:** By default, the pictograms are the \"filled\" version, but this doesn't need to be specified in the naming.\n- **Variant:** Use \"-outline\" for the outline variant.\n- **Background:** If a pictogram has a shaped background like a circle, add \"-circle\" (e.g., `check-circle`, `check-circle-outline`).\n",
      "docs": "- **Separator:** Use \"-\" (dash) as the separator.\n- **Default Version:** By default, the pictograms are the \"filled\" version, but this doesn't need to be specified in the naming.\n- **Variant:** Use \"-outline\" for the outline variant.\n- **Background:** If a pictogram has a shaped background like a circle, add \"-circle\" (e.g., `check-circle`, `check-circle-outline`).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icon",
          "type": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
          "complexType": {
            "original": "IconType",
            "resolved": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
            "references": {
              "IconType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconType"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon to display.",
          "docsTags": [],
          "values": [
            {
              "value": "filter",
              "type": "string"
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "value": "wallet-outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\" | \"xlarge\" | \"xxlarge\"",
          "complexType": {
            "original": "IconSizeType",
            "resolved": "\"large\" | \"medium\" | \"small\" | \"xlarge\" | \"xxlarge\"",
            "references": {
              "IconSizeType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconSizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define icon size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xxlarge",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spin",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spin",
          "reflectToAttr": false,
          "docs": "Make the icon spin",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconVariantType",
            "resolved": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "IconVariantType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define icon variant color",
          "docsTags": [],
          "values": [
            {
              "value": "app",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variantStyle",
          "type": "\"background\" | \"full\" | \"icon\"",
          "complexType": {
            "original": "IconVariantStyleType",
            "resolved": "\"background\" | \"full\" | \"icon\"",
            "references": {
              "IconVariantStyleType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantStyleType"
              }
            }
          },
          "mutable": true,
          "attr": "variant-style",
          "reflectToAttr": false,
          "docs": "Define icon color variant style\nAdd a color to the icon based on variant color with given style\n'full': Used to set a circular background with variant soft color and icon variant color\n'background': Used to set a circular background with variant soft color\n'icon': Used to set a color only to the icon",
          "docsTags": [],
          "values": [
            {
              "value": "background",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-icon-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of icons. Default value is `50%`."
        },
        {
          "name": "--mg-c-icon-size-large",
          "annotation": "prop",
          "docs": "Defines the size of large icons. Default value is `--mg-b-size-20`."
        },
        {
          "name": "--mg-c-icon-size-medium",
          "annotation": "prop",
          "docs": "Defines the size of medium icons. Default value is `--mg-b-size-16`."
        },
        {
          "name": "--mg-c-icon-size-small",
          "annotation": "prop",
          "docs": "Defines the size of small icons. Default value is `--mg-b-size-12`."
        },
        {
          "name": "--mg-c-icon-size-xlarge",
          "annotation": "prop",
          "docs": "Defines the size of extra large icons. Default value is `--mg-b-size-24`."
        },
        {
          "name": "--mg-c-icon-size-xxlarge",
          "annotation": "prop",
          "docs": "Defines the size of double extra large icons. Default value is `--mg-b-size-32`."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-alert",
        "mg-button",
        "mg-details",
        "mg-input",
        "mg-input-checkbox",
        "mg-input-checkbox-paginated",
        "mg-input-password",
        "mg-input-text",
        "mg-item-more",
        "mg-loader",
        "mg-menu-item",
        "mg-message",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover-content",
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-icon"
        ],
        "mg-alert": [
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-details": [
          "mg-icon"
        ],
        "mg-input": [
          "mg-icon"
        ],
        "mg-input-checkbox": [
          "mg-icon"
        ],
        "mg-input-checkbox-paginated": [
          "mg-icon"
        ],
        "mg-input-password": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-icon"
        ],
        "mg-item-more": [
          "mg-icon"
        ],
        "mg-loader": [
          "mg-icon"
        ],
        "mg-menu-item": [
          "mg-icon"
        ],
        "mg-message": [
          "mg-icon"
        ],
        "mg-modal": [
          "mg-icon"
        ],
        "mg-pagination": [
          "mg-icon"
        ],
        "mg-panel": [
          "mg-icon"
        ],
        "mg-popover-content": [
          "mg-icon"
        ],
        "mg-tabs": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-illustrated-message/mg-illustrated-message.tsx",
      "encapsulation": "shadow",
      "tag": "mg-illustrated-message",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "illustration - Illustration content"
        },
        {
          "name": "slot",
          "text": "title - Title content"
        },
        {
          "name": "slot",
          "text": "details - Details content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'vertical' | 'horizontal'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "Define component orientation",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"medium\" | \"small\"",
          "complexType": {
            "original": "IllustratedMessageSizeType",
            "resolved": "\"medium\" | \"small\"",
            "references": {
              "IllustratedMessageSizeType": {
                "location": "import",
                "path": "./mg-illustrated-message.conf",
                "id": "src/components/molecules/mg-illustrated-message/mg-illustrated-message.conf.ts::IllustratedMessageSizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define illustration size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-illustrated-message-spacing-vertical",
          "annotation": "prop",
          "docs": "Defines the vertical padding of the illustrated message. Default value: `--mg-b-size-40`."
        }
      ],
      "slots": [
        {
          "name": "details",
          "docs": "Details content"
        },
        {
          "name": "illustration",
          "docs": "Illustration content"
        },
        {
          "name": "title",
          "docs": "Title content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input/mg-input.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input",
      "readme": "\n## UX\n\n### Label\n\n- The label is located on the left of the input field.\n- The text is to be right aligned.\n- The label can be on one or more lines.\n- The label can be positioned above the input field.\n\n### Input help\n\nThe message displayed indicates the format expected by the input field \"example: email@provider.com\" or \"expected format: DD/MM/YYYY (ex: 13/04/2019)\"\n\n### Message order\n\nWhen the messages are displayed under the field the order is as follows:\n\n1. input help\n2. error\n\n### Placeholder\n\nThe placeholder should not be used as an input help.  \n♿ RGAA: The placeholder is not considered a valid label under the RGAA so is not subject to a contrast ratio.\n\n### Read only\n\n- The value is no longer editable.\n- The input field no longer has a border or background.\n- The value is displayed in bold.\n- If there is no value entered, nothing is displayed.\n\n### Required field\n\nThe asterisk is displayed regardless of the status of the field: input, read-only, disabled.\n\n### Pattern\n\nPlease ensure to consider this when using regular expressions in your components.\n\nSince mid-2023, there have been updates to the regular expressions used in native inputs. Browsers now uses the 'v' flag instead of the 'u' flag.  \nConsequently, all literal characters must be escaped, and there's no longer a need to use the `^` and `$` characters to indicate the start and end of the string.\n\nFor exemple this RegExp working using the 'u' flag `^[\\d ()+]*$` should be converted to the corresponding 'v' flag `[\\d\\s\\(\\)\\+]` on our components. You can get more info on the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern#overview).\n\nIf needed, this library has been identified for converting regular expressions: [regexpu-core](https://www.npmjs.com/package/regexpu-core).\n\n## Specs\n\n### Positioning of \"i\" icon\n\n![](./docs/img/mg-input-tooltip-position.png)\n\nBy default, the \"i\" icon is positioned next to the input field.\n\nYou can position it next to the label by using the `tooltip-placement` prop with the value `label`.\n\nWhen `label-on-top` is enabled, the \"i\" icon moves next to the label, overriding the `tooltip-placement` setting.\n\nWhen the `label-hide` prop is enabled, the \"i\" icon moves next to the input, overriding the `tooltip-placement` setting.\n\n### Value positioning\n\nBy default, the value is left aligned, you can change the CSS variable `--mg-inputs-text-align` to right align.\n\n### Responsive\n\n![](./docs/img/mg-input-responsive.png)\n\nWhen the viewport width is less than 768px, the label is stacked above the input field.\n\nIf you are creating a form that combines mg-components inputs with inputs from one of our legacy libraries (such as form, ui-components, ui-components-vuejs), please refer to [this section on mg-form](.?path=/docs/molecules-mg-form--docs#combining-mg-input--with-legacy-libraries).\n\n### Errors\n\nInput field border and error message text are in [@color-danger](./?path=/docs/style-colors--docs).  \nError message background is a variant of [@color-danger](./?path=/docs/style-colors--docs) : #FEF6F6 or HSL (357,80%,98%).\n\n## Behavior\n\n### Errors\n\nError is triggered and displayed when we leave the input field.\n\nWhen we enter in an input field with an error its state is checked everytime the user update its content, when the error is fixed the message disapears.\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Input content"
        },
        {
          "name": "slot",
          "text": "label - Label content"
        },
        {
          "name": "slot",
          "text": "help-text - Help text content"
        },
        {
          "name": "slot",
          "text": "error - error content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "ariaDescribedbyIDs",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define aria-describedby ids to link with",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Define error message to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Define help text to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Define input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "./mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-input-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the input. Default value is `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-input-border-width",
          "annotation": "prop",
          "docs": "Defines the width of the input border. Default value is `--mg-b-size-border`."
        },
        {
          "name": "--mg-c-input-check-size",
          "annotation": "prop",
          "docs": "Defines the size of the input check. Default value is `--mg-b-size-16`."
        },
        {
          "name": "--mg-c-input-color-border",
          "annotation": "prop",
          "docs": "Defines the color of the input border. Default value is `rgb(181, 194, 201)`."
        },
        {
          "name": "--mg-c-input-color-box-shadow-focus",
          "annotation": "prop",
          "docs": "Defines the shadow color of the input when focused. Default value is `rgba(0, 221, 255, 0.5)`."
        },
        {
          "name": "--mg-c-input-error-color-background",
          "annotation": "prop",
          "docs": "Defines the background color of the input error message. Default value is `color-mix(in srgb, var(--mg-b-color-danger), white 95%)`."
        },
        {
          "name": "--mg-c-input-placeholder-color-text",
          "annotation": "prop",
          "docs": "Defines the color of the placeholder text. Default value is `rgb(181, 194, 201)`."
        },
        {
          "name": "--mg-c-input-toggle-border-radius-ratio",
          "annotation": "prop",
          "docs": "Defines the border radius ratio of the input toggle. Default value is `2`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Input content"
        },
        {
          "name": "error",
          "docs": "error content"
        },
        {
          "name": "help-text",
          "docs": "Help text content"
        },
        {
          "name": "label",
          "docs": "Label content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle"
      ],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title"
      ],
      "dependencyGraph": {
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox": [
          "mg-input"
        ],
        "mg-input-date": [
          "mg-input"
        ],
        "mg-input-numeric": [
          "mg-input"
        ],
        "mg-input-password": [
          "mg-input"
        ],
        "mg-input-radio": [
          "mg-input"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input-text": [
          "mg-input"
        ],
        "mg-input-textarea": [
          "mg-input"
        ],
        "mg-input-toggle": [
          "mg-input"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-checkbox",
      "readme": "## Usage\n\nTrue/False value notion.  \nOnly 2 possible values.\n\n## Warning\n\nPlease be aware that this component has a known issue ([#139](https://gitlab.mgdis.fr/core/core-ui/mg-components/-/issues/139)) **when used with the Vue2 framework**. It is essential that your project loads the [mg-model directive](http://core.pages.mgdis.fr/core-back/core/docs/mg-components-helpers/mg-model-vue) and that the component uses it.\n",
      "docs": "True/False value notion.  \nOnly 2 possible values.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displaySelectedValues",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-selected-values",
          "reflectToAttr": false,
          "docs": "Display selected values list in \"multi\" type\nThis prop is only applied with prop type \"multi\" or when an \"unset\" mode render a \"multi\" type.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Define input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Define input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"checkbox\" | \"multi\"",
          "complexType": {
            "original": "CheckboxType",
            "resolved": "\"checkbox\" | \"multi\"",
            "references": {
              "CheckboxType": {
                "location": "import",
                "path": "./mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxType"
              }
            }
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define checkbox type\nWhen it's undefined the type is dynamic:\n- With 0-5 items type is 'checkbox'\n- With 5-10 items type is 'multi'\nWhen it set the type is locked to the defined value.\nWhen type is dynamic OR with 'multi' type AND Over 10 items \"search\" feature is enabled",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "multi",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "CheckboxValue[]",
          "complexType": {
            "original": "CheckboxValue[]",
            "resolved": "CheckboxValue[]",
            "references": {
              "CheckboxValue": {
                "location": "import",
                "path": "./mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxValue"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Component value\nIf item.value is `null`, checkbox will be indeterminate by default",
          "docsTags": [],
          "values": [
            {
              "type": "CheckboxValue[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputCheckbox['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputCheckbox": {
                "location": "global",
                "id": "global::MgInputCheckbox"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputCheckbox['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "CheckboxValue[]",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['value']",
            "resolved": "CheckboxValue[]",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input-checkbox-paginated",
        "mg-popover",
        "mg-button",
        "mg-icon",
        "mg-input-text",
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-input-checkbox-paginated",
          "mg-popover",
          "mg-button",
          "mg-icon",
          "mg-input-text",
          "mg-input"
        ],
        "mg-input-checkbox-paginated": [
          "mg-button",
          "mg-icon",
          "mg-tooltip",
          "mg-pagination"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-date/mg-input-date.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-date",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example\nAvailable string variables:\n - `{pattern}`: render innerHTML pattern based on system\n - `{date}`: render innerText date with a pattern base format.\n - `{defaultHelpText}`: render default `helpText` usefull to concat helpText local with your custom text.\nex: `Input use {pattern} pattern` as `helpText` prop value will be render as `Input use mm/dd/yyyy pattern`",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Define input maximum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "default": "'9999-12-31'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Define input minimum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputDate['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputDate": {
                "location": "global",
                "id": "global::MgInputDate"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputDate['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputDateElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputDateElement": {
                "location": "global",
                "id": "global::HTMLMgInputDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputDateElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputDateElement": {
                "location": "global",
                "id": "global::HTMLMgInputDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-date": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-numeric",
      "readme": "## Usage\n\nAn amount field is a numeric field.  \nBy default it is limited to 16 characters (including comma).\n\nIt is not possible to enter characters other than numbers, \",\" or \".\".\n\nRounding is to two digits after the decimal point.  \nIt is not possible to enter more than two digits after the decimal point.\n\nIt is possible to specify a unit after the field for integers and decimals. For currencies, the symbol is positioned in the input field.\n\n## Number Format\n\nNumeric values are formatted according to the page's language settings. The component checks for the closest `lang` attribute and applies formatting based on that value. If it cannot find a `lang` attribute, it defaults to `en`.\n\n**Reminder:** For accessibility purposes, the `lang` attribute should be set at least on the `<html>` tag.\n\n## Slot\n\nThe spacing between the field and the slot content is not managed by the component, it must be defined in slot implementation.\n\n### Unit positioning\n\nUnit term must be placed into the field slot using a \"space\" character before the unit term.\n",
      "docs": "An amount field is a numeric field.  \nBy default it is limited to 16 characters (including comma).\n\nIt is not possible to enter characters other than numbers, \",\" or \".\".\n\nRounding is to two digits after the decimal point.  \nIt is not possible to enter more than two digits after the decimal point.\n\nIt is possible to specify a unit after the field for integers and decimals. For currencies, the symbol is positioned in the input field.",
      "docsTags": [
        {
          "name": "slot",
          "text": "append-input - Content to display next to the input"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currency",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "Define currency",
          "docsTags": [],
          "default": "'EUR'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decimalLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "decimal-length",
          "reflectToAttr": false,
          "docs": "Override decimal length\ndecimal is the number after the decimal point",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"currency\" | \"none\" | \"number\"",
          "complexType": {
            "original": "Format",
            "resolved": "\"currency\" | \"none\" | \"number\"",
            "references": {
              "Format": {
                "location": "import",
                "path": "./mg-input-numeric.conf",
                "id": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::Format"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Set local formatting.\nNumbers are formatted based on the locale.",
          "docsTags": [],
          "default": "'number'",
          "values": [
            {
              "value": "currency",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "integerLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "integer-length",
          "reflectToAttr": false,
          "docs": "Override integer length\ninteger is the number before the decimal point",
          "docsTags": [],
          "default": "13",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"decimal\" | \"integer\"",
          "complexType": {
            "original": "NumericType",
            "resolved": "\"decimal\" | \"integer\"",
            "references": {
              "NumericType": {
                "location": "import",
                "path": "./mg-input-numeric.conf",
                "id": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::NumericType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define numeric type",
          "docsTags": [],
          "default": "'decimal'",
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "integer",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputNumeric['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputNumeric": {
                "location": "global",
                "id": "global::MgInputNumeric"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputNumeric['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputNumericElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputNumericElement": {
                "location": "global",
                "id": "global::HTMLMgInputNumericElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "append-input",
          "docs": "Content to display next to the input"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-numeric": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-password/mg-input-password.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-password",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputPassword['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputPassword": {
                "location": "global",
                "id": "global::MgInputPassword"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputPassword['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputPasswordElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputPasswordElement": {
                "location": "global",
                "id": "global::HTMLMgInputPasswordElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputPasswordElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputPasswordElement": {
                "location": "global",
                "id": "global::HTMLMgInputPasswordElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-input-password": [
          "mg-input",
          "mg-button",
          "mg-icon"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-radio",
      "readme": "## Usage\n\n- Always used in a group with a minimum of 2 options.\n- Only one selected option is possible from all the options in the group.\n- The label option is clickable and selects the option.\n- The group can be initialized without any default value.\n",
      "docs": "- Always used in a group with a minimum of 2 options.\n- Only one selected option is possible from all the options in the group.\n- The label option is clickable and selects the option.\n- The group can be initialized without any default value.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "RadioOption[] | string[]",
          "complexType": {
            "original": "string[] | RadioOption[]",
            "resolved": "RadioOption[] | string[]",
            "references": {
              "RadioOption": {
                "location": "import",
                "path": "./mg-input-radio.conf",
                "id": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts::RadioOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "RadioOption[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputRadio['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputRadio": {
                "location": "global",
                "id": "global::MgInputRadio"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputRadio['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputRadioElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputRadioElement": {
                "location": "global",
                "id": "global::HTMLMgInputRadioElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputRadioElement['value']",
            "resolved": "any",
            "references": {
              "HTMLMgInputRadioElement": {
                "location": "global",
                "id": "global::HTMLMgInputRadioElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-radio": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-select/mg-input-select.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-select",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "(string | SelectOption)[]",
          "complexType": {
            "original": "(string | SelectOption)[]",
            "resolved": "(string | SelectOption)[]",
            "references": {
              "SelectOption": {
                "location": "import",
                "path": "./mg-input-select.conf",
                "id": "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts::SelectOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "SelectOption)[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": true,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-disabled",
          "reflectToAttr": false,
          "docs": "Option to disable placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-hide",
          "reflectToAttr": false,
          "docs": "Option to remove placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputSelect['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputSelect": {
                "location": "global",
                "id": "global::MgInputSelect"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputSelect['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "CheckboxValue[]",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['value']",
            "resolved": "CheckboxValue[]",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-pagination"
      ],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-pagination": [
          "mg-input-select"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-text/mg-input-text.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-text",
      "readme": "## Use as `search` input\n\nDue to [accessibility recommendation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/search#search_form_labels_and_accessibility), an `<input type=\"search\" />` must be used within a `<form role=\"search\" />` we recommend using mg-input-text as in dedicated story.\n\nThe \"search\" role can only be used when the input field is the main website search field.\n\n## Display a `datalist`\n\nThe `datalist` behavior is set with `datalistoptions` prop to initalize options list.\n\n## Slot\n\nThe spacing between the field and the slot content is not managed by the component, it must be defined in slot implementation.\n",
      "docs": "Due to [accessibility recommendation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/search#search_form_labels_and_accessibility), an `<input type=\"search\" />` must be used within a `<form role=\"search\" />` we recommend using mg-input-text as in dedicated story.\n\nThe \"search\" role can only be used when the input field is the main website search field.",
      "docsTags": [
        {
          "name": "slot",
          "text": "append-input - Content to display next to the input"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "characterLeftHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-left-hide",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "datalistoptions",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define datalist options",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
          "complexType": {
            "original": "IconType",
            "resolved": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
            "references": {
              "IconType": {
                "location": "import",
                "path": "../../../../components",
                "id": "src/components.d.ts::IconType"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Input icon",
          "docsTags": [],
          "values": [
            {
              "value": "filter",
              "type": "string"
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "value": "wallet-outline",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "400",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate\nPlease refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"search\" | \"text\"",
          "complexType": {
            "original": "TextType",
            "resolved": "\"search\" | \"text\"",
            "references": {
              "TextType": {
                "location": "import",
                "path": "./mg-input-text.conf",
                "id": "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts::TextType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Input type",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputText['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputText": {
                "location": "global",
                "id": "global::MgInputText"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputText['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Public method to play input focus",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputTextElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputTextElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "append-input",
          "docs": "Content to display next to the input"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-panel"
      ],
      "dependencies": [
        "mg-input",
        "mg-icon",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox": [
          "mg-input-text"
        ],
        "mg-panel": [
          "mg-input-text"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-textarea/mg-input-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-textarea",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterLeftHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-left-hide",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate\nPlease refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizable",
          "type": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "'none' | 'both' | 'horizontal' | 'vertical'",
            "resolved": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "resizable",
          "reflectToAttr": false,
          "docs": "Define if input is resizable",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Define the number of visible text lines for the control",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputTextarea['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputTextarea": {
                "location": "global",
                "id": "global::MgInputTextarea"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputTextarea['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextareaElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputTextareaElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextareaElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextareaElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputTextareaElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextareaElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-textarea": [
          "mg-input",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-toggle",
      "readme": "## Usage\n\n- Clicking anywhere on the entire component area toggles the selected value.\n- The first value is always selected by default.\n- When the \"on/off\" property is used, the first value is always the disabled value, and the style is adjusted.\n- The values must be transcribed by text or icons.\n",
      "docs": "- Clicking anywhere on the entire component area toggles the selected value.\n- The first value is always selected by default.\n- When the \"on/off\" property is used, the first value is always the disabled value, and the style is adjusted.\n- The values must be transcribed by text or icons.",
      "docsTags": [
        {
          "name": "slot",
          "text": "item-1 - Left option toggle content"
        },
        {
          "name": "slot",
          "text": "item-2 - Right option toggle content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if toggle display icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOnOff",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-on-off",
          "reflectToAttr": false,
          "docs": "Define if toggle have on/off style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "ToggleValue[] | string[]",
          "complexType": {
            "original": "string[] | ToggleValue[]",
            "resolved": "ToggleValue[] | string[]",
            "references": {
              "ToggleValue": {
                "location": "import",
                "path": "./mg-input-toggle.conf",
                "id": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts::ToggleValue"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "ToggleValue[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: boolean, errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: boolean, errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputToggleElement['value']",
            "resolved": "any",
            "references": {
              "HTMLMgInputToggleElement": {
                "location": "global",
                "id": "global::HTMLMgInputToggleElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "item-1",
          "docs": "Left option toggle content"
        },
        {
          "name": "item-2",
          "docs": "Right option toggle content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-toggle": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-loader/mg-loader.tsx",
      "encapsulation": "shadow",
      "tag": "mg-loader",
      "readme": "\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "message",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Override loader message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "messageHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "message-hide",
          "reflectToAttr": false,
          "docs": "Hide message",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-loader": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/menu/mg-menu/mg-menu.tsx",
      "encapsulation": "shadow",
      "tag": "mg-menu",
      "readme": "## Horizontal\n\n### Usage\n\nHorizontal menu is used with large (\"desktop\") resolutions, it is placed in the upper area of the screen.\n\n### Behavior\n\n#### Sizing\n\nThe content of the element determines its width, but to handle the case where the content is too large (long label), it is possible to specify a maximum width for the element. _Label_ and _Meta_ are then truncated.\n\n#### Sub-content\n\nA \"submenu\" or a \"free content\" can be set to the item.\nAn icon \"chevron-down\" at the right of the item informs the user.\n\n##### Badge\n\nIf at least one sub-item has a badge, the item displays a badge with an exclamation symbol.\n\n#### Overflow\n\nWhen not all items can be displayed due to the width of the menu container, the items are grouped into a \"plus item\".\n\n## Vertical\n\n### Usage\n\nThe vertical menu is used with smaller resolutions, it is mainly placed in the left area of the screen.\n\n### Behavior\n\n#### Sub-content\n\nAn item can display a sub-content which can be another vertical menu.\nThis item displays a chevron to its right.\nThe submenu is displayed by clicking on the item.\n\n##### Badge\n\nIf at least one sub-item has a badge, the item displays a badge with an exclamation symbol.\n\n#### Overflow\n\nWhen not all items can be displayed due to the height of the menu container, a scroll bar helps to see hidden items.\n\n**🔺child mg-menu-item slots image / information**\n\nWith a mg-badge/mg-tag/mg-icon, **you must set the component using HTML attributes** instead, because the behavior uses the [cloneNode](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode) method which breaks properties.\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Menu content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "DirectionType",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {
              "DirectionType": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::DirectionType"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": true,
          "docs": "Component display direction.",
          "docsTags": [],
          "default": "Direction.HORIZONTAL",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemmore",
          "type": "{ size?: \"medium\" | \"large\" | \"xlarge\"; icon?: IconType; slotlabel?: SlotLabelType; }",
          "complexType": {
            "original": "ItemMoreType",
            "resolved": "{ size?: \"medium\" | \"large\" | \"xlarge\"; icon?: IconType; slotlabel?: SlotLabelType; }",
            "references": {
              "ItemMoreType": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::ItemMoreType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Customize \"mg-item-more\" element\nUsed with direction: 'vertical' to manage overflow",
          "docsTags": [],
          "values": [
            {
              "type": "{ size?: \"medium\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "type": "\"xlarge\"; icon?: IconType; slotlabel?: SlotLabelType; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Menu label. Include short menu description.\nRequired to define accessibility required attribute `aria-label`",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"xlarge\"",
          "complexType": {
            "original": "MenuSizeType",
            "resolved": "\"large\" | \"medium\" | \"xlarge\"",
            "references": {
              "MenuSizeType": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::MenuSizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define mg-menu size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-menu-background-color",
          "annotation": "prop",
          "docs": "Defines the background color of the menu. Unset by default, fallback on `--mg-b-color-light`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Menu content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-item-more"
      ],
      "dependencies": [
        "mg-item-more"
      ],
      "dependencyGraph": {
        "mg-menu": [
          "mg-item-more"
        ],
        "mg-item-more": [
          "mg-menu"
        ],
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-menu"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/menu/mg-menu-item/mg-menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "mg-menu-item",
      "readme": "## Usage\n\nItem menu is used with horizontal or vertical menus.\n\n## Child content\n\n### Horizontal and vertical menus\n\nChild content is displayed:\n\n- by clicking on the item\n- by pressing the space or enter key\n\nIt is closed:\n\n- by clicking on the item\n- by pressing the space or enter key\n- by clicking outside of the child content if the menu is horizontal\n\nThe child content can be:\n\n- another horizontal or vertical menu with sub items\n- a slot for HTML content\n\n#### In an horizontal menu\n\nChild content is displayed in a floating component over the content (like a popover).\nIt is aligned to the left bottom of the item, excepted for the last item of the menu which is aligned to the right bottom.\n\nIf the floating component is higher than the screen size, there is no overflow, user has to scroll the page.\n\n#### In a vertical menu\n\nMenu is displayed under the item, with the same width. **(i) Vertical menu is recommended if you display a submenu.**\nIdem for the slot.\nThere is no space to display child content.\nItems below are pushed to bottom.\n\n##### Spacing\n\nSub-items add to their left spacing the spacing between left border and content of their parent's item.\n",
      "docs": "Item menu is used with horizontal or vertical menus.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Menu item content"
        },
        {
          "name": "slot",
          "text": "image - Menu item image content"
        },
        {
          "name": "slot",
          "text": "label - Menu item label content"
        },
        {
          "name": "slot",
          "text": "information - Menu item information content"
        },
        {
          "name": "slot",
          "text": "metadata - Menu item metadata content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Define menu-item content expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Define menu-item href\nwhen defined menu-item contain an anchor instead of button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": true,
          "docs": "Identifier is used to control mg-popover",
          "docsTags": [],
          "default": "createID('mg-menu-item')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"active\" | \"disabled\" | \"hidden\" | \"visible\"",
          "complexType": {
            "original": "MgMenuStatusType",
            "resolved": "\"active\" | \"disabled\" | \"hidden\" | \"visible\"",
            "references": {
              "MgMenuStatusType": {
                "location": "import",
                "path": "./mg-menu-item.conf",
                "id": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::MgMenuStatusType"
              }
            }
          },
          "mutable": true,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Define menu-item status.",
          "docsTags": [],
          "default": "Status.VISIBLE",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "hidden",
              "type": "string"
            },
            {
              "value": "visible",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "complexType": {
            "original": "TargetType",
            "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
            "references": {
              "TargetType": {
                "location": "import",
                "path": "./mg-menu-item.conf",
                "id": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::TargetType"
              }
            }
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Define target type",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "item-loaded",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when item is loaded",
          "docsTags": []
        },
        {
          "event": "item-updated",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when item is updated",
          "docsTags": []
        },
        {
          "event": "status-change",
          "detail": "\"active\" | \"disabled\" | \"hidden\" | \"visible\"",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgMenuItemElement['status']",
            "resolved": "\"active\" | \"disabled\" | \"hidden\" | \"visible\"",
            "references": {
              "HTMLMgMenuItemElement": {
                "location": "global",
                "id": "global::HTMLMgMenuItemElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when status change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-menu-item-color",
          "annotation": "prop",
          "docs": "Defines the color of the menu item. Unset by default, fallback on `var(--mg-b-color-dark)`."
        },
        {
          "name": "--mg-c-menu-item-color-background-focus",
          "annotation": "prop",
          "docs": "Defines the background color of the focused menu item. Default value is `color-mix(in srgb, var(--mg-b-color-dark), white 90%)`."
        },
        {
          "name": "--mg-c-menu-item-color-border-active",
          "annotation": "prop",
          "docs": "Defines the border color of the active menu item. Default value is `var(--mg-b-color-app)`."
        },
        {
          "name": "--mg-c-menu-item-color-text-active",
          "annotation": "prop",
          "docs": "Defines the color of the active menu item. Default value is `--mg-b-color-app`."
        },
        {
          "name": "--mg-c-menu-item-navigation-button-max-width",
          "annotation": "prop",
          "docs": "Defines the max-width property for the navigation button. Unset by default."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Menu item content"
        },
        {
          "name": "image",
          "docs": "Menu item image content"
        },
        {
          "name": "information",
          "docs": "Menu item information content"
        },
        {
          "name": "label",
          "docs": "Menu item label content"
        },
        {
          "name": "metadata",
          "docs": "Menu item metadata content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-item-more"
      ],
      "dependencies": [
        "mg-badge",
        "mg-icon",
        "mg-popover"
      ],
      "dependencyGraph": {
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-menu-item"
        ],
        "mg-item-more": [
          "mg-menu-item"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-message/mg-message.tsx",
      "encapsulation": "shadow",
      "tag": "mg-message",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Message content"
        },
        {
          "name": "slot",
          "text": "actions - Actions content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "undefined | VariantType",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-message.conf",
                "id": "src/components/molecules/mg-message/mg-message.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define variant",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variantStyle",
          "type": "\"background\" | \"bar-left\"",
          "complexType": {
            "original": "undefined | VariantStyleType",
            "resolved": "\"background\" | \"bar-left\"",
            "references": {
              "VariantStyleType": {
                "location": "import",
                "path": "./mg-message.conf",
                "id": "src/components/molecules/mg-message/mg-message.conf.ts::VariantStyleType"
              }
            }
          },
          "mutable": false,
          "attr": "variant-style",
          "reflectToAttr": false,
          "docs": "Define variant style",
          "docsTags": [],
          "default": "'bar-left'",
          "values": [
            {
              "value": "background",
              "type": "string"
            },
            {
              "value": "bar-left",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-message-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the message. Default value: `--mg-b-size-radius`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Message content"
        },
        {
          "name": "actions",
          "docs": "Actions content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-alert"
      ],
      "dependencies": [
        "mg-card",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-message": [
          "mg-card",
          "mg-icon"
        ],
        "mg-alert": [
          "mg-message"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-modal/mg-modal.tsx",
      "encapsulation": "shadow",
      "tag": "mg-modal",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Modal content"
        },
        {
          "name": "slot",
          "text": "actions - Actions content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if modal has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogRole",
          "type": "\"alertdialog\" | \"dialog\"",
          "complexType": {
            "original": "DialogRoleType",
            "resolved": "\"alertdialog\" | \"dialog\"",
            "references": {
              "DialogRoleType": {
                "location": "import",
                "path": "./mg-modal.conf",
                "id": "src/components/molecules/mg-modal/mg-modal.conf.ts::DialogRoleType"
              }
            }
          },
          "mutable": false,
          "attr": "dialog-role",
          "reflectToAttr": false,
          "docs": "Modal dialog role.",
          "docsTags": [],
          "default": "dialogRoles[0]",
          "values": [
            {
              "value": "alertdialog",
              "type": "string"
            },
            {
              "value": "dialog",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-modal')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "modal-title",
          "reflectToAttr": false,
          "docs": "Displayed modal title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Define if modal is open",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-modal-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the modal. Default value: `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-modal-title-font-size",
          "annotation": "prop",
          "docs": "Defines the font size of the modal title. Default value: `--mg-b-font-size-h3`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Modal content"
        },
        {
          "name": "actions",
          "docs": "Actions content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-card",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-modal": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-pagination/mg-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "mg-pagination",
      "readme": "## Usage\n\nA pagination component should be displayed only when it is useful, for example:\n\n- When the number of pages is greater than 1.\n- When there are elements to be displayed.\n",
      "docs": "A pagination component should be displayed only when it is useful, for example:\n\n- When the number of pages is greater than 1.\n- When there are elements to be displayed.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": true,
          "docs": "Component current page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideNavigationLabels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-navigation-labels",
          "reflectToAttr": false,
          "docs": "Hide navigation label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hidePageCount",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-page-count",
          "reflectToAttr": false,
          "docs": "Hide select input",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-pagination')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Panignation label. Is a short description.\nCustomize default value can be usefull to improve accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "Component total pages",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "current-page-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when current page change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox-paginated"
      ],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-select"
      ],
      "dependencyGraph": {
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox-paginated": [
          "mg-pagination"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-panel/mg-panel.tsx",
      "encapsulation": "shadow",
      "tag": "mg-panel",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Panel content"
        },
        {
          "name": "slot",
          "text": "header-right - Header right panel content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "expandToggleDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expand-toggle-disabled",
          "reflectToAttr": false,
          "docs": "Disable possibility to toggle expand",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expandToggleDisplay",
          "type": "\"icon\" | \"text\"",
          "complexType": {
            "original": "ExpandToggleDisplayType",
            "resolved": "\"icon\" | \"text\"",
            "references": {
              "ExpandToggleDisplayType": {
                "location": "import",
                "path": "./mg-panel.conf",
                "id": "src/components/molecules/mg-panel/mg-panel.conf.ts::ExpandToggleDisplayType"
              }
            }
          },
          "mutable": false,
          "attr": "expand-toggle-display",
          "reflectToAttr": false,
          "docs": "Define expand toggle button display",
          "docsTags": [],
          "default": "expandToggleDisplays[0]",
          "values": [
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Panel is opened",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-panel')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "panel-title",
          "reflectToAttr": false,
          "docs": "Panel title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "titleEditable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "title-editable",
          "reflectToAttr": false,
          "docs": "Define if panel title is editable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titlePattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title-pattern",
          "reflectToAttr": false,
          "docs": "Panel title pattern",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "titlePatternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title-pattern-error-message",
          "reflectToAttr": false,
          "docs": "Panel title pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "titlePosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "TitlePositionType",
            "resolved": "\"left\" | \"right\"",
            "references": {
              "TitlePositionType": {
                "location": "import",
                "path": "./mg-panel.conf",
                "id": "src/components/molecules/mg-panel/mg-panel.conf.ts::TitlePositionType"
              }
            }
          },
          "mutable": false,
          "attr": "title-position",
          "reflectToAttr": false,
          "docs": "Define title position",
          "docsTags": [],
          "default": "titlePositions[0]",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "expanded-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPanelElement['expanded']",
            "resolved": "boolean",
            "references": {
              "HTMLMgPanelElement": {
                "location": "global",
                "id": "global::HTMLMgPanelElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when expanded change",
          "docsTags": []
        },
        {
          "event": "title-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPanelElement['panelTitle']",
            "resolved": "string",
            "references": {
              "HTMLMgPanelElement": {
                "location": "global",
                "id": "global::HTMLMgPanelElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when title change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-panel-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the panel. Default value: `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-panel-box-shadow",
          "annotation": "prop",
          "docs": "Defines the box shadow of the panel. Default value: `--mg-b-box-shadow`."
        },
        {
          "name": "--mg-c-panel-color-background",
          "annotation": "prop",
          "docs": "Defines the background of the panel. Default value: `color-mix(in srgb, var(--mg-b-color-info), white 97%)`."
        },
        {
          "name": "--mg-c-panel-content-spacing",
          "annotation": "prop",
          "docs": "Defines the padding of the panel content. Default value: `--mg-b-size-16`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Panel content"
        },
        {
          "name": "header-right",
          "docs": "Header right panel content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-text",
        "mg-card"
      ],
      "dependencyGraph": {
        "mg-panel": [
          "mg-button",
          "mg-icon",
          "mg-input-text",
          "mg-card"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-popover/mg-popover.tsx",
      "encapsulation": "shadow",
      "tag": "mg-popover",
      "readme": "## Usage\n\nA popover is more enhanced than a tooltip but less blocking than a modal.\n",
      "docs": "A popover is more enhanced than a tooltip but less blocking than a modal.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Element that will display the popover"
        },
        {
          "name": "slot",
          "text": "content - popover content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "arrowHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow-hide",
          "reflectToAttr": false,
          "docs": "Hide popover arrow",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if popover has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-popover')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Popover placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "display-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPopoverElement['display']",
            "resolved": "boolean",
            "references": {
              "HTMLMgPopoverElement": {
                "location": "global",
                "id": "global::HTMLMgPopoverElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when display value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-popover-color-background",
          "annotation": "prop",
          "docs": "Defines the background color of the popover. Default value: `--mg-b-color-light`."
        },
        {
          "name": "--mg-c-popover-color-text",
          "annotation": "prop",
          "docs": "Defines the font color of the popover. Default value: `--mg-b-color-font-dark`."
        },
        {
          "name": "--mg-c-popover-max-width",
          "annotation": "prop",
          "docs": "Defines the max-width of the popover. Default value: `--mg-b-size-floating-element-max-width`."
        },
        {
          "name": "--mg-c-popover-min-width",
          "annotation": "prop",
          "docs": "Defines the min-width of the popover. Default value: `unset`."
        },
        {
          "name": "--mg-c-popover-padding-horizontal",
          "annotation": "prop",
          "docs": "Defines the horizontal padding of the popover. Default value: `unset`, fallback to `--mg-b-size-16`."
        },
        {
          "name": "--mg-c-popover-padding-vertical",
          "annotation": "prop",
          "docs": "Defines the vertical padding of the popover. Default value: `unset`, fallback to `--mg-b-size-16`."
        },
        {
          "name": "--mg-c-popover-title-font-size",
          "annotation": "prop",
          "docs": "Defines the font size of the popover title. Default value: `--mg-b-font-size-h5`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Element that will display the popover"
        },
        {
          "name": "content",
          "docs": "popover content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-input-checkbox",
        "mg-menu-item"
      ],
      "dependencies": [
        "mg-popover-content"
      ],
      "dependencyGraph": {
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-popover"
        ],
        "mg-input-checkbox": [
          "mg-popover"
        ],
        "mg-menu-item": [
          "mg-popover"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-skip-links/mg-skip-links.tsx",
      "encapsulation": "shadow",
      "tag": "mg-skip-links",
      "readme": "## Behavior\n\nOn the first tab, a banner with the link(s) is displayed by pushing the content down.\n\n## Code example\n\nYou need to press <kbd>Tab</kbd> in the code example to see the component.\n\n## Integration\n\nThe `mg-skip-links` must be integrated at the very top of your page to be the first focusable element.\n\n## Implementation with a \"#\" based router\n\n`mg-skip-links` uses native anchor behavior, but if your site/app uses a \"#\" link-based router, like AngularJS does, you'll need to use the \"go-to-anchor\" component event. This event returns its detail property to the target anchor, then you can apply the scrollTo anchor behavior:\n\n- if the anchor is in the same window, with native javascript:\n\n```js\nconst goToAnchor = (anchor) => {\n    const top = document.querySelector(anchor).offsetTop;\n    window.scrollTo(0, top);\n\n    // set focus on next element to put keyboard navigation at the right place\n    anchor.focus();\n}\n\n// optionaly you can use a timeout to wait document ready\nsetTimeout(()=> {\n    // you must add listener on skip links element to prevent redirection\n    Array.from(document.querySelector('mg-skip-links').shadowRoot.querySelectorAll('a')).forEach(anchor => {\n        anchor.addEventListener('click', event => {\n            event.preventDefault();\n        })\n    })​\n})\n```\n\n- in case the anchor is in another window, with the [iframeRisizer's moveToAnchor method](https://github.com/davidjbradshaw/iframe-resizer/blob/master/docs/parent_page/methods.md#movetoanchoranchor)\n",
      "docs": "On the first tab, a banner with the link(s) is displayed by pushing the content down.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "links",
          "type": "SkipLink[]",
          "complexType": {
            "original": "SkipLink[]",
            "resolved": "SkipLink[]",
            "references": {
              "SkipLink": {
                "location": "import",
                "path": "./mg-skip-links.conf",
                "id": "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx::SkipLink"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Skip links",
          "docsTags": [],
          "values": [
            {
              "type": "SkipLink[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "go-to-anchor",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when link is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/molecules/mg-tabs/mg-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tabs",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "tab_content-n - Tab content, where `n` represents the position of the tab content. It starts at 1."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "active-tab",
          "reflectToAttr": true,
          "docs": "Active tab number",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-tabs')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "TabItem[] | string[]",
          "complexType": {
            "original": "string[] | TabItem[]",
            "resolved": "TabItem[] | string[]",
            "references": {
              "TabItem": {
                "location": "import",
                "path": "./mg-tabs.conf",
                "id": "src/components/molecules/mg-tabs/mg-tabs.conf.ts::TabItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Tabs items",
          "docsTags": [],
          "values": [
            {
              "type": "TabItem[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Tabs label. Include short tabs description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\"",
          "complexType": {
            "original": "SizeType",
            "resolved": "\"large\" | \"medium\"",
            "references": {
              "SizeType": {
                "location": "import",
                "path": "./mg-tabs.conf",
                "id": "src/components/molecules/mg-tabs/mg-tabs.conf.ts::SizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define tabs size",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "active-tab-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgTabsElement['activeTab']",
            "resolved": "number",
            "references": {
              "HTMLMgTabsElement": {
                "location": "global",
                "id": "global::HTMLMgTabsElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when active tab change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-tabs-border-bottom",
          "annotation": "prop",
          "docs": "Defines the bottom border of tabs. Default value: `--mg-b-border`."
        },
        {
          "name": "--mg-c-tabs-color-background-focus",
          "annotation": "prop",
          "docs": "Defines the background color of focused tabs. Default value: `color-mix(in srgb, var(--mg-b-color-app), transparent 90%)`."
        },
        {
          "name": "--mg-c-tabs-color-border-active",
          "annotation": "prop",
          "docs": "Defines the border color of active tabs. Default value: `--mg-b-color-app`."
        },
        {
          "name": "--mg-c-tabs-color-text-active",
          "annotation": "prop",
          "docs": "Defines the color of active tabs. Default value: `--mg-b-color-app`."
        }
      ],
      "slots": [
        {
          "name": "tab_content-n",
          "docs": "Tab content, where `n` represents the position of the tab content. It starts at 1."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-badge"
      ],
      "dependencyGraph": {
        "mg-tabs": [
          "mg-icon",
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-tag/mg-tag.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tag",
      "readme": "\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Tag content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if tag is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "soft",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "soft",
          "reflectToAttr": false,
          "docs": "Define if tag is using soft style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "TagVariantType",
            "resolved": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "TagVariantType": {
                "location": "import",
                "path": "./mg-tag.conf",
                "id": "src/components/atoms/mg-tag/mg-tag.conf.ts::TagVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define tag variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-tag-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the tag. Default value is `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-tag-font-size",
          "annotation": "prop",
          "docs": "Defines the font size of the tag. Default value is `--mg-b-font-size-small`."
        },
        {
          "name": "--mg-c-tag-height",
          "annotation": "prop",
          "docs": "Defines the height of the tag. Default value is `--mg-b-size-24`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Tag content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/atoms/mg-tooltip/mg-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tooltip",
      "readme": "## Usage\n\nTooltips are messages that provide additional information about an element. They are presented as a message that appears when an element is hovered or focused. Tooltips are called \"custom\" when they are not built on the basis of the standard HTML code provided for these elements by the specification: the title attribute. Our \"custom tooltip\" component is called \"tooltip\" here.\n\n## Behavior\n\nThe tooltip must be displayed when the element that triggers its display:\n\n- Is hovered over by the mouse.\n- Takes keyboard focus.\n\nThe tooltip must be hidden when the element that triggers its display:\n\n- Is no longer hovered over by the mouse.\n- Loses keyboard focus.\n- Pressing the Escape key must hide the tooltip.\n\nThe tooltip must remain displayed when its content is hovered over by the mouse.\n\nThe tooltip can be placed above, to the right, below, or to the left of the element it describes.\n\nBy default, the message is displayed at the bottom of the element.\n\nIf the element is located at the edge of the screen, the tooltip is shifted to always remain visible.\n\n",
      "docs": "Tooltips are messages that provide additional information about an element. They are presented as a message that appears when an element is hovered or focused. Tooltips are called \"custom\" when they are not built on the basis of the standard HTML code provided for these elements by the specification: the title attribute. Our \"custom tooltip\" component is called \"tooltip\" here.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Element that will display the tooltip"
        },
        {
          "name": "slot",
          "text": "content - Tooltip content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-tooltip')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Displayed message in the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Tooltip placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--mg-c-tooltip-border-radius",
          "annotation": "prop",
          "docs": "Defines the border radius of the tooltip. Default value: `--mg-b-size-radius`."
        },
        {
          "name": "--mg-c-tooltip-color-background",
          "annotation": "prop",
          "docs": "Defines the background color of the tooltip. Default value: `--mg-b-color-dark`."
        },
        {
          "name": "--mg-c-tooltip-color-text",
          "annotation": "prop",
          "docs": "Defines the font color of the tooltip. Default value: `--mg-b-color-light`."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Element that will display the tooltip"
        },
        {
          "name": "content",
          "docs": "Tooltip content"
        }
      ],
      "parts": [],
      "dependents": [
        "mg-input",
        "mg-input-checkbox-paginated"
      ],
      "dependencies": [
        "mg-tooltip-content"
      ],
      "dependencyGraph": {
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input": [
          "mg-tooltip"
        ],
        "mg-input-checkbox-paginated": [
          "mg-tooltip"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/atoms/mg-badge/mg-badge.conf.ts::BadgeVariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"primary\" | \"secondary\" | \"text-color\"",
      "docstring": "",
      "path": "src/components/atoms/mg-badge/mg-badge.conf.ts"
    },
    "src/components/atoms/mg-button/mg-button.conf.ts::VariantType": {
      "declaration": "\"flat\" | \"info\" | \"success\" | \"link\" | \"danger\" | \"danger-alt\" | \"primary\" | \"secondary\"",
      "docstring": "",
      "path": "src/components/atoms/mg-button/mg-button.conf.ts"
    },
    "src/components/atoms/mg-button/mg-button.conf.ts::ButtonType": {
      "declaration": "\"button\" | \"submit\" | \"reset\"",
      "docstring": "",
      "path": "src/components/atoms/mg-button/mg-button.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconType": {
      "declaration": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconSizeType": {
      "declaration": "\"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"app\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantStyleType": {
      "declaration": "\"icon\" | \"background\" | \"full\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::DirectionType": {
      "declaration": "export type DirectionType = 'vertical' | 'horizontal';",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::ItemMoreType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::MenuSizeType": {
      "declaration": "\"medium\" | \"large\" | \"xlarge\"",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts::IconType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts"
    },
    "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts::SlotLabelType": {
      "declaration": "{\n  label?: string;\n  display?: boolean;\n}",
      "docstring": "",
      "path": "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts"
    },
    "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts::SizeType": {
      "declaration": "\"medium\" | \"large\" | \"xlarge\"",
      "docstring": "",
      "path": "src/components/molecules/internals/mg-item-more/mg-item-more.conf.ts"
    },
    "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts"
    },
    "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::TargetType": {
      "declaration": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts"
    },
    "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::MgMenuStatusType": {
      "declaration": "\"disabled\" | \"hidden\" | \"visible\" | \"active\"",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts"
    },
    "src/components/atoms/mg-tag/mg-tag.conf.ts::TagVariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"primary\" | \"secondary\"",
      "docstring": "",
      "path": "src/components/atoms/mg-tag/mg-tag.conf.ts"
    },
    "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition": {
      "declaration": "\"input\" | \"label\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input/mg-input.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxValue": {
      "declaration": "export interface CheckboxValue {\n  title: string;\n  value: boolean | null;\n  disabled?: boolean;\n  required?: boolean;\n}",
      "docstring": "interface CheckboxValue\nuse to match returned value",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxType": {
      "declaration": "\"checkbox\" | \"multi\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxItem": {
      "declaration": "export interface CheckboxItem extends CheckboxValue {\n  _id: string;\n  _handleInput: (event: InputEvent & { target: HTMLInputElement }) => void;\n  _handleBlur: () => void;\n  _handleKeydown: (event: KeyboardEvent & { target: HTMLElement }) => void;\n  _handleMouseEnter: () => void;\n  _handleMouseLeave: () => void;\n}",
      "docstring": "interface CheckboxItem\nuse to match checkbox attributes",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::SectionKindType": {
      "declaration": "export type SectionKindType = 'selected' | 'not-selected';",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width": {
      "declaration": "2 | 4 | 16 | \"full\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input/mg-input.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::NumericType": {
      "declaration": "\"decimal\" | \"integer\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::Format": {
      "declaration": "\"number\" | \"none\" | \"currency\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts::RadioOption": {
      "declaration": "{\n  title: string;\n  value: unknown;\n  disabled?: boolean;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts::SelectOption": {
      "declaration": "{\n  title: string;\n  value: unknown;\n  disabled?: boolean;\n  group?: string;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts::TextType": {
      "declaration": "export type TextType = 'text' | 'search';",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts"
    },
    "src/components.d.ts::IconType": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components.d.ts"
    },
    "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts::ToggleValue": {
      "declaration": "{\n  title: string;\n  value: unknown;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreItemType": {
      "declaration": "export type MgActionMoreItemType = Pick<MgMenuItem, 'status' | 'href' | 'target'> & {\n  label: string;\n  mouseEventHandler: IMouseEventHandler;\n  icon?: Pick<MgIcon, 'icon'> & Partial<Pick<MgIcon, 'variant' | 'variantStyle'>>;\n  badge?: Pick<MgBadge, 'value' | 'label'>;\n};",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreDividerType": {
      "declaration": "{ isDivider: boolean }",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreIconType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreButtonType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-alert/mg-alert.conf.ts::VariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/components/molecules/mg-alert/mg-alert.conf.ts"
    },
    "src/components/molecules/mg-alert/mg-alert.conf.ts::VariantStyleType": {
      "declaration": "\"background\" | \"bar-left\"",
      "docstring": "",
      "path": "src/components/molecules/mg-alert/mg-alert.conf.ts"
    },
    "src/components/molecules/mg-form/mg-form.conf.ts::RequiredMessageStatusType": {
      "declaration": "\"default\" | \"hide\"",
      "docstring": "",
      "path": "src/components/molecules/mg-form/mg-form.conf.ts"
    },
    "src/components/molecules/mg-form/mg-form.conf.ts::AriaRoleType": {
      "declaration": "\"none\" | \"form\" | \"search\" | \"presentation\"",
      "docstring": "",
      "path": "src/components/molecules/mg-form/mg-form.conf.ts"
    },
    "src/components/molecules/mg-illustrated-message/mg-illustrated-message.conf.ts::IllustratedMessageSizeType": {
      "declaration": "\"small\" | \"medium\"",
      "docstring": "",
      "path": "src/components/molecules/mg-illustrated-message/mg-illustrated-message.conf.ts"
    },
    "src/components/molecules/mg-message/mg-message.conf.ts::VariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/components/molecules/mg-message/mg-message.conf.ts"
    },
    "src/components/molecules/mg-message/mg-message.conf.ts::VariantStyleType": {
      "declaration": "\"background\" | \"bar-left\"",
      "docstring": "",
      "path": "src/components/molecules/mg-message/mg-message.conf.ts"
    },
    "src/components/molecules/mg-modal/mg-modal.conf.ts::DialogRoleType": {
      "declaration": "\"dialog\" | \"alertdialog\"",
      "docstring": "",
      "path": "src/components/molecules/mg-modal/mg-modal.conf.ts"
    },
    "src/components/molecules/mg-panel/mg-panel.conf.ts::TitlePositionType": {
      "declaration": "\"right\" | \"left\"",
      "docstring": "",
      "path": "src/components/molecules/mg-panel/mg-panel.conf.ts"
    },
    "src/components/molecules/mg-panel/mg-panel.conf.ts::ExpandToggleDisplayType": {
      "declaration": "\"text\" | \"icon\"",
      "docstring": "",
      "path": "src/components/molecules/mg-panel/mg-panel.conf.ts"
    },
    "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx::SkipLink": {
      "declaration": "{\n  href: string;\n  label: string;\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx"
    },
    "src/components/molecules/mg-tabs/mg-tabs.conf.ts::SizeType": {
      "declaration": "\"medium\" | \"large\"",
      "docstring": "",
      "path": "src/components/molecules/mg-tabs/mg-tabs.conf.ts"
    },
    "src/components/molecules/mg-tabs/mg-tabs.conf.ts::TabItem": {
      "declaration": "{\n  label: string;\n  icon?: MgIcon['icon'];\n  badge?: Pick<MgBadge, 'value' | 'variant' | 'label'> & { role: 'notification' | 'information' };\n  status: StatusType;\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-tabs/mg-tabs.conf.ts"
    }
  }
}