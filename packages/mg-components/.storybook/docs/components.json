{
  "timestamp": "2024-04-03T09:08:05",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.14.0",
    "typescriptVersion": "5.4.3"
  },
  "components": [
    {
      "filePath": "src/components/molecules/mg-action-more/mg-action-more.tsx",
      "encapsulation": "shadow",
      "tag": "mg-action-more",
      "readme": "## Anatomy\n\n![](./doc/img/mg-action-more-anatomy.png)\n\n## Specifications\n\n![](./doc/img/mg-action-more-popover-spacing.png)\n\n### Spacing\n\nPopover padding should be 10px up/down, 0px left/right.\n\n## Behavior\n\n### Action\n\nIn addition of the standard popover's behavior, when an item of the menu is clicked the popover closes itself.\n\n## Items\n\n### Button's variant\n\n![](./doc/img/mg-action-more-options-variant.png)\n\nIt is possible to set another variant (see [mg-button](http://core.pages.mgdis.fr/core-ui/core-ui/storybook/?path=/docs/atoms-mg-button--docs)).\n\n### Icon\n\n![](./doc/img/mg-action-more-options-icon.png)\n\nIt is possible to set another icon\n\n### Label\n\n![](./doc/img/mg-action-more-options-label.png)\n\nIt is possible to set another label.\n\n### Chevron\n\n![](./doc/img/mg-action-more-options-chevron.png)\n\nIt is possible to display a chevron on the label right side, it make a 180 degree rotation on click.\n",
      "docs": "![](./doc/img/mg-action-more-anatomy.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "button",
          "type": "{ label?: string; disabled?: boolean; variant: \"flat\" | \"info\" | \"success\" | \"link\" | \"primary\" | \"secondary\" | \"danger\" | \"danger-alt\"; isIcon: boolean; }",
          "complexType": {
            "original": "MgActionMoreButtonType",
            "resolved": "{ label?: string; disabled?: boolean; variant: \"flat\" | \"info\" | \"success\" | \"link\" | \"primary\" | \"secondary\" | \"danger\" | \"danger-alt\"; isIcon: boolean; }",
            "references": {
              "MgActionMoreButtonType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreButtonType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define button properties",
          "docsTags": [],
          "default": "{ variant: 'flat', isIcon: true }",
          "values": [
            {
              "type": "{ label?: string; disabled?: boolean; variant: \"flat\""
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "type": "\"danger-alt\"; isIcon: boolean; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "displayChevron",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-chevron",
          "reflectToAttr": false,
          "docs": "Define if chevron is display",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
          "complexType": {
            "original": "MgActionMoreIconType",
            "resolved": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
            "references": {
              "MgActionMoreIconType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreIconType"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Define displayed icon",
          "docsTags": [],
          "values": [
            {
              "type": "{ icon: \"filter\""
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "type": "\"wallet-outline\"; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "items",
          "type": "MgActionMoreItemType[]",
          "complexType": {
            "original": "MgActionMoreItemType[]",
            "resolved": "MgActionMoreItemType[]",
            "references": {
              "MgActionMoreItemType": {
                "location": "import",
                "path": "./mg-action-more.conf",
                "id": "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreItemType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define the menu-items elements",
          "docsTags": [],
          "values": [
            {
              "type": "MgActionMoreItemType[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-popover",
        "mg-button",
        "mg-menu",
        "mg-menu-item",
        "mg-badge"
      ],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-icon",
          "mg-popover",
          "mg-button",
          "mg-menu",
          "mg-menu-item",
          "mg-badge"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-menu": [
          "mg-item-more"
        ],
        "mg-item-more": [
          "mg-menu-item",
          "mg-icon",
          "mg-menu"
        ],
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-badge/mg-badge.tsx",
      "encapsulation": "shadow",
      "tag": "mg-badge",
      "readme": "## Design\n\nThe badge is always placed on top of, or next to the element it is for.\n\nThe badge displays a number (can be followed by the `+` character) or a punctuation character.\n\n## Specs\n\n![](./doc/img/mg-badge-specs.png)\n\n## Theming\n\n![](./doc/img/mg-badge-styles.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-badge-size`: define badge height and min-width, default: `1.6rem`\n- `--mg-c-badge-font-size`: define badge font size, default: `1.1rem`\n- `--mg-c-badge-text-color`: define badge color for text-color variant, default: `--mg-b-color-light`\n",
      "docs": "The badge is always placed on top of, or next to the element it is for.\n\nThe badge displays a number (can be followed by the `+` character) or a punctuation character.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Badge label. Include short description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if button is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Badge value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"text-color\" | \"warning\"",
          "complexType": {
            "original": "BadgeVariantType",
            "resolved": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"text-color\" | \"warning\"",
            "references": {
              "BadgeVariantType": {
                "location": "import",
                "path": "./mg-badge.conf",
                "id": "src/components/atoms/mg-badge/mg-badge.conf.ts::BadgeVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define badge variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text-color",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-menu-item",
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-badge"
        ],
        "mg-menu-item": [
          "mg-badge"
        ],
        "mg-tabs": [
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-button/mg-button.tsx",
      "encapsulation": "shadow",
      "tag": "mg-button",
      "readme": "## Usage\n\nA primary action button is, in most cases, unique on the screen, the other buttons must be displayed as \"secondary\", to highlight the primary action.\nEx: Validation, Save\n\nA tooltip must be displayed on hover when the button only displays a non-explicit icon, and has no label. The tooltip must indicate the action of the button.\n\nA button that launches a potentially long process is disabled and displays a loader for the duration of the process needs to use the `disable-on-click` attribute to ensure that the button is disabled when clicked.\n\nA button with undefined type in a form will natively have a [submit type](https://developer.mozilla.org/fr/docs/Web/HTML/Element/Button#attributs) and trigger form submission. So on non-submission buttons you need to explicitely set the type attribute as \"button\".\n\n## Specs\n\n![](./doc/img/mg-button-specs.png)\n\n## Placement\n\n![](./doc/img/mg-button-placement.png)\n\n## Theming\n\n![](./doc/img/mg-button-styles.png)\n\nFocused `mg-button` style is the one from the browser (outline).\n\n## Attributes combination: `disable-on-click` and `disabled`\n\nWhen a click is triggered, the component sets the `disabled` prop to true.\n\nTo benefit from a reactive `disabled` prop, you need to handle the `disabled-change` event.\n\nTo reset the loader after the process has completed, you need to set the `disabled` prop asynchronously.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n### Global\n\n- `--mg-c-button-border-radius`: define button border radius, default: `0.3rem`\n- `--mg-c-button-icon-border-radius`: define button border radius in icon mode, default: `--mg-b-default-size`\n- `--mg-c-button-disabled-opacity`: define button opacity when disabled, default: `--mg-b-disabled-opacity`\n- `--mg-c-button-gradient`: define if button use gradient, possible values 0 (no gradient) or 1 (with gradient), default: `1`\n- `--mg-c-button-border-variation`: define if button has a border based on background color, possible values 0 (no border) or 1 (with border), default: `1`\n\n### Variant\n\nVariants `danger`, `danger-alt`, `info` and `success` can be customized by changing the global [colors](./?path=/docs/style-colors--docs).\n\n#### Primary\n\n- `--mg-c-button-primary-color-h`: define hue color value for primary button, default: `--mg-b-color-dark-h`\n- `--mg-c-button-primary-color-s`: define saturation color value for primary button, default: `--mg-b-color-dark-s`\n- `--mg-c-button-primary-color-l`: define lightness color value for primary button, default: `--mg-b-color-dark-l`\n- `--mg-c-button-primary-font-color`: define font color for primary button, default: `--mg-b-color-neutral`\n\n#### Secondary\n\n- `--mg-c-button-secondary-color-h`: define hue color value for secondary button, default: `--mg-b-color-neutral-h`\n- `--mg-c-button-secondary-color-s`: define saturation color value for secondary button, default: `--mg-b-color-neutral-s`\n- `--mg-c-button-secondary-color-l`: define lightness color value for secondary button, default: `--mg-b-color-neutral-l`\n- `--mg-c-button-secondary-font-color`: define font color for secondary button, default: `--mg-b-color-dark`\n",
      "docs": "A primary action button is, in most cases, unique on the screen, the other buttons must be displayed as \"secondary\", to highlight the primary action.\nEx: Validation, Save\n\nA tooltip must be displayed on hover when the button only displays a non-explicit icon, and has no label. The tooltip must indicate the action of the button.\n\nA button that launches a potentially long process is disabled and displays a loader for the duration of the process needs to use the `disable-on-click` attribute to ensure that the button is disabled when clicked.\n\nA button with undefined type in a form will natively have a [submit type](https://developer.mozilla.org/fr/docs/Web/HTML/Element/Button#attributs) and trigger form submission. So on non-submission buttons you need to explicitely set the type attribute as \"button\".",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disableOnClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-on-click",
          "reflectToAttr": false,
          "docs": "Option to set input disable on click, in order to prevent multi-click.\nParent component have to remove the attribute 'disabled' when the process ends.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable button",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Define form id to attach button with.\nIf this attribute is not set, the <button> is associated with its ancestor <form> element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "Set button to full-width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if button is round.\nUsed for icon button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "aria-label\nIn case button text is not explicit enough",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "ButtonType",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {
              "ButtonType": {
                "location": "import",
                "path": "./mg-button.conf",
                "id": "src/components/atoms/mg-button/mg-button.conf.ts::ButtonType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define button type",
          "docsTags": [],
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"danger-alt\" | \"flat\" | \"info\" | \"link\" | \"primary\" | \"secondary\" | \"success\"",
          "complexType": {
            "original": "VariantType",
            "resolved": "\"danger\" | \"danger-alt\" | \"flat\" | \"info\" | \"link\" | \"primary\" | \"secondary\" | \"success\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-button.conf",
                "id": "src/components/atoms/mg-button/mg-button.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define button variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "danger-alt",
              "type": "string"
            },
            {
              "value": "flat",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "disabled-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgButtonElement['disabled']",
            "resolved": "boolean",
            "references": {
              "HTMLMgButtonElement": {
                "location": "global",
                "id": "global::HTMLMgButtonElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when disabled change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-input-checkbox",
        "mg-input-checkbox-paginated",
        "mg-input-password",
        "mg-message",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover-content"
      ],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-button"
        ],
        "mg-input-checkbox": [
          "mg-button"
        ],
        "mg-input-checkbox-paginated": [
          "mg-button"
        ],
        "mg-input-password": [
          "mg-button"
        ],
        "mg-message": [
          "mg-button"
        ],
        "mg-modal": [
          "mg-button"
        ],
        "mg-pagination": [
          "mg-button"
        ],
        "mg-panel": [
          "mg-button"
        ],
        "mg-popover-content": [
          "mg-button"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-card/mg-card.tsx",
      "encapsulation": "shadow",
      "tag": "mg-card",
      "readme": "## Specifications\n\n### Style\n\n![](./doc/img/mg-card-style.png)\n\n1. Border radius: 5px\n2. Background: [@color-light](./?path=/docs/style-colors--docs)\n3. Border: 1px, [@color-dark](./?path=/docs/style-colors--docs) with alpha at 5%\n4. Shadow: [@shadow](./?path=/docs/style-colors--docs)\n\n### Variant on bar / on background\n\nYou can set variant color on left bar or on background of the card\n\nValues for variant colors are:\n\n- info\n- success\n- warning\n- danger\n- app\n\n![](./doc/img/mg-card-variant.png)\n\n_exemple of \"app color\" for the last one_\n\nVariant applied on the left bar uses **[full colors](./?path=/docs/style-colors--docs)**\n\nVariant applied on the background uses **[soft colors](./?path=/docs/style-colors--docs)**\n\n### Spacing\n\n![](./doc/img/mg-card-spacing.png)\n\nA padding of 16px is applied around the content\n\n### Size\n\n![](./doc/img/mg-card-size.png)\n\n1. Ajusting with the content\n2. Ajusting with its parent (100%)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-card-padding`: define car padding, default: `1.6rem`\n- `--mg-c-card-border-radius`: define card border radius, default: `0.5rem`\n- `--mg-c-card-background`: define card background, default: `--mg-b-color-light`\n- `--mg-c-card-border`: define card border, default: `0.1rem solid hsl(var(--mg-b-color-dark-h) var(--mg-b-color-dark-s) var(--mg-b-color-dark-l) / 5%)`\n- `--mg-c-card-box-shadow`: define card shadow, default: `--mg-b-box-shadow`\n- `--mg-c-card-box-overflow`: define card overflow, default: `unset`\n- `--mg-c-card-max-width`: define card max-width, default: `unset`\n- `--mg-c-card-min-width`: define card min-width, default: `unset`\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "variant",
          "type": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "undefined | VariantType",
            "resolved": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-card.conf",
                "id": "src/components/atoms/mg-card/mg-card.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define variant prop",
          "docsTags": [],
          "values": [
            {
              "value": "app",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variantStyle",
          "type": "\"bar-left\" | \"fill\"",
          "complexType": {
            "original": "undefined | VariantStyleType",
            "resolved": "\"bar-left\" | \"fill\"",
            "references": {
              "VariantStyleType": {
                "location": "import",
                "path": "./mg-card.conf",
                "id": "src/components/atoms/mg-card/mg-card.conf.ts::VariantStyleType"
              }
            }
          },
          "mutable": true,
          "attr": "variant-style",
          "reflectToAttr": false,
          "docs": "Define variantStyle prop",
          "docsTags": [],
          "values": [
            {
              "value": "bar-left",
              "type": "string"
            },
            {
              "value": "fill",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-message",
        "mg-modal",
        "mg-panel",
        "mg-popover-content"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-message": [
          "mg-card"
        ],
        "mg-modal": [
          "mg-card"
        ],
        "mg-panel": [
          "mg-card"
        ],
        "mg-popover-content": [
          "mg-card"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/internals/mg-character-left/mg-character-left.tsx",
      "encapsulation": "scoped",
      "tag": "mg-character-left",
      "readme": "## Design\n\nThis component display the number of characters left beside the max value length: `{{number of characters left}}/{{max value length}}`\n",
      "docs": "This component display the number of characters left beside the max value length: `{{number of characters left}}/{{max value length}}`",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characters",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "characters",
          "reflectToAttr": false,
          "docs": "Sets the characters to count",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Add maximum length",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-text",
        "mg-input-textarea"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-input-text": [
          "mg-character-left"
        ],
        "mg-input-textarea": [
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-details/mg-details.tsx",
      "encapsulation": "shadow",
      "tag": "mg-details",
      "readme": "## Properties\n\n![](./doc/img/mg-details-components.png)\n\n- **summary** and **details** are slots which allow html content\n- **toggle** is defined by mg-icon plus a custom text\n  - mg-icon _chevron-down_ is used for the close state\n  - mg-icon _chevron-up_ is used for the open state\n\n## Behavior\n\n### Action\n\nThe complete zone including the _summary_ and the _toggle_ is clickable and toggles the state of the component.\n\n![](./doc/img/mg-details-behavior.png)\n\n### Position\n\n_Toggle_ follows the _summary_ and is always on the top right.\n\n![](./doc/img/mg-details-position.png)\n\n### Responsive\n\nIn mobile resolution, the text of the _toggle_ is hidden\n\n![](./doc/img/mg-details-responsive.png)\n\n## Specs\n\n### Spacing\n\n![](./doc/img/mg-details-spacing.png)\n\n### Icons\n\nToggle's icon is chevron-down when closed.\nToggle's icon is chevron-up when opened.\n\nThe icon is displayed in \"small\" size.\n\n### Style\n\nToggle's text is in 'Open Sans', 13px, Regular, [@color-dark](./?path=/docs/style-colors--docs).\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-details-spacing`: define space between summary and details, default: `1.5rem`\n",
      "docs": "![](./doc/img/mg-details-components.png)\n\n- **summary** and **details** are slots which allow html content\n- **toggle** is defined by mg-icon plus a custom text\n  - mg-icon _chevron-down_ is used for the close state\n  - mg-icon _chevron-up_ is used for the open state",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Define if details are diplayed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSummary",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-summary",
          "reflectToAttr": false,
          "docs": "Hide summary element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleClosed",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-closed",
          "reflectToAttr": false,
          "docs": "Displayed title when details are closed",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "toggleOpened",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-opened",
          "reflectToAttr": false,
          "docs": "Displayed title when details are opened",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "expanded-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgDetailsElement['expanded']",
            "resolved": "boolean",
            "references": {
              "HTMLMgDetailsElement": {
                "location": "global",
                "id": "global::HTMLMgDetailsElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when expanded change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-details": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-divider/mg-divider.tsx",
      "encapsulation": "shadow",
      "tag": "mg-divider",
      "readme": "## Sizing\n\n![](./doc/img/mg-divider-sizing.png)\n\nTwo sizes are possible:\n\n- Regular: 120px\n- Full: 100%\n\nRules:\n\n- Regular is the default mode.\n- In full mode it takes 100% of its parent.\n- The thickness is 1px.\n\n## Spacing\n\n![](./doc/img/mg-divider-spacing.png)\n\nDefault margin applied on top and bottom of the divider is set to 40px.\n\n## Color\n\n![](./doc/img/mg-divider-color.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-divider-background-color`: define the divider background color, default: `hsla(var(--mg-b-color-danger), 15%)`\n- `--mg-c-divider-thickness`: define the divider thickness, default: `0.1rem`\n- `--mg-c-divider-vertical-spacing`: define the divider vertical spacing, default: `4rem`\n",
      "docs": "![](./doc/img/mg-divider-sizing.png)\n\nTwo sizes are possible:\n\n- Regular: 120px\n- Full: 100%\n\nRules:\n\n- Regular is the default mode.\n- In full mode it takes 100% of its parent.\n- The thickness is 1px.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"full\" | \"regular\"",
          "complexType": {
            "original": "'regular' | 'full'",
            "resolved": "\"full\" | \"regular\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define component size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/molecules/mg-form/mg-form.tsx",
      "encapsulation": "shadow",
      "tag": "mg-form",
      "readme": "## Use\n\nUse mg-form to build clean forms.  \nThe component manages:\n\n- the spacing between inputs\n- the required fileds message\n\n## Anatomy\n\n![](./doc/img/mg-form-anatomy.png)\n\n1. Required field(s) message\n2. Inputs zone\n3. Actions zone\n\n## Style\n\n### Required field(s) message\n\n![](./doc/img/mg-form-style-required-message.png)\n\nText is in 'Open Sans', Regular, 12px, [@color-dark](./?path=/docs/style-colors--docs)  \nThe \"\\*\" is in [@color-danger](./?path=/docs/style-colors--docs)\n\n## Spacing\n\n### Inputs\n\nThe `mg-form` component applies a 15px margin to the bottom of the slotted `mg-input-*` elements.\nThe space between the label and the input area is increased to 30px.\n\n![](./doc/img/mg-form-spacing-inputs.png)\n\n#### Label on top\n\nWhen the `label-on-top` prop is used, the vertical spacing is increased to 25px.\n\n![](./doc/img/mg-form-spacing-inputs-label-on-top.png)\n\n## Behavior\n\n### Required field(s) message\n\nThis message is automatically generated by the component.\n\n- If there is only 1 input required (among other inputs)\n\n  > Field with a \\* is required\n\n- If there are many required inputs (among other inputs)\n\n  > Fields with a \\* are required\n\n- If there is only 1 input and it is required\n\n  > The field is required\n\n  In this case, the \\* is hidden on inputs labels.\n\n- If all inputs are required\n\n  > All fields are required\n\n  In this case, the \\* is hidden on inputs labels.\n\n## Combining `mg-input-*` with legacy libraries\n\nIf you are creating a form that combines `mg-components` inputs with inputs from one of our legacy libraries (e.g., form, ui-components, ui-components-vuejs), you can achieve consistent styling by applying the `mg-u-form-legacy` class to the `mg-form` element. This ensures that `mg-input-*` components behave in accordance with Bootstrap styling conventions.\n\n```html\n<mg-form class=\"form-horizontal mg-u-form-legacy\">\n  <text-field\n    label=\"Text field label\"\n    reference=\"reference\"\n    help=\"Text field tooltip\"\n  ></text-field>\n  <mg-input-text\n    label=\"Mg input text label\"\n    identifier=\"identifier\"\n    tooltip=\"Mg input text tooltip\"\n  ></mg-input-text>\n</mg-form>\n```\n\n## 👍 Good practices\n\n### Enabling _submit_ button\n\nYou can disable _submit button_ until all required fields are empty.\nFor this, use \"valid/invalid\" options.\n\n## 💥 Troubleshooting\n\n### axe-core: `aria-valid-attr` error for `aria-role` props\n\n#### Issue\n\nWhen we run a unit test with axe-core on an `<mg-form />` element we can get the following error:  [`aria-valid-attr`](https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md).\n\n#### Workaround\n\nTo succeed the test with the `<mg-form />` property `aria-role`, you need to bind this `prop` as a framework JS property, ex:\n- vue: `<mg-form :aria-role.prop=\"presentation\"></mg-form>`\n- angular: `<mg-form ng-prop-aria-role=\"presentation\"></mg-form>`\n- jsx: `<mg-form ariaRole={\"presentation\"}></mg-form>`\n\n#### Explanation\n\nWhen you use JS property binding instead of HTML attribute, the component prop isn't rendered in the DOM, which results in a valid HTML DOM semantic, and succeed the test.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-form-inputs-title-width`: Define slotted input label width, default: `23rem`\n\n## Example\n\n**Code example does not reflect all the code.**\n\nHere we have a `form-valid` event listener on the `mg-form` to define if the \"submit\" button should be enable or not.  \nThe \"Display errors\" button use the `mg-form` `displayError()` method.\n",
      "docs": "Use mg-form to build clean forms.  \nThe component manages:\n\n- the spacing between inputs\n- the required fileds message",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaRole",
          "type": "\"form\" | \"none\" | \"presentation\" | \"search\"",
          "complexType": {
            "original": "AriaRoleType",
            "resolved": "\"form\" | \"none\" | \"presentation\" | \"search\"",
            "references": {
              "AriaRoleType": {
                "location": "import",
                "path": "./mg-form.conf",
                "id": "src/components/molecules/mg-form/mg-form.conf.ts::AriaRoleType"
              }
            }
          },
          "mutable": false,
          "attr": "aria-role",
          "reflectToAttr": false,
          "docs": "Define `<form/>` element aria role\nsee more about aria roles use case: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles",
          "docsTags": [],
          "values": [
            {
              "value": "form",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "presentation",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if form is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-form')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define form invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if slotted mg-component's label are displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if form is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "requiredMessage",
          "type": "\"default\" | \"hide\"",
          "complexType": {
            "original": "RequiredMessageStatusType",
            "resolved": "\"default\" | \"hide\"",
            "references": {
              "RequiredMessageStatusType": {
                "location": "import",
                "path": "./mg-form.conf",
                "id": "src/components/molecules/mg-form/mg-form.conf.ts::RequiredMessageStatusType"
              }
            }
          },
          "mutable": false,
          "attr": "required-message",
          "reflectToAttr": false,
          "docs": "Define when required message is display.\nWhen it is unset, component use it internal logic to manage \"required message\" help text display.\nWhen you set the prop to `default`, you override the component internal logique to torce it display \"required message\" help text.\nWhen you set the prop to `hide`, it will prevent the rendering of the message in the component's DOM.\nAs **this element is an accessibility requirement in the view**,\nyou **MUST*** re-implement this message on your own and display it when your form contains required inputs.",
          "docsTags": [],
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "hide",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define form valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "form-submit",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event on form submit",
          "docsTags": []
        },
        {
          "event": "form-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgFormElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgFormElement": {
                "location": "global",
                "id": "global::HTMLMgFormElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event on form validity check\nTells if form is valid or not",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/atoms/mg-icon/mg-icon.tsx",
      "encapsulation": "shadow",
      "tag": "mg-icon",
      "readme": "## Specifications\n\n### Sizing\n\n![](./doc/img/mg-icon-sizing.png) \n\nSizes (px):\n\n- small: 12x12\n- regular: 16x16\n- medium: 20x20\n- large: 24x24\n- extra-large: 32x32\n\n### With \"variant\" applied\n\n![](./doc/img/mg-icon-sizing-variant.png)\n\nWhen *variant* is set a circle is put back to the icon with a width and height equal to the size of the icon multiplied by 2.\nThe icon is centered in it.\n\n## Styling\n\n### Default\n\n![](./doc/img/mg-icon-styling-default.png)\n\nDefault color for the icon is the color used for the text.\nColor: text of the page (usually [@color-dark](./?path=/docs/style-colors--docs))\n\n### Variant style\n\n\n### Variant\n![](./doc/img/mg-icon-styling-iconVariant.png) \n\n\n![](./doc/img/mg-icon-styling-variant.png) \n\n\"variant\" property applies [semantic color](http://core.pages.mgdis.fr/core-ui/core-ui/storybook/?path=/docs/style-colors--docs) or \"app color\" to the background of the icon with Lightness set to 90% \nYou can select \"variant style\" to apply \"variant\" on the icon or the background or both.\n\n# File naming\n\nSeparator: \"-\" (dash).\nBy default, the pictograms are the \"filled\" version, but this doesn't need to be specified in the naming\nVariant: \"-outline\". If pictogram variant has a background that has a full circle > add \"-circle\" *ex: check-circle, check-circle-outline*\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-icon-small-size`: Define small icon size, default: `1.2rem`\n- `--mg-c-icon-regular-size`: Define regular icon size, default: `1.6rem`\n- `--mg-c-icon-medium-size`: Define medium icon size, default: `2rem`\n- `--mg-c-icon-large-size`: Define large icon size, default: `2.4rem`\n- `--mg-c-icon-extra-large-size`: Define extra large icon size, default: `3.6rem`\n- `--mg-c-icon-border-radius`: Define icon border radiys, default: `50%`\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icon",
          "type": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
          "complexType": {
            "original": "IconType",
            "resolved": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
            "references": {
              "IconType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconType"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon to display.",
          "docsTags": [],
          "values": [
            {
              "value": "filter",
              "type": "string"
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "value": "wallet-outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"extra-large\" | \"large\" | \"medium\" | \"regular\" | \"small\"",
          "complexType": {
            "original": "IconSizeType",
            "resolved": "\"extra-large\" | \"large\" | \"medium\" | \"regular\" | \"small\"",
            "references": {
              "IconSizeType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconSizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define icon size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "extra-large",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spin",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spin",
          "reflectToAttr": false,
          "docs": "Make the icon spin",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconVariantType",
            "resolved": "\"app\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "IconVariantType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define icon variant color",
          "docsTags": [],
          "values": [
            {
              "value": "app",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variantStyle",
          "type": "\"background\" | \"full\" | \"icon\"",
          "complexType": {
            "original": "IconVariantStyleType",
            "resolved": "\"background\" | \"full\" | \"icon\"",
            "references": {
              "IconVariantStyleType": {
                "location": "import",
                "path": "./mg-icon.conf",
                "id": "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantStyleType"
              }
            }
          },
          "mutable": true,
          "attr": "variant-style",
          "reflectToAttr": false,
          "docs": "Define icon color variant style\nAdd a color to the icon based on variant color with given style\n'full': Used to set a circular background with variant soft color and icon variant color\n'background': Used to set a circular background with variant soft color\n'icon': Used to set a color only to the icon",
          "docsTags": [],
          "values": [
            {
              "value": "background",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-button",
        "mg-details",
        "mg-input",
        "mg-input-checkbox",
        "mg-input-checkbox-paginated",
        "mg-input-password",
        "mg-input-text",
        "mg-item-more",
        "mg-loader",
        "mg-menu-item",
        "mg-message",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover-content",
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-action-more": [
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-details": [
          "mg-icon"
        ],
        "mg-input": [
          "mg-icon"
        ],
        "mg-input-checkbox": [
          "mg-icon"
        ],
        "mg-input-checkbox-paginated": [
          "mg-icon"
        ],
        "mg-input-password": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-icon"
        ],
        "mg-item-more": [
          "mg-icon"
        ],
        "mg-loader": [
          "mg-icon"
        ],
        "mg-menu-item": [
          "mg-icon"
        ],
        "mg-message": [
          "mg-icon"
        ],
        "mg-modal": [
          "mg-icon"
        ],
        "mg-pagination": [
          "mg-icon"
        ],
        "mg-panel": [
          "mg-icon"
        ],
        "mg-popover-content": [
          "mg-icon"
        ],
        "mg-tabs": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-illustrated-message/mg-illustrated-message.tsx",
      "encapsulation": "shadow",
      "tag": "mg-illustrated-message",
      "readme": "## Specs\n\n### Vertical\n\n#### Anatomy\n\n![](./doc/img/mg-illustrated-message-vertical-anatomy.png)\n\nComponent is built with:\n\n- an illustration\n- a title\n\nOptionnally:\n\n- one or more _details_ slot which accept HTML content (text, button...)\n\n#### Style\n\n- _title_: Open Sans, 20px, Regular\n- All contents are centered.\n\n#### Spacing\n\n![](./doc/img/mg-illustrated-message-vertical-spacing.png).\n\n30px between the bottom of the _illustration_ and top of the _title_.\n\n20px for the top of the _details_ zone.\n\n15px between left/right border of the screen and the component\n\n#### Sizing\n\nThe maximum width of the component is 475px.\n\nThe maximum height of the illustration is 184px. Illustration must keep its proportionnality.\nIllustration can be displayed in \"small\" size so its maximum height is set to 60px.\n\n![](./doc/img/mg-illustrated-message-vertical-sizing-small.png)\n\n### Horizontal\n\n#### Anatomy\n\n![](./doc/img/mg-illustrated-message-horizontal-anatomy.png)\n\n#### Spacing\n\n![](./doc/img/mg-illustrated-message-horizontal-spacing.png)\n\nBy default the margin is set to 40px on top and bottom. It's possible to modify this props.\n\n![](./doc/img/mg-illustrated-message-horizontal-spacing-2.png)\n\nBetween the image and the group title/action.\n\n#### Alignment\n\n![](./doc/img/mg-illustrated-message-horizontal-alignment.png)\n\nThe image/illustration and the group tittle/details/action are vertically centred between them in the background.\n\n#### Responsive\n\nWhen there is not enough space the component take is default appearance.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-illustrated-message-padding-vertical`: define component vertical padding, default: `4rem`\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'vertical' | 'horizontal'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "Define component orientation",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"regular\" | \"small\"",
          "complexType": {
            "original": "'regular' | 'small'",
            "resolved": "\"regular\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define illustration size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input/mg-input.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input",
      "readme": "\n## UX\n\n### Label\n\n- The label is located on the left of the input field.\n- The text is to be right aligned.\n- The label can be on one or more lines.\n- The label can be positioned above the input field.\n\n### Input help\n\nThe message displayed indicates the format expected by the input field \"example: email@provider.com\" or \"expected format: DD/MM/YYYY (ex: 13/04/2019)\"\n\n### Message order\n\nWhen the messages are displayed under the field the order is as follows:\n\n1. input help\n2. error\n\n### Placeholder\n\nThe placeholder should not be used as an input help.  \n♿ RGAA: The placeholder is not considered a valid label under the RGAA so is not subject to a contrast ratio.\n\n### Read only\n\n- The value is no longer editable.\n- The input field no longer has a border or background.\n- The value is displayed in bold.\n- If there is no value entered, nothing is displayed.\n\n### Required field\n\nThe asterisk is displayed regardless of the status of the field: input, read-only, disabled.\n\n### Pattern\n\nPlease ensure to consider this when using regular expressions in your components.\n\nSince mid-2023, there have been updates to the regular expressions used in native inputs. Browsers now uses the 'v' flag instead of the 'u' flag.  \nConsequently, all literal characters must be escaped, and there's no longer a need to use the `^` and `$` characters to indicate the start and end of the string.\n\nFor exemple this RegExp working using the 'u' flag `^[\\d ()+]*$` should be converted to the corresponding 'v' flag `[\\d\\s\\(\\)\\+]` on our components. You can get more info on the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern#overview).\n\nIf needed, this library has been identified for converting regular expressions: [regexpu-core](https://www.npmjs.com/package/regexpu-core).\n\n## Specs\n\n### Positioning of \"i\" icon\n\n![](./doc/img/mg-input-tooltip-position.png)\n\nBy default, the \"i\" icon is positioned next to the input field.\n\nYou can position it next to the label by using the `tooltip-placement` prop with the value `label`.\n\nWhen `label-on-top` is enabled, the \"i\" icon moves next to the label, overriding the `tooltip-placement` setting.\n\nWhen the `label-hide` prop is enabled, the \"i\" icon moves next to the input, overriding the `tooltip-placement` setting.\n\n### Value positioning\n\nBy default, the value is left aligned, you can change the CSS variable `--mg-inputs-text-align` to right align.\n\n### Responsive\n\n![](./doc/img/mg-input-responsive.png)\n\nWhen the viewport width is less than 768px, the label is stacked above the input field.\n\nIf you are creating a form that combines mg-components inputs with inputs from one of our legacy libraries (such as form, ui-components, ui-components-vuejs), please refer to [this section on mg-form](.?path=/docs/molecules-mg-form--docs#combining-mg-input--with-legacy-libraries).\n\n### Errors\n\nInput field border and error message text are in [@color-danger](./?path=/docs/style-colors--docs).  \nError message background is a variant of [@color-danger](./?path=/docs/style-colors--docs) : #FEF6F6 or HSL (357,80%,98%).\n\n## Behavior\n\n### Errors\n\nError is triggered and displayed when we leave the input field.\n\nWhen we enter in an input field with an error its state is checked everytime the user update its content, when the error is fixed the message disapears.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-inputs-text-align`: Define input text alignement, numeric input default is `right`, others inputs default is `left`\n- `--mg-inputs-border-width`: Define input border witdh, default: `0.1rem`\n- `--mg-inputs-border-radius`: Define input border radius, default: `0.3rem`\n- `--mg-inputs-color`: Define input border an placeholder color, default: `#b5c2c9`\n- `--mg-inputs-spacer`: Define input space between label, input, tooltip, etc., default: `1rem`\n- `--mg-inputs-error-bg-color`: Define input error message backround color, default: `var(--color-danger-h), calc(var(--color-danger-s) + 5%), calc(var(--color-danger-l) + 49%)`\n- `--mg-inputs-color-shadow-focus-hsl`: Define input shadow when focused, default: `188, 100%, 50%`\n- `--mg-inputs-title-width`: Define input label width, default: `23rem`\n- `--mg-inputs-margin-bottom`: Define input bottom margin, default: `1.5rem`\n- `--mg-inputs-title-horizontal-space`: Define space between label and input when inside a `mg-form`, default: `3rem`\n\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-inputs-text-align`: Define input text alignement, numeric input default is `right`, others inputs default is `left`\n- `--mg-inputs-border-width`: Define input border witdh, default: `0.1rem`\n- `--mg-inputs-border-radius`: Define input border radius, default: `0.3rem`\n- `--mg-inputs-color`: Define input border an placeholder color, default: `#b5c2c9`\n- `--mg-inputs-spacer`: Define input space between label, input, tooltip, etc., default: `1rem`\n- `--mg-inputs-error-bg-color`: Define input error message backround color, default: `var(--color-danger-h), calc(var(--color-danger-s) + 5%), calc(var(--color-danger-l) + 49%)`\n- `--mg-inputs-color-shadow-focus-hsl`: Define input shadow when focused, default: `188, 100%, 50%`\n- `--mg-inputs-title-width`: Define input label width, default: `23rem`\n- `--mg-inputs-margin-bottom`: Define input bottom margin, default: `1.5rem`\n- `--mg-inputs-title-horizontal-space`: Define space between label and input when inside a `mg-form`, default: `3rem`\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaDescribedbyIDs",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define aria-describedby ids to link with",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Define error message to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Define help text to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Define input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonlyValue",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly-value",
          "reflectToAttr": false,
          "docs": "Defines value to display in readonly mode",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "./mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle"
      ],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title"
      ],
      "dependencyGraph": {
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox": [
          "mg-input"
        ],
        "mg-input-date": [
          "mg-input"
        ],
        "mg-input-numeric": [
          "mg-input"
        ],
        "mg-input-password": [
          "mg-input"
        ],
        "mg-input-radio": [
          "mg-input"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input-text": [
          "mg-input"
        ],
        "mg-input-textarea": [
          "mg-input"
        ],
        "mg-input-toggle": [
          "mg-input"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-checkbox",
      "readme": "## Usage\n\nTrue/False value notion.\nOnly 2 possible values.\n\n### Theming\n\nThe style of the active checkbox is the browser's style.\n\n## Specs\n\n![](./doc/img/mg-input-checkbox-specs.png)\n\n## Type \"multi\"\n\n### Anatomy\n\n![](./doc/img/mg-input-checkbox-multi-anatomy.png)\n\n1. Button\n  - variant: secondary\n  - icon: list\n2. Button\n  - variant: link\n3. Popover\n4. Checkbox\n5. Details\n6. Search\n7. Pagination\n\n### Type \"multi\" with sections\n\n![](./doc/img/mg-input-checkbox-multi-section.png)\n\n#### Spacings\n\n![](./doc/img/mg-input-checkbox-multi-section-button-spacing.png)\n\n\"Select all\" and \"Unselect all\" buttons are aligned on left. \n\n![](./doc/img/mg-input-checkbox-multi-section-internal-spacing.png)\n\n![](./doc/img/mg-input-checkbox-multi-section-spacing.png)\n\n\n### Displayed values\n\n![](./doc/img/mg-input-checkbox-display-values.png)\n\n#### Without values\n\nIf the space is too narrow the text button will do a line break.\n\n#### With values\n\nIf the space is too narrow the button and values will do a line break.\n\nThe component is ajusting with the space available. If the width is not enought big the values will do a breakline.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-input-check-size`: Define checkbox size, default: `1.3rem`\n\n## Warning\n\nPlease be aware that this component has a known issue ([#139](https://gitlab.mgdis.fr/core/core-ui/mg-components/-/issues/139)) **when used with the Vue2 framework**. It is essential that your project loads the [mg-model directive](http://core.pages.mgdis.fr/core-back/core/docs/mg-components-helpers/mg-model-vue) and that the component uses it.\n",
      "docs": "True/False value notion.\nOnly 2 possible values.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displaySelectedValues",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-selected-values",
          "reflectToAttr": false,
          "docs": "Display selected values list in \"multi\" type\nThis prop is only applied with prop type \"multi\" or when an \"unset\" mode render a \"multi\" type.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Define input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Define input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"checkbox\" | \"multi\"",
          "complexType": {
            "original": "CheckboxType",
            "resolved": "\"checkbox\" | \"multi\"",
            "references": {
              "CheckboxType": {
                "location": "import",
                "path": "./mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxType"
              }
            }
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define checkbox type\nWhen it's undefined the type is dynamic:\n- With 0-5 items type is 'checkbox'\n- With 5-10 items type is 'multi'\nWhen it set the type is locked to the defined value.\nWhen type is dynamic OR with 'multi' type AND Over 10 items \"search\" feature is enabled",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "multi",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "CheckboxValue[]",
          "complexType": {
            "original": "CheckboxValue[]",
            "resolved": "CheckboxValue[]",
            "references": {
              "CheckboxValue": {
                "location": "import",
                "path": "./mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxValue"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Component value\nIf item.value is `null`, checkbox will be indeterminate by default",
          "docsTags": [],
          "values": [
            {
              "type": "CheckboxValue[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputCheckbox['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputCheckbox": {
                "location": "global",
                "id": "global::MgInputCheckbox"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputCheckbox['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "CheckboxValue[]",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['value']",
            "resolved": "CheckboxValue[]",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input-checkbox-paginated",
        "mg-popover",
        "mg-button",
        "mg-icon",
        "mg-input-text",
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-input-checkbox-paginated",
          "mg-popover",
          "mg-button",
          "mg-icon",
          "mg-input-text",
          "mg-input"
        ],
        "mg-input-checkbox-paginated": [
          "mg-button",
          "mg-icon",
          "mg-tooltip",
          "mg-pagination"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox-paginated/mg-input-checkbox-paginated.tsx",
      "encapsulation": "scoped",
      "tag": "mg-input-checkbox-paginated",
      "readme": "# mg-input-checkbox-paginated\n\n\n",
      "docs": "Internal component use to manage sections instances",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checkboxes",
          "type": "CheckboxItem[]",
          "complexType": {
            "original": "CheckboxItem[]",
            "resolved": "CheckboxItem[]",
            "references": {
              "CheckboxItem": {
                "location": "import",
                "path": "../mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define checkboxes to paginate",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CheckboxItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "Current page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox-list is disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define mg-input-checkbox input invalid",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "messages",
          "type": "{ [x: string]: string; }",
          "complexType": {
            "original": "Record<string, string>",
            "resolved": "{ [x: string]: string; }",
            "references": {
              "Record": {
                "location": "global",
                "id": "global::Record"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define component message",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Define mg-input-checkbox input name",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if mg-input-checkbox-list is readonly",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sectionKind",
          "type": "SectionKind.NOT_SELECTED | SectionKind.SELECTED",
          "complexType": {
            "original": "SectionKind",
            "resolved": "SectionKind.NOT_SELECTED | SectionKind.SELECTED",
            "references": {
              "SectionKind": {
                "location": "import",
                "path": "../mg-input-checkbox.conf",
                "id": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::SectionKind"
              }
            }
          },
          "mutable": false,
          "attr": "section-kind",
          "reflectToAttr": false,
          "docs": "Define section kind",
          "docsTags": [],
          "values": [
            {
              "type": "SectionKind.NOT_SELECTED"
            },
            {
              "type": "SectionKind.SELECTED"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "mass-action",
          "detail": "SectionKind.NOT_SELECTED | SectionKind.SELECTED",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxPaginatedElement['sectionKind']",
            "resolved": "SectionKind.NOT_SELECTED | SectionKind.SELECTED",
            "references": {
              "HTMLMgInputCheckboxPaginatedElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxPaginatedElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emit 'mass-action' event\nused to informe that select-all/unselect-all button listner is triggered",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox"
      ],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-tooltip",
        "mg-pagination"
      ],
      "dependencyGraph": {
        "mg-input-checkbox-paginated": [
          "mg-button",
          "mg-icon",
          "mg-tooltip",
          "mg-pagination"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-input-checkbox": [
          "mg-input-checkbox-paginated"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-date/mg-input-date.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-date",
      "readme": "## Behavior\n\nThe behavior is the native behavior of the browser.\n\n### Theming\n\nCalendar and trigger: The style is the browser's native style.\n",
      "docs": "The behavior is the native behavior of the browser.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example\nAvailable string variables:\n - `{pattern}`: render innerHTML pattern based on system\n - `{date}`: render innerText date with a pattern base format.\n - `{defaultHelpText}`: render default `helpText` usefull to concat helpText local with your custom text.\nex: `Input use {pattern} pattern` as `helpText` prop value will be render as `Input use mm/dd/yyyy pattern`",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Define input maximum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Define input minimum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputDate['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputDate": {
                "location": "global",
                "id": "global::MgInputDate"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputDate['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputDateElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputDateElement": {
                "location": "global",
                "id": "global::HTMLMgInputDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputDateElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputDateElement": {
                "location": "global",
                "id": "global::HTMLMgInputDateElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-date": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-numeric",
      "readme": "## Usage\n\nAn amount field is a numeric field.  \nBy default it is limited to 16 characters (including comma).\n\nIt is not possible to enter characters other than numbers, \",\" or \".\".\n\nRounding is to two digits after the decimal point.  \nIt is not possible to enter more than two digits after the decimal point.\n\nIt is possible to specify a unit after the field for integers and decimals. For currencies, the symbol is positioned in the input field.\n\n## Specs\n\n### Positioning\n\nBy default, the value is right aligned.\n\n![](./doc/img/mg-input-numeric-positioning-default.png)\n\nYou can change the CSS variable `--mg-c-input-text-align` to left align.\n\n![](./doc/img/mg-input-numeric-positioning-custom.png)\n\n## Slot\n\nThe spacing between the field and the slot content is not managed by the component, it must be defined in slot implementation.\n\n### Unit positioning\n\n![](./doc/img/mg-input-numeric-unit.png)\n\nUnit term must be placed into the field slot using a \"space\" character before the unit term.\n",
      "docs": "An amount field is a numeric field.  \nBy default it is limited to 16 characters (including comma).\n\nIt is not possible to enter characters other than numbers, \",\" or \".\".\n\nRounding is to two digits after the decimal point.  \nIt is not possible to enter more than two digits after the decimal point.\n\nIt is possible to specify a unit after the field for integers and decimals. For currencies, the symbol is positioned in the input field.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currency",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "Define currency",
          "docsTags": [],
          "default": "'USD'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decimalLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "decimal-length",
          "reflectToAttr": false,
          "docs": "Override decimal length\ndecimal is the number after the decimal point",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"currency\" | \"none\" | \"number\"",
          "complexType": {
            "original": "Format",
            "resolved": "\"currency\" | \"none\" | \"number\"",
            "references": {
              "Format": {
                "location": "import",
                "path": "./mg-input-numeric.conf",
                "id": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::Format"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Set local formatting.\nNumbers are formatted based on the locale.",
          "docsTags": [],
          "default": "'number'",
          "values": [
            {
              "value": "currency",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "integerLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "integer-length",
          "reflectToAttr": false,
          "docs": "Override integer length\ninteger is the number before the decimal point",
          "docsTags": [],
          "default": "13",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"decimal\" | \"integer\"",
          "complexType": {
            "original": "NumericType",
            "resolved": "\"decimal\" | \"integer\"",
            "references": {
              "NumericType": {
                "location": "import",
                "path": "./mg-input-numeric.conf",
                "id": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::NumericType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define numeric type",
          "docsTags": [],
          "default": "'decimal'",
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "integer",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputNumeric['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputNumeric": {
                "location": "global",
                "id": "global::MgInputNumeric"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputNumeric['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputNumericElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputNumericElement": {
                "location": "global",
                "id": "global::HTMLMgInputNumericElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-numeric": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-password/mg-input-password.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-password",
      "readme": "## Design\n\nThe standard display of \"bullets\" instead of characters is the standard one (depending on the rendering of the used browser).\n",
      "docs": "The standard display of \"bullets\" instead of characters is the standard one (depending on the rendering of the used browser).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputPassword['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputPassword": {
                "location": "global",
                "id": "global::MgInputPassword"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputPassword['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputPasswordElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputPasswordElement": {
                "location": "global",
                "id": "global::HTMLMgInputPasswordElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputPasswordElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputPasswordElement": {
                "location": "global",
                "id": "global::HTMLMgInputPasswordElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-input-password": [
          "mg-input",
          "mg-button",
          "mg-icon"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-radio",
      "readme": "## Usage\n\n- Always used in a group with minimum 2 options\n- Only one selected option is possible from all the options in the group\n- The label option is clickable and selects the option\n- The group can be initialized without any default value\n\n### Theming\n\nThe style of the active radio button is that of the browser.\n\n## Specs\n\n![](./doc/img/mg-input-radio-specs.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-input-check-size`: Define radio input size, default: `1.3rem`\n",
      "docs": "- Always used in a group with minimum 2 options\n- Only one selected option is possible from all the options in the group\n- The label option is clickable and selects the option\n- The group can be initialized without any default value",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "RadioOption[] | string[]",
          "complexType": {
            "original": "string[] | RadioOption[]",
            "resolved": "RadioOption[] | string[]",
            "references": {
              "RadioOption": {
                "location": "import",
                "path": "./mg-input-radio.conf",
                "id": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts::RadioOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "RadioOption[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputRadio['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputRadio": {
                "location": "global",
                "id": "global::MgInputRadio"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputRadio['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputRadioElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputRadioElement": {
                "location": "global",
                "id": "global::HTMLMgInputRadioElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputRadioElement['value']",
            "resolved": "any",
            "references": {
              "HTMLMgInputRadioElement": {
                "location": "global",
                "id": "global::HTMLMgInputRadioElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-radio": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-select/mg-input-select.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-select",
      "readme": "## Design\n\nThe placeholder of the list is \"Select a value\".\n\nThe behavior, style and position of the chevron on the right of the field are those of the native browser.  \nThe spacing between the text and the chevron is at least 10px.\n\n### Sizing\n\nThe width of the component is defined by the largest option of the options.\n",
      "docs": "The placeholder of the list is \"Select a value\".\n\nThe behavior, style and position of the chevron on the right of the field are those of the native browser.  \nThe spacing between the text and the chevron is at least 10px.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "(string | SelectOption)[]",
          "complexType": {
            "original": "(string | SelectOption)[]",
            "resolved": "(string | SelectOption)[]",
            "references": {
              "SelectOption": {
                "location": "import",
                "path": "./mg-input-select.conf",
                "id": "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts::SelectOption"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "SelectOption)[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": true,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-disabled",
          "reflectToAttr": false,
          "docs": "Option to disable placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder-hide",
          "reflectToAttr": false,
          "docs": "Option to remove placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputSelect['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputSelect": {
                "location": "global",
                "id": "global::MgInputSelect"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputSelect['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "CheckboxValue[]",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputCheckboxElement['value']",
            "resolved": "CheckboxValue[]",
            "references": {
              "HTMLMgInputCheckboxElement": {
                "location": "global",
                "id": "global::HTMLMgInputCheckboxElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-pagination"
      ],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-pagination": [
          "mg-input-select"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-text/mg-input-text.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-text",
      "readme": "## Design\n\n### Indication of the number of characters left\n\n- when the focus is on the input field, the `mg-character-left` component is displayed\n- when the focus is no longer on the input field, the message disappears\n- by default limited to 400 alpha numeric characters\n\n#### Font\n\n![](./doc/img/mg-input-text-fonts.png)\n\nOpen Sans, regular, 11px  \nColor: [@color-dark](./?path=/docs/style-colors--docs), opacity: 0.6\n\n#### Spacing\n\n![](./doc/img/mg-input-text-spacing.png)\n\n#### Position\n\n![](./doc/img/mg-input-text-position.png)\n\nPosition: center\n\n## Use as `search` input\n\nDue to [accessibility recommendation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/search#search_form_labels_and_accessibility), an `<input type=\"search\" />` must be used within a `<form role=\"search\" />` we recommend using mg-input-text as in dedicated story.\n\nThe \"search\" role can only be used when the input field is the main website search field.\n\n## Display a `datalist`\n\nThe `datalist` behavior is set with `datalistoptions` prop to initalize options list.\n\n## Slot\n\nThe spacing between the field and the slot content is not managed by the component, it must be defined in slot implementation.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterLeftHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-left-hide",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "datalistoptions",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define datalist options",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
          "complexType": {
            "original": "IconType",
            "resolved": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
            "references": {
              "IconType": {
                "location": "import",
                "path": "../../../../components",
                "id": "src/components.d.ts::IconType"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Input icon",
          "docsTags": [],
          "values": [
            {
              "value": "filter",
              "type": "string"
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "value": "wallet-outline",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "400",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate\nPlease refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"search\" | \"text\"",
          "complexType": {
            "original": "TextType",
            "resolved": "\"search\" | \"text\"",
            "references": {
              "TextType": {
                "location": "import",
                "path": "./mg-input-text.conf",
                "id": "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts::TextType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Input type",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputText['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputText": {
                "location": "global",
                "id": "global::MgInputText"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputText['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Public method to play input focus",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputTextElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputTextElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-panel"
      ],
      "dependencies": [
        "mg-input",
        "mg-icon",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox": [
          "mg-input-text"
        ],
        "mg-panel": [
          "mg-input-text"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-textarea/mg-input-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-textarea",
      "readme": "## Design\n\n### Indication of the number of characters left\n\n- when the focus is on the input field, the `mg-character-left` component is displayed\n- when the focus is no longer on the input field, the message disappears\n- by default limited to 4000 alpha numeric characters\n\n#### Font\n\nOpen Sans, regular, 11px  \nColor: [@color-dark](./?path=/docs/style-colors--docs), opacity: 0.6\n\n#### Spacing\n\n![](./doc/img/mg-input-textarea-spacing.png)\n\n### Dimensions\n\n- the height of the component is by default 3 lines of text (this value is configurable)\n- by default, the input field cannot be resized\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterLeftHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-left-hide",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mgWidth",
          "type": "\"full\" | 16 | 2 | 4",
          "complexType": {
            "original": "Width",
            "resolved": "\"full\" | 16 | 2 | 4",
            "references": {
              "Width": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width"
              }
            }
          },
          "mutable": false,
          "attr": "mg-width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate\nPlease refer to the Pattern section in the input documentation for detailed information on using regular expressions in components.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizable",
          "type": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "'none' | 'both' | 'horizontal' | 'vertical'",
            "resolved": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "resizable",
          "reflectToAttr": false,
          "docs": "Define if input is resizable",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Define the number of visible text lines for the control",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Display input error if it exists.",
          "docsTags": []
        },
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: MgInputTextarea['valid'], errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MgInputTextarea": {
                "location": "global",
                "id": "global::MgInputTextarea"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: MgInputTextarea['valid'], errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextareaElement['valid']",
            "resolved": "boolean",
            "references": {
              "HTMLMgInputTextareaElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextareaElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputTextareaElement['value']",
            "resolved": "string",
            "references": {
              "HTMLMgInputTextareaElement": {
                "location": "global",
                "id": "global::HTMLMgInputTextareaElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-textarea": [
          "mg-input",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/internals/mg-input-title/mg-input-title.tsx",
      "encapsulation": "scoped",
      "tag": "mg-input-title",
      "readme": "## Design\n\n### Label\n\nThe label can be on more than one line.\n\n### Styles\n\n![](./doc/img/mg-input-title.png)\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Label input id",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "isLegend",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-legend",
          "reflectToAttr": false,
          "docs": "Switch from label to fieldset sementic",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If input is required an asterisk is added at the end of the label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If input is required an asterisk is added at the end of the label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-input": [
          "mg-input-title"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-toggle",
      "readme": "## Usage\n\nClicking anywhere on the entire component area toggles the selected value.\n\nThe first value is always selected by default.\n\nWhen the \"on/off\" property is used, the first value is always the disabled value and the style is adjusted.\n\nThe values must be transcribed by texts or icons.\n\n### Types\n\n![](./doc/img/mg-input-toggle-use.png)\n\n### Specs\n\n![](./doc/img/mg-input-toggle-specs.png)\n\n### Readonly\n\n![](./doc/img/mg-input-toggle-readonly.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-input-toggle-border-radius-ratio`: Define input border radius ration, default: `2`\n",
      "docs": "Clicking anywhere on the entire component area toggles the selected value.\n\nThe first value is always selected by default.\n\nWhen the \"on/off\" property is used, the first value is always the disabled value and the style is adjusted.\n\nThe values must be transcribed by texts or icons.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if toggle display icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOnOff",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-on-off",
          "reflectToAttr": false,
          "docs": "Define if toggle have on/off style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "ToggleValue[] | string[]",
          "complexType": {
            "original": "string[] | ToggleValue[]",
            "resolved": "ToggleValue[] | string[]",
            "references": {
              "ToggleValue": {
                "location": "import",
                "path": "./mg-input-toggle.conf",
                "id": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts::ToggleValue"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "ToggleValue[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "\"input\" | \"label\"",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "\"input\" | \"label\"",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../mg-input/mg-input.conf",
                "id": "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltip-position",
          "reflectToAttr": false,
          "docs": "Define tooltip position",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(valid: boolean, errorMessage: string) => Promise<void>",
            "parameters": [
              {
                "name": "valid",
                "type": "boolean",
                "docs": "- value indicating the validity"
              },
              {
                "name": "errorMessage",
                "type": "string",
                "docs": "- the error message to display"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setError(valid: boolean, errorMessage: string) => Promise<void>",
          "parameters": [
            {
              "name": "valid",
              "type": "boolean",
              "docs": "- value indicating the validity"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "docs": "- the error message to display"
            }
          ],
          "docs": "Set an error and display a custom error message.\nThis method can be used to set the component's error state from its context by passing a boolean value to the `valid` parameter.\nIt must be paired with an error message to display for the given context.\nWhen used to set validity to `false`, you should use this method again to reset the validity to `true`.",
          "docsTags": [
            {
              "name": "param",
              "text": "valid - value indicating the validity"
            },
            {
              "name": "param",
              "text": "errorMessage - the error message to display"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgInputToggleElement['value']",
            "resolved": "any",
            "references": {
              "HTMLMgInputToggleElement": {
                "location": "global",
                "id": "global::HTMLMgInputToggleElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-input"
      ],
      "dependencyGraph": {
        "mg-input-toggle": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-item-more/mg-item-more.tsx",
      "encapsulation": "shadow",
      "tag": "mg-item-more",
      "readme": "# mg-item-more\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icon",
          "type": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
          "complexType": {
            "original": "IconType",
            "resolved": "{ icon: \"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"; }",
            "references": {
              "IconType": {
                "location": "import",
                "path": "./mg-item-more.conf",
                "id": "src/components/molecules/mg-item-more/mg-item-more.conf.ts::IconType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define icon",
          "docsTags": [],
          "default": "{ icon: 'ellipsis-vertical' }",
          "values": [
            {
              "type": "{ icon: \"filter\""
            },
            {
              "value": "copy",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "picture",
              "type": "string"
            },
            {
              "value": "table",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "history",
              "type": "string"
            },
            {
              "value": "location",
              "type": "string"
            },
            {
              "value": "key",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "address-card",
              "type": "string"
            },
            {
              "value": "align-center",
              "type": "string"
            },
            {
              "value": "align-justify",
              "type": "string"
            },
            {
              "value": "align-left",
              "type": "string"
            },
            {
              "value": "align-right",
              "type": "string"
            },
            {
              "value": "api",
              "type": "string"
            },
            {
              "value": "archive",
              "type": "string"
            },
            {
              "value": "archive-outline",
              "type": "string"
            },
            {
              "value": "arrow-clock",
              "type": "string"
            },
            {
              "value": "arrow-down",
              "type": "string"
            },
            {
              "value": "arrow-down-a-z",
              "type": "string"
            },
            {
              "value": "arrow-down-right",
              "type": "string"
            },
            {
              "value": "arrow-left",
              "type": "string"
            },
            {
              "value": "arrow-right",
              "type": "string"
            },
            {
              "value": "arrow-rotate",
              "type": "string"
            },
            {
              "value": "arrow-rotate-backward",
              "type": "string"
            },
            {
              "value": "arrow-up",
              "type": "string"
            },
            {
              "value": "arrow-up-right",
              "type": "string"
            },
            {
              "value": "arrow-up-right-square",
              "type": "string"
            },
            {
              "value": "arrow-up-z-a",
              "type": "string"
            },
            {
              "value": "arrows-compare",
              "type": "string"
            },
            {
              "value": "arrows-right-down",
              "type": "string"
            },
            {
              "value": "arrows-right-left",
              "type": "string"
            },
            {
              "value": "arrows-rotate",
              "type": "string"
            },
            {
              "value": "arrows-rotate-backward",
              "type": "string"
            },
            {
              "value": "ban",
              "type": "string"
            },
            {
              "value": "bell",
              "type": "string"
            },
            {
              "value": "bell-outline",
              "type": "string"
            },
            {
              "value": "book",
              "type": "string"
            },
            {
              "value": "book-outline",
              "type": "string"
            },
            {
              "value": "briefcase",
              "type": "string"
            },
            {
              "value": "briefcase-outline",
              "type": "string"
            },
            {
              "value": "building-outline",
              "type": "string"
            },
            {
              "value": "calculator",
              "type": "string"
            },
            {
              "value": "calendar",
              "type": "string"
            },
            {
              "value": "calendar-euro",
              "type": "string"
            },
            {
              "value": "calendar-euro-outline",
              "type": "string"
            },
            {
              "value": "calendar-outline",
              "type": "string"
            },
            {
              "value": "check",
              "type": "string"
            },
            {
              "value": "check-circle",
              "type": "string"
            },
            {
              "value": "check-circle-outline",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-down-circle",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-left-circle",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-right-circle",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "chevron-up-circle",
              "type": "string"
            },
            {
              "value": "clock",
              "type": "string"
            },
            {
              "value": "clock-outline",
              "type": "string"
            },
            {
              "value": "code-square-outline",
              "type": "string"
            },
            {
              "value": "cog",
              "type": "string"
            },
            {
              "value": "cog-outline",
              "type": "string"
            },
            {
              "value": "comment",
              "type": "string"
            },
            {
              "value": "comment-outline",
              "type": "string"
            },
            {
              "value": "comment-sms",
              "type": "string"
            },
            {
              "value": "conversation",
              "type": "string"
            },
            {
              "value": "conversation-outline",
              "type": "string"
            },
            {
              "value": "copy-file",
              "type": "string"
            },
            {
              "value": "copy-file-outline",
              "type": "string"
            },
            {
              "value": "copy-outline",
              "type": "string"
            },
            {
              "value": "credit-card",
              "type": "string"
            },
            {
              "value": "cross",
              "type": "string"
            },
            {
              "value": "cross-circle",
              "type": "string"
            },
            {
              "value": "cross-circle-outline",
              "type": "string"
            },
            {
              "value": "dashboard",
              "type": "string"
            },
            {
              "value": "dashboard-outline",
              "type": "string"
            },
            {
              "value": "earth",
              "type": "string"
            },
            {
              "value": "earth-outline",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "ellipsis-vertical",
              "type": "string"
            },
            {
              "value": "euro",
              "type": "string"
            },
            {
              "value": "euro-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "exclamation-circle-outline",
              "type": "string"
            },
            {
              "value": "exclamation-stamp",
              "type": "string"
            },
            {
              "value": "exclamation-triangle",
              "type": "string"
            },
            {
              "value": "exclamation-triangle-outline",
              "type": "string"
            },
            {
              "value": "eye",
              "type": "string"
            },
            {
              "value": "eye-slash",
              "type": "string"
            },
            {
              "value": "fax",
              "type": "string"
            },
            {
              "value": "fax-outline",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "file-cog",
              "type": "string"
            },
            {
              "value": "file-download",
              "type": "string"
            },
            {
              "value": "file-excel",
              "type": "string"
            },
            {
              "value": "file-excel-outline",
              "type": "string"
            },
            {
              "value": "file-outline",
              "type": "string"
            },
            {
              "value": "file-pdf",
              "type": "string"
            },
            {
              "value": "file-pdf-outline",
              "type": "string"
            },
            {
              "value": "file-text",
              "type": "string"
            },
            {
              "value": "file-text-outline",
              "type": "string"
            },
            {
              "value": "file-upload",
              "type": "string"
            },
            {
              "value": "file-word",
              "type": "string"
            },
            {
              "value": "file-word-outline",
              "type": "string"
            },
            {
              "value": "filter-outline",
              "type": "string"
            },
            {
              "value": "floppy-disk",
              "type": "string"
            },
            {
              "value": "floppy-disk-outline",
              "type": "string"
            },
            {
              "value": "folder",
              "type": "string"
            },
            {
              "value": "folder-check",
              "type": "string"
            },
            {
              "value": "folder-check-outline",
              "type": "string"
            },
            {
              "value": "folder-lines",
              "type": "string"
            },
            {
              "value": "folder-lines-outline",
              "type": "string"
            },
            {
              "value": "folder-link",
              "type": "string"
            },
            {
              "value": "folder-link-outline",
              "type": "string"
            },
            {
              "value": "folder-outline",
              "type": "string"
            },
            {
              "value": "folder-star",
              "type": "string"
            },
            {
              "value": "folders",
              "type": "string"
            },
            {
              "value": "folders-outline",
              "type": "string"
            },
            {
              "value": "gavel",
              "type": "string"
            },
            {
              "value": "gavel-outline",
              "type": "string"
            },
            {
              "value": "graduation-cap",
              "type": "string"
            },
            {
              "value": "graduation-cap-outline",
              "type": "string"
            },
            {
              "value": "hand-up",
              "type": "string"
            },
            {
              "value": "home",
              "type": "string"
            },
            {
              "value": "home-outline",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "info-circle-outline",
              "type": "string"
            },
            {
              "value": "interrogation-circle",
              "type": "string"
            },
            {
              "value": "interrogation-circle-outline",
              "type": "string"
            },
            {
              "value": "laptop",
              "type": "string"
            },
            {
              "value": "life-ring",
              "type": "string"
            },
            {
              "value": "lines-rectangle",
              "type": "string"
            },
            {
              "value": "lines-rectangle-outline",
              "type": "string"
            },
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "location-outline",
              "type": "string"
            },
            {
              "value": "lock",
              "type": "string"
            },
            {
              "value": "lock-outline",
              "type": "string"
            },
            {
              "value": "log-in",
              "type": "string"
            },
            {
              "value": "log-out",
              "type": "string"
            },
            {
              "value": "magnifying-glass",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "mail-outline",
              "type": "string"
            },
            {
              "value": "messages-square",
              "type": "string"
            },
            {
              "value": "messages-square-outline",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "mobile-outline",
              "type": "string"
            },
            {
              "value": "notes",
              "type": "string"
            },
            {
              "value": "notes-outline",
              "type": "string"
            },
            {
              "value": "paper-plane",
              "type": "string"
            },
            {
              "value": "paper-plane-slash",
              "type": "string"
            },
            {
              "value": "paperclip",
              "type": "string"
            },
            {
              "value": "pen",
              "type": "string"
            },
            {
              "value": "pen-circle",
              "type": "string"
            },
            {
              "value": "pen-fancy",
              "type": "string"
            },
            {
              "value": "pen-fancy-files-outline",
              "type": "string"
            },
            {
              "value": "pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "pen-outline",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "phone-outline",
              "type": "string"
            },
            {
              "value": "picture-outline",
              "type": "string"
            },
            {
              "value": "play-circle",
              "type": "string"
            },
            {
              "value": "plus",
              "type": "string"
            },
            {
              "value": "plus-circle",
              "type": "string"
            },
            {
              "value": "share",
              "type": "string"
            },
            {
              "value": "share-outline",
              "type": "string"
            },
            {
              "value": "shuffle",
              "type": "string"
            },
            {
              "value": "sitemap",
              "type": "string"
            },
            {
              "value": "sliders",
              "type": "string"
            },
            {
              "value": "sliders-outline",
              "type": "string"
            },
            {
              "value": "squares",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            },
            {
              "value": "star-outline",
              "type": "string"
            },
            {
              "value": "tag",
              "type": "string"
            },
            {
              "value": "tags",
              "type": "string"
            },
            {
              "value": "thumb-down",
              "type": "string"
            },
            {
              "value": "thumb-down-outline",
              "type": "string"
            },
            {
              "value": "thumb-up",
              "type": "string"
            },
            {
              "value": "thumb-up-outline",
              "type": "string"
            },
            {
              "value": "thumbtack",
              "type": "string"
            },
            {
              "value": "thumbtack-outline",
              "type": "string"
            },
            {
              "value": "trash",
              "type": "string"
            },
            {
              "value": "trash-outline",
              "type": "string"
            },
            {
              "value": "universal-access",
              "type": "string"
            },
            {
              "value": "unlink",
              "type": "string"
            },
            {
              "value": "unlock",
              "type": "string"
            },
            {
              "value": "unlock-outline",
              "type": "string"
            },
            {
              "value": "upload",
              "type": "string"
            },
            {
              "value": "user",
              "type": "string"
            },
            {
              "value": "user-circle",
              "type": "string"
            },
            {
              "value": "user-group",
              "type": "string"
            },
            {
              "value": "user-lock",
              "type": "string"
            },
            {
              "value": "user-outline",
              "type": "string"
            },
            {
              "value": "user-pen-fancy-outline",
              "type": "string"
            },
            {
              "value": "user-plus",
              "type": "string"
            },
            {
              "value": "user-question-outline",
              "type": "string"
            },
            {
              "value": "user-shield-outline",
              "type": "string"
            },
            {
              "value": "users",
              "type": "string"
            },
            {
              "value": "users-outline",
              "type": "string"
            },
            {
              "value": "wallet",
              "type": "string"
            },
            {
              "type": "\"wallet-outline\"; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"regular\"",
          "complexType": {
            "original": "SizeType",
            "resolved": "\"large\" | \"medium\" | \"regular\"",
            "references": {
              "SizeType": {
                "location": "import",
                "path": "./mg-item-more.conf",
                "id": "src/components/molecules/mg-item-more/mg-item-more.conf.ts::SizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define component child menu size.",
          "docsTags": [],
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "slotlabel",
          "type": "{ label?: string; display?: boolean; }",
          "complexType": {
            "original": "SlotLabelType",
            "resolved": "{ label?: string; display?: boolean; }",
            "references": {
              "SlotLabelType": {
                "location": "import",
                "path": "./mg-item-more.conf",
                "id": "src/components/molecules/mg-item-more/mg-item-more.conf.ts::SlotLabelType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define slot label element",
          "docsTags": [],
          "default": "{ display: false }",
          "values": [
            {
              "type": "{ label?: string; display?: boolean; }"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-menu"
      ],
      "dependencies": [
        "mg-menu-item",
        "mg-icon",
        "mg-menu"
      ],
      "dependencyGraph": {
        "mg-item-more": [
          "mg-menu-item",
          "mg-icon",
          "mg-menu"
        ],
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-menu": [
          "mg-item-more"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-loader/mg-loader.tsx",
      "encapsulation": "shadow",
      "tag": "mg-loader",
      "readme": "## Behavior\n\n![](./doc/img/mg-loader-anatomy.png)\n\nThe default loader message is \"Loading in progress...\" and can be overridden with the `message` prop.\n\nThe loader message can be hidden using the `messageHide` prop.\n",
      "docs": "![](./doc/img/mg-loader-anatomy.png)\n\nThe default loader message is \"Loading in progress...\" and can be overridden with the `message` prop.\n\nThe loader message can be hidden using the `messageHide` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "message",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Override loader message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "messageHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "message-hide",
          "reflectToAttr": false,
          "docs": "Hide message",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-loader": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/menu/mg-menu/mg-menu.tsx",
      "encapsulation": "shadow",
      "tag": "mg-menu",
      "readme": "## Horizontal\n\n### Use\n\n![](./doc/img/mg-menu-horizontal-exemple.png)\n\nHorizontal menu is used with large (\"desktop\") resolutions, it is placed in the upper area of the screen.\n\n### Anatomy\n\n![](./doc/img/mg-menu-horizontal-anatomy.png)\n\n![](./doc/img/mg-menu-horizontal-item-anatomy.png)\n\n### Behavior\n\n#### Sizing\n\n![](./doc/img/mg-menu-horizontal-sizing.png)\n\nA horizontal menu can display different item sizes: regular, medium, large.\n\n![](./doc/img/mg-menu-horizontal-sizing-itemmaxwidth.png)\n\nThe content of the element determines its width, but to handle the case where the content is too large (long label), it is possible to specify a maximum width for the element._Label_ and _Meta_ are then truncated.\n\n#### Sub-content\n\n![](./doc/img/mg-menu-horizontal-subcontent-submenu.png)\n\n![](./doc/img/mg-menu-horizontal-subcontent-slot.png)\n\nA \"submenu\" or a \"free content\" can be set to the item.\nAn icon \"chevron-down\" at the right of the item informs the user.\n\n##### Badge\n\n![](./doc/img/mg-menu-horizontal-subcontent-badge.png)\n\nIf at least one sub-item has a badge, the item displays a badge with an exclamation symbol.\n\n#### Overflow\n\n![](./doc/img/mg-menu-horizontal-plus.png)\n\nWhen not all items can be displayed due to the width of the menu container, the items are grouped into a \"plus item\".\n\n## Vertical\n\n### Use\n\n![](./doc/img/mg-menu-vertical-use.png)\n\nThe horizontal menu is used with large resolutions (\"desktop\"), it is mainly placed in the left area of the screen.\n\n### Anatomy\n\n![](./doc/img/mg-menu-vertical-anatomy.png)\n\n![](./doc/img/mg-menu-vertical-item-anatomy.png)\n\n### Behavior\n\n#### Sub content\n\nAn item can display a sub content which can be another vertical menu.\nThis item displays a chevron to its right.\nThe submenu is displayed by clicking on the item.\n\n##### Badge\n\n![](./doc/img/mg-menu-vertical-subcontent-badge.png)\n\nIf at least one sub-item has a badge, the item displays a badge with an exclamation symbol.\n\n#### Overflow\n\n![](./doc/img/mg-menu-vertical-scroll.png)\n\nWhen not all items can be displayed due to the height of the menu container, a scroll bar helps to see hidden items.\n\n**🔺child mg-menu-item slots image / information**\n\nWith a mg-badge/mg-tag/mg-icon, **you must set the component using HTML attributes** instead, because the behavior uses the [cloneNode](https://developer.mozilla.org/fr/docs/Web/API/Node/cloneNode) method which breaks properties.\n\n## CSS Variables\n\n### global\n\n- `--mg-c-menu-background-color-hsl`: define mg-menu background color. Default: `--mg-b-color-light`.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "Direction.HORIZONTAL | Direction.VERTICAL",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.HORIZONTAL | Direction.VERTICAL",
            "references": {
              "Direction": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": true,
          "docs": "Component display direction.",
          "docsTags": [],
          "default": "Direction.HORIZONTAL",
          "values": [
            {
              "type": "Direction.HORIZONTAL"
            },
            {
              "type": "Direction.VERTICAL"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemmore",
          "type": "{ size?: \"regular\" | \"medium\" | \"large\"; icon?: IconType; slotlabel?: SlotLabelType; }",
          "complexType": {
            "original": "ItemMoreType",
            "resolved": "{ size?: \"regular\" | \"medium\" | \"large\"; icon?: IconType; slotlabel?: SlotLabelType; }",
            "references": {
              "ItemMoreType": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::ItemMoreType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Customize \"mg-item-more\" element\nUsed with direction: 'vertical' to manage overflow",
          "docsTags": [],
          "values": [
            {
              "type": "{ size?: \"regular\""
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "type": "\"large\"; icon?: IconType; slotlabel?: SlotLabelType; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Menu label. Include short menu description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"regular\"",
          "complexType": {
            "original": "MenuSizeType",
            "resolved": "\"large\" | \"medium\" | \"regular\"",
            "references": {
              "MenuSizeType": {
                "location": "import",
                "path": "./mg-menu.conf",
                "id": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::MenuSizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define mg-menu size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-item-more"
      ],
      "dependencies": [
        "mg-item-more"
      ],
      "dependencyGraph": {
        "mg-menu": [
          "mg-item-more"
        ],
        "mg-item-more": [
          "mg-menu"
        ],
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-menu"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/menu/mg-menu-item/mg-menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "mg-menu-item",
      "readme": "## Use\n\nItem menu is used with horizontal or vertical menus.\n\n## Anatomy\n\n![](./doc/img/mg-menu-item-anatomy.png)\n\nAn item must have a label.\nAn icon can be added before the text.\nA badge can be added after the text.\nWhen a submenu is available, a chevron is displayed (in horizontal and vertical menus) to indicate its presence.\n\n## Specs\n\nItem's display depends on the size of the menu (regular, medium, large) and its mode (horizontal, vertical).\n\n### Spacing\n\n![](./doc/img/mg-menu-item-spacing.png)\n\n### Sizing\n\n#### Horizontal menu\n\n![](./doc/img/mg-menu-item-sizing-horizontal.png)\n\nWidth of the item depends on its content.\n\n![](./doc/img/mg-menu-item-sizing-maxwidth.png)\n\nIf a max-width is set, the _label_ and the _meta_ use an ellipsis to truncate the content if necessary.\n\n#### Vertical menu\n\n![](./doc/img/mg-menu-item-sizing-vertical.png)\n\nWidth of the item is 100% width of the menu.\n\n### Alignment\n\n#### Horizontal and vertical menus\n\n![](./doc/img/mg-menu-item-alignment.png)\n\nAll contents are aligned vertically.\n\n#### Vertical menu\n\n![](./doc/img/mg-menu-item-alignment-vertical.png)\n\nAll items are aligned to left.\nThe chevron is aligned to the right of the item.\n\n### Styling\n\n![](./doc/img/mg-menu-item-horizontal-menu-styling.png)\n\n![](./doc/img/mg-menu-item-vertical-menu-styling.png)\n\nHover item: the background is colored\nActive item: the font color changes, an active bar (3px) is displayed at the bottom of the item for horizontal, at the left of the item for vertical menus.\n\n#### Colors\n\nStandard color is @color-dark.\nActive color is the color of the app.\nHover color is the color of the app with an opacity set to 10%.\nDisabled item's opacity is set to 40%.\n\n#### Fonts\n\nFamily: Open Sans\nRegular size: 13px\nMedium/Large size: 15px\n\n#### Icons\n\nRegular/Medium/Large menus: regular size\n\n## Behavior\n\n### Click\n\nClick on an item of the menu can:\n\n- redirect to a url\n- display child content (see below)\n\nIf child content is available, an icon \"chevron-down\" is displayed at the right of the item.\nWhen opening the child content, the chevron makes a 180° rotation.\nWhen closing the child content, the chevron returns to position 0°.\n\n## Child content\n\n### Horizontal and vertical menus\n\nChild content is displayed\n\n- by clicking on the item\n- by pressing the space or enter key\n\nIt is closed\n\n- by clicking on the item\n- by pressing the space or enter key\n- by clicking outside of the child content if the menu is horizontal\n\nThe child content can be:\n\n- another horizontal or vertical menu with sub items\n- a slot for HTML content\n\n#### In an horizontal menu\n\n![](./doc/img/mg-menu-submenu-alignment.png)\n\nChild content is displayed in a floating component over the content (like a popover).\nIt is aligned to the left bottom of the item, excepted for the last item of the menu which is aligned to the right bottom.\n\nIf the floating component is higher than the screen size, there is no overflow, user has to scroll the page.\n\n![](./doc/img/mg-menu-item-child-styling.png)\n\nThe floating component has a _@color-light_ background and a _@shadow_.\n\n![](./doc/img/mg-menu-item-child-menu-spacing.png)\n\nIf the floating component displays a submenu, there are top and bottom spacing of 10px.\n\n![](./doc/img/mg-menu-item-child-slot-spacing.png)\n\nIf the floating component displays a slot, there is no spacing.\n\n![](./doc/img/mg-menu-submenu-slot.png)\n\nThe minimal width of the submenu is the item's width.\nWidth of the submenu is determined by the width of the largest item or the content of the slot.\n\n#### In a vertical menu\n\n![](./doc/img/mg-menu-submenu-vertical-menu.png)\n\nMenu is displayed under the item, with the same width. **(i) Vertical menu is recommended if you display a submenu.**\nIdem for the slot.\nThere is no space to display child content.\nItems below are pushed to bottom.\n\n##### Spacing\n\nSub-items add to their left spacing the spacing between left border and content of their parent's item.\n\n## Slots\n\n### Image\n\nRecommanded element is an icon or a SVG.\n\n### Information\n\nRecommanded element is a mg-badge. Use it when you need to notify new events in this section.\n\n## CSS Variables\n\n### global\n\n- `--mg-c-menu-item-focused-background-color-hsl`: define mg-menu-item focused background color. default: `--mg-b-color-app-hsl`.\n- `--mg-c-menu-item-border-color-active-hsl`: define mg-menu-item border color. default: `--mg-b-color-app-hsl`.\n- `--mg-c-menu-item-color-hsl`: define mg-menu-item font color. default: `--mg-b-color-dark`.\n- `--mg-c-menu-item-color-active-hsl`: define mg-menu-item font color active. default: `--mg-b-color-app-hsl`.\n- `--mg-c-menu-item-navigation-button-column-gap`: define mg-menu-item button column gap. default: `unset`.\n\n### navigation-button\n\n- `--mg-c-menu-item-navigation-button-max-width`: define mg-menu-item button max-width. Useful to apply `text-overflow: ellipsis;` on `mg-menu-item__navigation-button-text` element. default: `unset`.\n",
      "docs": "Item menu is used with horizontal or vertical menus.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Define menu-item content expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Define menu-item href\nwhen defined menu-item contain an anchor instead of button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used to control mg-popover",
          "docsTags": [],
          "default": "createID('mg-menu-item')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "Status.ACTIVE | Status.DISABLED | Status.HIDDEN | Status.VISIBLE",
          "complexType": {
            "original": "Status",
            "resolved": "Status.ACTIVE | Status.DISABLED | Status.HIDDEN | Status.VISIBLE",
            "references": {
              "Status": {
                "location": "import",
                "path": "./mg-menu-item.conf",
                "id": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::Status"
              }
            }
          },
          "mutable": true,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "Define menu-item status.",
          "docsTags": [],
          "default": "Status.VISIBLE",
          "values": [
            {
              "type": "Status.ACTIVE"
            },
            {
              "type": "Status.DISABLED"
            },
            {
              "type": "Status.HIDDEN"
            },
            {
              "type": "Status.VISIBLE"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "complexType": {
            "original": "TargetType",
            "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
            "references": {
              "TargetType": {
                "location": "import",
                "path": "./mg-menu-item.conf",
                "id": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::TargetType"
              }
            }
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Define target type",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "item-loaded",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when item is loaded",
          "docsTags": []
        },
        {
          "event": "item-updated",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when item is updated",
          "docsTags": []
        },
        {
          "event": "status-change",
          "detail": "Status.ACTIVE | Status.DISABLED | Status.HIDDEN | Status.VISIBLE",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgMenuItemElement['status']",
            "resolved": "Status.ACTIVE | Status.DISABLED | Status.HIDDEN | Status.VISIBLE",
            "references": {
              "HTMLMgMenuItemElement": {
                "location": "global",
                "id": "global::HTMLMgMenuItemElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when status change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-item-more"
      ],
      "dependencies": [
        "mg-badge",
        "mg-icon",
        "mg-popover"
      ],
      "dependencyGraph": {
        "mg-menu-item": [
          "mg-badge",
          "mg-icon",
          "mg-popover"
        ],
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-menu-item"
        ],
        "mg-item-more": [
          "mg-menu-item"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-message/mg-message.tsx",
      "encapsulation": "shadow",
      "tag": "mg-message",
      "readme": "## Usage\n\n### Types\n\nThe element can be of four different types depending on the message to be indicated:\n\n- validation (green)\n- information (blue)\n- warning (orange)\n- error (red)\n\nWhen a trigger (button...) is set up, it can trigger the display of a message. By default, the execution of the trigger erases the previous messages in the screen of the same type.\n\n## Specs\n\n![](./doc/img/mg-message-specs.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-message-border-radius`: Define message border radius, default: `0.3rem`\n\nPlease note that the mg-message component uses the [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) component. This means that you can benefit from the CSS variables of [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) to customize mg-message. You can easily change padding, border-radius, etc. Use this feature to seamlessly adapt mg-message to your design.\n\n## Hide component\n\nTo hide the component, you must use the native `hidden` attribute.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if message has a cross button\nRG 01: https://jira.mgdis.fr/browse/PDA9-140",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "delay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "Add a delay to hide/close message when it passed\nValue is defined in seconds and must greater than 2 seconds (PDA9-314 RG-06)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-message')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noAriaRole",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-aria-role",
          "reflectToAttr": false,
          "docs": "Define if aria role is unset\nFor a11y reasons, `<mg-message />` was design for `alert` needs with attached semantic role: `status`, `alert`.\nBy toggle this props to `true`, you can unset the role to benefit from the template without any semantic role.\nBe careful to set the mode according to the context needs.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "VariantType",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "VariantType": {
                "location": "import",
                "path": "./mg-message.conf",
                "id": "src/components/molecules/mg-message/mg-message.conf.ts::VariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Message variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when message is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when message is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-card",
        "mg-icon",
        "mg-button"
      ],
      "dependencyGraph": {
        "mg-message": [
          "mg-card",
          "mg-icon",
          "mg-button"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-modal/mg-modal.tsx",
      "encapsulation": "shadow",
      "tag": "mg-modal",
      "readme": "## Anatomy\n\nA modal has:\n\n- a closing cross at the top right corner\n- a title\n- a body composed of fields or a message\n- a validation button\n- a cancel button\n\n## Behavior\n\nWhen clicking on the cross, the cancel button or the `<Escape>` key is pressed the modal closes and no processing is done.\n\nWhen the validation button is clicked, processing is performed and the modal closes.\n\nAs long as the user does not press one of these three buttons, the modal does not close.\n\nThe modal allows focusing the attention on what it is asking: a confirmation or a cancellation.  \nIn this sense the rest of the screen should not be accessible:\n\n- it is hidden by a backdrop\n- clicking on the backdrop does not close the modal\n\nThe title of the modal has a written name.\nEx: Add value\n\nThe wording of the validation button is the infinitive verb of the current action.  \nAvoid the verb \"Validate\" if a more explicit one is possible.  \nEx: \"Add\" for adding a value, \"Delete\" to delete a value, \"Modify\" to modify a value.\n\n### Icon or not icon on the action buttons ?\n\nIn the case of a targeted action, the icon can help to understand or even reassure > check icon that validates the action.\n\nIn the case of a confirmation/cancellation choice: not necessary or even superfluous > the term \"Save/Cancel\" is enough.\n\nEx: if I put a check in front of the term \"Delete\" which is the validation button of a deletion, the check refers to positive while the action of deletion is negative, and the Cancel button also, so not to add to the confusion, do not put an icon...\n\n## Specs\n\n### Shapes\n\n![](./doc/img/mg-modal-shapes.png)\n\n### Fonts\n\n![](./doc/img/mg-modal-fonts.png)\n\n### Spacing\n\n#### Spacing between edges and content\n\n![](./doc/img/mg-modal-spaces-borders.png)\n\n#### Spacing between title, text and buttons\n\n![](./doc/img/mg-modal-spaces-slot.png)\n![](./doc/img/mg-modal-spaces-slot-title.png)\n\n#### Spacing between the title and the cross button\n\n![](./doc/img/mg-modal-spaces-title.png)\n![](./doc/img/mg-modal-spaces-title-multiline.png)\n\n### Alignments\n\n![](./doc/img/mg-modal-alignments.png)\n\n### Sizes\n\n![](./doc/img/mg-modal-sizes.png)\n\n### Colors\n\n![](./doc/img/mg-modal-colors.png)\n\n### Backdrop\n\nColor: [@color-light](./?path=/docs/style-colors--docs) with an opacity set to 85%.\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-modal-border-radius`: Define border radius modal, default: `0.5rem`\n- `--mg-c-modal-title-font-size`: Define modal title font size, default: `1.8rem`\n- `--mg-c-modal-content-font-size`: Define modall content font size, default: `1.2rem`\n\nPlease note that the mg-modal component uses the [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) component. This means that you can benefit from the CSS variables of [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) to customize mg-modal. You can easily change padding, border-radius, etc. Use this feature to seamlessly adapt mg-modal to your design.\n\n## Hide component\n\nTo hide the component, you must use the native `hidden` attribute.\n",
      "docs": "A modal has:\n\n- a closing cross at the top right corner\n- a title\n- a body composed of fields or a message\n- a validation button\n- a cancel button",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if modal has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dialogRole",
          "type": "\"alertdialog\" | \"dialog\"",
          "complexType": {
            "original": "DialogRoleType",
            "resolved": "\"alertdialog\" | \"dialog\"",
            "references": {
              "DialogRoleType": {
                "location": "import",
                "path": "./mg-modal.conf",
                "id": "src/components/molecules/mg-modal/mg-modal.conf.ts::DialogRoleType"
              }
            }
          },
          "mutable": false,
          "attr": "dialog-role",
          "reflectToAttr": false,
          "docs": "Modal dialog role.",
          "docsTags": [],
          "default": "dialogRoles[0]",
          "values": [
            {
              "value": "alertdialog",
              "type": "string"
            },
            {
              "value": "dialog",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-modal')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "modal-title",
          "reflectToAttr": false,
          "docs": "Displayed modal title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-card",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-modal": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-pagination/mg-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "mg-pagination",
      "readme": "## Anatomy\n\n![](./doc/img/mg-pagination-nav-anatomy.png)\n\n## Specs\n\n![](./doc/img/mg-pagination-nav-specs.png)\n\nIt's possible to hide the labels \"prev\" and \"next\" to show only the \"chevron\" icons\n\n![](./doc/img/mg-pagination-nav-label-hide.png)\n\nIt's possible to hide the page count to show only the \"chevron\" icons\n\n![](./doc/img/mg-pagination-nav-select-hide.png)\n\n## When to use it ?\n\nA pagination component should be displayed only when it is useful, for example:\n\nWhen the number of pages is greater than 1.\nWhen there are elements to be displayed.\n",
      "docs": "![](./doc/img/mg-pagination-nav-anatomy.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": true,
          "docs": "Component current page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideNavigationLabels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-navigation-labels",
          "reflectToAttr": false,
          "docs": "Hide navigation label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hidePageCount",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-page-count",
          "reflectToAttr": false,
          "docs": "Hide select input",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-pagination')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Panignation label. Is a short description.\nCustomize default value can be usefull to improve accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "Component total pages",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "current-page-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when current page change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox-paginated"
      ],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-select"
      ],
      "dependencyGraph": {
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-select": [
          "mg-input"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input-checkbox-paginated": [
          "mg-pagination"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-panel/mg-panel.tsx",
      "encapsulation": "shadow",
      "tag": "mg-panel",
      "readme": "## Behavior\n\nThe left zone of the header displays the item label, this zone is clickable and allows the user to unfold/fold the panel.\nIf no content is available, the panel cannot be unfolded.\nWhen the panel is unfolded, the icon is vertically inverted.\n\nThe right area of the header can accommodate any component.\n\n## Anatomy\n\n![](./doc/img/mg-panel-anatomy.png)\n\n## Specs\n\n### Sizing\n\n![](./doc/img/mg-panel-sizing.png)\n\n### Spacing\n\n![](./doc/img/mg-panel-spacing.png)\n\nSlot content padding can be customized using the --mg-c-panel-content-padding CSS variable, default is 15px.\n\n### Alignments\n\n![](./doc/img/mg-panel-align.png)\n\n### Styles\n\n![](./doc/img/mg-panel-style.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-panel-border-radius`: Define panel border radius, default: `0.5rem`\n- `--mg-c-panel-background`: Define panel background, default: `var(--mg-b-color-info-h) var(--mg-b-color-info-s) calc(var(--mg-b-color-info-l) + 68%)`\n- `--mg-c-panel-box-shadow`: Define panel box shadow, default: `var(--mg-b-box-shadow)`\n- `--mg-c-panel-content-padding`: Define panel content padding, default: `1.5rem`\n\nPlease note that the mg-panel component uses the [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) component. This means that you can benefit from the CSS variables of [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) to customize mg-panel. You can easily change padding, border-radius, etc. Use this feature to seamlessly adapt mg-panel to your design.\n",
      "docs": "The left zone of the header displays the item label, this zone is clickable and allows the user to unfold/fold the panel.\nIf no content is available, the panel cannot be unfolded.\nWhen the panel is unfolded, the icon is vertically inverted.\n\nThe right area of the header can accommodate any component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expandToggleDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expand-toggle-disabled",
          "reflectToAttr": false,
          "docs": "Disable possibility to toggle expand",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expandToggleDisplay",
          "type": "\"icon\" | \"text\"",
          "complexType": {
            "original": "ExpandToggleDisplayType",
            "resolved": "\"icon\" | \"text\"",
            "references": {
              "ExpandToggleDisplayType": {
                "location": "import",
                "path": "./mg-panel.conf",
                "id": "src/components/molecules/mg-panel/mg-panel.conf.ts::ExpandToggleDisplayType"
              }
            }
          },
          "mutable": false,
          "attr": "expand-toggle-display",
          "reflectToAttr": false,
          "docs": "Define expand toggle button display",
          "docsTags": [],
          "default": "expandToggleDisplays[0]",
          "values": [
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Panel is opened",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-panel')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "panel-title",
          "reflectToAttr": false,
          "docs": "Panel title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "titleEditable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "title-editable",
          "reflectToAttr": false,
          "docs": "Define if panel title is editable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titlePattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title-pattern",
          "reflectToAttr": false,
          "docs": "Panel title pattern",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "titlePatternErrorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title-pattern-error-message",
          "reflectToAttr": false,
          "docs": "Panel title pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "titlePosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "TitlePositionType",
            "resolved": "\"left\" | \"right\"",
            "references": {
              "TitlePositionType": {
                "location": "import",
                "path": "./mg-panel.conf",
                "id": "src/components/molecules/mg-panel/mg-panel.conf.ts::TitlePositionType"
              }
            }
          },
          "mutable": false,
          "attr": "title-position",
          "reflectToAttr": false,
          "docs": "Define title position",
          "docsTags": [],
          "default": "titlePositions[0]",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "expanded-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPanelElement['expanded']",
            "resolved": "boolean",
            "references": {
              "HTMLMgPanelElement": {
                "location": "global",
                "id": "global::HTMLMgPanelElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when expanded change",
          "docsTags": []
        },
        {
          "event": "title-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPanelElement['panelTitle']",
            "resolved": "string",
            "references": {
              "HTMLMgPanelElement": {
                "location": "global",
                "id": "global::HTMLMgPanelElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when title change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-text",
        "mg-card"
      ],
      "dependencyGraph": {
        "mg-panel": [
          "mg-button",
          "mg-icon",
          "mg-input-text",
          "mg-card"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-input",
          "mg-icon",
          "mg-character-left"
        ],
        "mg-input": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title"
        ],
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-popover/mg-popover.tsx",
      "encapsulation": "shadow",
      "tag": "mg-popover",
      "readme": "## Usage\n\nA popover is more enhanced than a tooltip but less blocking than a modal.\n\n## Behavior\n\nThe window is displayed when clicking on its trigger.\n\nThe window is displayed next to its trigger, usually below it. A triangle (in css) makes the link between the trigger and the window.\n\nThe window closes:\n\n- when clicking on its trigger\n- clicking outside the window\n- when the ESC key is pressed\n- when clicking on the close button at the top right corner\n\nThe size of the window is determined by the content (set a maximum size to avoid problems).\n\nThe title and the close button are optional.\n\n## Specs\n\n### Fonts\n\n![](./doc/img/mg-popover-fonts.png)\n\n### Spacing\n\n![](./doc/img/mg-popover-spacing.png)\n\n### Sizing\n\n![](./doc/img/mg-popover-sizing.png)\n\nDefault max-width: 400px\nThe value of the max-width can be modified according to the case via the CSS variable.\n\n### Alignments\n\n![](./doc/img/mg-popover-align.png)\n\n### Positioning\n\n#### Item\n\n![](./doc/img/mg-popover-position.png)\n\n#### Screen\n\n![](./doc/img/mg-popover-position-screen.png)\n\n### Style\n\n![](./doc/img/mg-popover-style.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-popover-background-color`: Define popover background color, default: `var(--mg-b-color-light)`\n- `--mg-c-popover-font-color`: Define popover font color, default: `var(--mg-b-color-font-dark)`\n- `--mg-c-popover-title-font-size`: Define popover title font size, default: `1.4rem`\n- `--mg-c-popover-padding-vertical`: Define popover vertical padding, default: `1.5rem`\n- `--mg-c-popover-padding-horizontal`: Define popover horizontal padding, default: `--mg-c-popover-padding-vertical`\n- `--mg-c-popover-max-width`: Define the popover max-width. Default: `40rem`;\n- `--mg-c-popover-min-width`: Define the popover min-width. Default: `unset`;\n\nPlease note that the mg-popover component uses the [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) component. This means that you can benefit from the CSS variables of [mg-card](./?path=/docs/atoms-mg-card--mg-c-card) to customize mg-popover. You can easily change padding, border-radius, etc. Use this feature to seamlessly adapt mg-popover to your design.\n",
      "docs": "A popover is more enhanced than a tooltip but less blocking than a modal.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "arrowHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow-hide",
          "reflectToAttr": false,
          "docs": "Hide popover arrow",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if popover has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-popover')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Popover placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "display-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgPopoverElement['display']",
            "resolved": "boolean",
            "references": {
              "HTMLMgPopoverElement": {
                "location": "global",
                "id": "global::HTMLMgPopoverElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when display value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-action-more",
        "mg-input-checkbox",
        "mg-menu-item"
      ],
      "dependencies": [
        "mg-popover-content"
      ],
      "dependencyGraph": {
        "mg-popover": [
          "mg-popover-content"
        ],
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-action-more": [
          "mg-popover"
        ],
        "mg-input-checkbox": [
          "mg-popover"
        ],
        "mg-menu-item": [
          "mg-popover"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-popover/mg-popover-content/mg-popover-content.tsx",
      "encapsulation": "shadow",
      "tag": "mg-popover-content",
      "readme": "# mg-popover-content\n\nIn order to adhere to the ARIA popover pattern, which is essential for accessibility, we need to retrieve the popover content from outside the `mg-popover` shadow root.\n\nThe `mg-popover-content` component is appended to the `mg-popover` component as a slot when the component is loaded. It receives the popover content as slots and manages the popover's style.\n",
      "docs": "In order to adhere to the ARIA popover pattern, which is essential for accessibility, we need to retrieve the popover content from outside the `mg-popover` shadow root.\n\nThe `mg-popover-content` component is appended to the `mg-popover` component as a slot when the component is loaded. It receives the popover content as slots and manages the popover's style.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if popover has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "hide-content",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when close button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-popover"
      ],
      "dependencies": [
        "mg-card",
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-popover-content": [
          "mg-card",
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-popover": [
          "mg-popover-content"
        ]
      }
    },
    {
      "filePath": "src/components/molecules/mg-skip-links/mg-skip-links.tsx",
      "encapsulation": "shadow",
      "tag": "mg-skip-links",
      "readme": "## Behavior\n\nOn the first tab, a banner with the link(s) is displayed by pushing the content down.\n\nThe number of links will be added according to the content of the page.\n\n## Specs\n\n### Sizing\n\nThe minimum height of the banner is 55px.\n\n### Spacing\n\nItems have an internal margin of 12px and are spaced 6px apart.\n\n### Styling\n\n- The links are in [@color-dark](./?path=/docs/style-colors--docs).\n- The background of the banner is in [@color-light](./?path=/docs/style-colors--docs).\n\n#### On hover\n\nThe background of the item takes the color [@color-dark](./?path=/docs/style-colors--docs) at 10% opacity.\n\n#### Focus taking\n\nNative browser behavior is retained.\n\n## Code example\n\nYou need to press <kbd>Tab</kbd> in the code example to see the component.\n\n## Integration\n\nThe `mg-skip-links` must be integrated at the very top of your page to be the first focusable element.\n\n## Implementation with a \"#\" based router\n\n`mg-skip-links` uses native anchor behavior, but if your site/app uses a \"#\" link-based router, like AngularJS does, you'll need to use the \"go-to-anchor\" component event. This event returns its detail property to the target anchor, then you can apply the scrollTo anchor behavior:\n\n- if the anchor is in the same window, with native javascript:\n\n```js\nconst goToAnchor = (anchor) => {\n    const top = document.querySelector(anchor).offsetTop;\n    window.scrollTo(0, top);\n\n    // set focus on next element to put keyboard navigation at the right place\n    anchor.focus();\n}\n\n// optionaly you can use a timeout to wait document ready\nsetTimeout(()=> {\n    // you must add listener on skip links element to prevent redirection\n    Array.from(document.querySelector('mg-skip-links').shadowRoot.querySelectorAll('a')).forEach(anchor => {\n        anchor.addEventListener('click', event => {\n            event.preventDefault();\n        })\n    })​\n})\n```\n\n- in case the anchor is in another window, with the [iframeRisizer's moveToAnchor method](https://github.com/davidjbradshaw/iframe-resizer/blob/master/docs/parent_page/methods.md#movetoanchoranchor)\n",
      "docs": "On the first tab, a banner with the link(s) is displayed by pushing the content down.\n\nThe number of links will be added according to the content of the page.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "links",
          "type": "SkipLink[]",
          "complexType": {
            "original": "SkipLink[]",
            "resolved": "SkipLink[]",
            "references": {
              "SkipLink": {
                "location": "import",
                "path": "./mg-skip-links.conf",
                "id": "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx::SkipLink"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Skip links",
          "docsTags": [],
          "values": [
            {
              "type": "SkipLink[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "go-to-anchor",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when link is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/molecules/mg-tabs/mg-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tabs",
      "readme": "## Anatomy\n\n![](./doc/img/mg-tabs-anatomy.png)\n\n## Specs\n\n### Spacing\n\n- Regular\n  - X = 20px;\n  - Y = 10px;\n- Large\n  - X = 30px;\n  - Y = 15px;\n\n![](./doc/img/mg-tabs-spacing.png)\n\n- if only text, no extra spacing,\n- if no badge: no extra spacing on the right\n- if only icon: no extra spacing on the right\n\n### Sizing\n\n![](./doc/img/mg-tabs-sizing.png)\n\nThe header bottom border is 100% wide, 1px sizing and its color is @color-dark-soft. You can override it with [CSS variable](./?path=/docs/molecules-mg-tabs--docs#css-variables).\n\n![](./doc/img/mg-tabs-header-border.png)\n\n### States\n\n![](./doc/img/mg-tabs-states.png)\n\n### Responsive\n\n#### Line breaks (current management)\n\n![](./doc/img/mg-tabs-responsive.png)\n\n## CSS variables\n\nIf needed some [variables](./?path=/story/css-variables--page) are available to customize the component:\n\n- `--mg-c-tabs-border-bottom`: define tabs header border-bottom. Default: `solid 0.1rem var(--mg-b-color-dark-soft)`.\n",
      "docs": "![](./doc/img/mg-tabs-anatomy.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "active-tab",
          "reflectToAttr": true,
          "docs": "Active tab number",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-tabs')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "TabItem[] | string[]",
          "complexType": {
            "original": "string[] | TabItem[]",
            "resolved": "TabItem[] | string[]",
            "references": {
              "TabItem": {
                "location": "import",
                "path": "./mg-tabs.conf",
                "id": "src/components/molecules/mg-tabs/mg-tabs.conf.ts::TabItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Tabs items",
          "docsTags": [],
          "values": [
            {
              "type": "TabItem[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Tabs label. Include short tabs description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "\"large\" | \"regular\"",
          "complexType": {
            "original": "SizeType",
            "resolved": "\"large\" | \"regular\"",
            "references": {
              "SizeType": {
                "location": "import",
                "path": "./mg-tabs.conf",
                "id": "src/components/molecules/mg-tabs/mg-tabs.conf.ts::SizeType"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define tabs size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "active-tab-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "HTMLMgTabsElement['activeTab']",
            "resolved": "number",
            "references": {
              "HTMLMgTabsElement": {
                "location": "global",
                "id": "global::HTMLMgTabsElement"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when active tab change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-badge"
      ],
      "dependencyGraph": {
        "mg-tabs": [
          "mg-icon",
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-tag/mg-tag.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tag",
      "readme": "## Specs\n\n![](./doc/img/mg-tag-specs.png)\n\n### Fill / Outline tags\n\n#### Colors\n\n![](./doc/img/mg-tag-colors.png)\n\nIcons take the color of the label.\n\n### Soft tags\n\n#### Font\n\n![](./doc/img/mg-tag-font.png)\n\nThey are not on SemiBold but **Regular**.\n\n#### Colors\n\n![](./doc/img/mg-tag-icons-colors.png)\n\n1. Icons takes the color of the tag variant.\n2. Labels are [**@color-dark**](./?path=/docs/style-colors--docs) for all.\n3. Color background is **[**soft color**](./?path=/docs/style-colors--docs)** of the tag variant.\n\n#### Rules\n\n![](./doc/img/mg-tag-use.png)\n\nFor accessibility, soft variant tags cannot use an icon on its own.\n\n## Theming\n\n![](./doc/img/mg-tag-variants.png)\n\n### With Icons\n\n![](./doc/img/mg-tag-icons.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n### Global\n\n- `--mg-c-tag-height`: Define tag min height, default: `2.3rem`\n- `--mg-c-tag-border-radius`: Define tag border radius, default: `0.5rem`\n- `--mg-c-tag-font-size`: Define tag font size, default: `1.2rem`\n\n### Variant\n\nVariants `primary`, `secondary`, `success`, `warning`, `danger`, `info` can be customized by changing the global [colors](./?path=/docs/style-colors--docs).\n",
      "docs": "![](./doc/img/mg-tag-specs.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if tag is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "soft",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "soft",
          "reflectToAttr": false,
          "docs": "Define if tag is using soft style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "TagVariantType",
            "resolved": "\"danger\" | \"info\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "TagVariantType": {
                "location": "import",
                "path": "./mg-tag.conf",
                "id": "src/components/atoms/mg-tag/mg-tag.conf.ts::TagVariantType"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define tag variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/atoms/mg-tooltip/mg-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tooltip",
      "readme": "## Usage\n\nTooltips are messages that provide additional information about an element.\nThey are presented as a message that appears when an element is hovered over or when the keyboard is focused.\nTooltips are called \"custom\" when they are not built on the basis of the standard HTML code provided for these elements by the specification: the title attribute.\nOur \"custom tooltip\" component is called \"tooltip\" here.\n\n## Behavior\n\nThe tooltip must be displayed when the element that allows its display:\n\n- Is hovered over by the mouse.\n- Takes the keyboard focus.\n\nThe tooltip must be hidden when the element that allows its display:\n\n- Is no longer hovered over by the mouse.\n- Loses the keyboard focus.\n- Pressing the Escape key must hide the tooltip.\n\nThe tooltip must remain displayed when its content is hovered over by the mouse.\n\nThe tooltip can be placed above, to the right, below or to the left of the element it describes.\n\nBy default, the message is displayed at the bottom of the element.\n\nIf the element is located at the edge of the screen, the tooltip is shifted to be always visible.\n\n## Specs\n\n### Shapes\n\n![](./doc/img/mg-tooltip-shape.png)\n\n### Fonts\n\n![](./doc/img/mg-tooltip-font.png)\n\n### Spacing\n\n![](./doc/img/mg-tooltip-spaces.png)\n\n### Alignments\n\n![](./doc/img/mg-tooltip-alignments-text.png)\n\n### Positioning\n\nTriangle is always centered on the call component\n\n![](./doc/img/mg-tooltip-positioning.png)\n![](./doc/img/mg-tooltip-positioning2.png)\n\n### Colors\n\n![](./doc/img/mg-tooltip-colors.png)\n\n### Sizes\n\n![](./doc/img/mg-tooltip-sizing.png)\n\nComponent's max-width is 400px.\n\n![](./doc/img/mg-tooltip-max-width.png)\n\n## CSS Variables\n\nIf needed some [variables](./?path=/docs/css-variables--docs) are available to customize the component:\n\n- `--mg-c-tooltip-border-radius`: Define tooltip border radius, default: `0.5rem`\n- `--mg-c-tooltip-background-color`: Define tooltip background color, default: `--mg-b-color-dark`\n- `--mg-c-tooltip-font-color`: Define tooltip font color, default: `--mg-b-color-font-light`\n",
      "docs": "Tooltips are messages that provide additional information about an element.\nThey are presented as a message that appears when an element is hovered over or when the keyboard is focused.\nTooltips are called \"custom\" when they are not built on the basis of the standard HTML code provided for these elements by the specification: the title attribute.\nOur \"custom tooltip\" component is called \"tooltip\" here.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-tooltip')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Displayed message in the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "@popperjs/core",
                "id": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Tooltip placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input",
        "mg-input-checkbox-paginated"
      ],
      "dependencies": [
        "mg-tooltip-content"
      ],
      "dependencyGraph": {
        "mg-tooltip": [
          "mg-tooltip-content"
        ],
        "mg-input": [
          "mg-tooltip"
        ],
        "mg-input-checkbox-paginated": [
          "mg-tooltip"
        ]
      }
    },
    {
      "filePath": "src/components/atoms/mg-tooltip/mg-tooltip-content/mg-tooltip-content.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tooltip-content",
      "readme": "# mg-tooltip-content\n\nIn order to adhere to the ARIA tooltip pattern, which is essential for accessibility, we need to retrieve the tooltip content from outside the `mg-tooltip` shadow root.\n\nThe `mg-tooltip-content` component is appended to the `mg-tooltip` component as a slot when the component is loaded. It receives the tooltip content as props and manages the tooltip's style.\n",
      "docs": "In order to adhere to the ARIA tooltip pattern, which is essential for accessibility, we need to retrieve the tooltip content from outside the `mg-tooltip` shadow root.\n\nThe `mg-tooltip-content` component is appended to the `mg-tooltip` component as a slot when the component is loaded. It receives the tooltip content as props and manages the tooltip's style.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "message",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Displayed message in the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-tooltip"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-tooltip": [
          "mg-tooltip-content"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/atoms/mg-badge/mg-badge.conf.ts::BadgeVariantType": {
      "declaration": "\"info\" | \"success\" | \"primary\" | \"secondary\" | \"warning\" | \"danger\" | \"text-color\"",
      "docstring": "",
      "path": "src/components/atoms/mg-badge/mg-badge.conf.ts"
    },
    "src/components/atoms/mg-button/mg-button.conf.ts::VariantType": {
      "declaration": "\"flat\" | \"info\" | \"success\" | \"link\" | \"primary\" | \"secondary\" | \"danger\" | \"danger-alt\"",
      "docstring": "",
      "path": "src/components/atoms/mg-button/mg-button.conf.ts"
    },
    "src/components/atoms/mg-button/mg-button.conf.ts::ButtonType": {
      "declaration": "\"button\" | \"submit\" | \"reset\"",
      "docstring": "",
      "path": "src/components/atoms/mg-button/mg-button.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconType": {
      "declaration": "\"filter\" | \"copy\" | \"link\" | \"picture\" | \"table\" | \"circle\" | \"download\" | \"history\" | \"location\" | \"key\" | \"loader\" | \"address-card\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"api\" | \"archive\" | \"archive-outline\" | \"arrow-clock\" | \"arrow-down\" | \"arrow-down-a-z\" | \"arrow-down-right\" | \"arrow-left\" | \"arrow-right\" | \"arrow-rotate\" | \"arrow-rotate-backward\" | \"arrow-up\" | \"arrow-up-right\" | \"arrow-up-right-square\" | \"arrow-up-z-a\" | \"arrows-compare\" | \"arrows-right-down\" | \"arrows-right-left\" | \"arrows-rotate\" | \"arrows-rotate-backward\" | \"ban\" | \"bell\" | \"bell-outline\" | \"book\" | \"book-outline\" | \"briefcase\" | \"briefcase-outline\" | \"building-outline\" | \"calculator\" | \"calendar\" | \"calendar-euro\" | \"calendar-euro-outline\" | \"calendar-outline\" | \"check\" | \"check-circle\" | \"check-circle-outline\" | \"chevron-down\" | \"chevron-down-circle\" | \"chevron-left\" | \"chevron-left-circle\" | \"chevron-right\" | \"chevron-right-circle\" | \"chevron-up\" | \"chevron-up-circle\" | \"clock\" | \"clock-outline\" | \"code-square-outline\" | \"cog\" | \"cog-outline\" | \"comment\" | \"comment-outline\" | \"comment-sms\" | \"conversation\" | \"conversation-outline\" | \"copy-file\" | \"copy-file-outline\" | \"copy-outline\" | \"credit-card\" | \"cross\" | \"cross-circle\" | \"cross-circle-outline\" | \"dashboard\" | \"dashboard-outline\" | \"earth\" | \"earth-outline\" | \"ellipsis\" | \"ellipsis-vertical\" | \"euro\" | \"euro-circle\" | \"exclamation-circle\" | \"exclamation-circle-outline\" | \"exclamation-stamp\" | \"exclamation-triangle\" | \"exclamation-triangle-outline\" | \"eye\" | \"eye-slash\" | \"fax\" | \"fax-outline\" | \"file\" | \"file-cog\" | \"file-download\" | \"file-excel\" | \"file-excel-outline\" | \"file-outline\" | \"file-pdf\" | \"file-pdf-outline\" | \"file-text\" | \"file-text-outline\" | \"file-upload\" | \"file-word\" | \"file-word-outline\" | \"filter-outline\" | \"floppy-disk\" | \"floppy-disk-outline\" | \"folder\" | \"folder-check\" | \"folder-check-outline\" | \"folder-lines\" | \"folder-lines-outline\" | \"folder-link\" | \"folder-link-outline\" | \"folder-outline\" | \"folder-star\" | \"folders\" | \"folders-outline\" | \"gavel\" | \"gavel-outline\" | \"graduation-cap\" | \"graduation-cap-outline\" | \"hand-up\" | \"home\" | \"home-outline\" | \"info-circle\" | \"info-circle-outline\" | \"interrogation-circle\" | \"interrogation-circle-outline\" | \"laptop\" | \"life-ring\" | \"lines-rectangle\" | \"lines-rectangle-outline\" | \"list\" | \"location-outline\" | \"lock\" | \"lock-outline\" | \"log-in\" | \"log-out\" | \"magnifying-glass\" | \"mail\" | \"mail-outline\" | \"messages-square\" | \"messages-square-outline\" | \"mobile\" | \"mobile-outline\" | \"notes\" | \"notes-outline\" | \"paper-plane\" | \"paper-plane-slash\" | \"paperclip\" | \"pen\" | \"pen-circle\" | \"pen-fancy\" | \"pen-fancy-files-outline\" | \"pen-fancy-outline\" | \"pen-outline\" | \"phone\" | \"phone-outline\" | \"picture-outline\" | \"play-circle\" | \"plus\" | \"plus-circle\" | \"share\" | \"share-outline\" | \"shuffle\" | \"sitemap\" | \"sliders\" | \"sliders-outline\" | \"squares\" | \"star\" | \"star-outline\" | \"tag\" | \"tags\" | \"thumb-down\" | \"thumb-down-outline\" | \"thumb-up\" | \"thumb-up-outline\" | \"thumbtack\" | \"thumbtack-outline\" | \"trash\" | \"trash-outline\" | \"universal-access\" | \"unlink\" | \"unlock\" | \"unlock-outline\" | \"upload\" | \"user\" | \"user-circle\" | \"user-group\" | \"user-lock\" | \"user-outline\" | \"user-pen-fancy-outline\" | \"user-plus\" | \"user-question-outline\" | \"user-shield-outline\" | \"users\" | \"users-outline\" | \"wallet\" | \"wallet-outline\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconSizeType": {
      "declaration": "\"small\" | \"regular\" | \"medium\" | \"large\" | \"extra-large\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"app\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/atoms/mg-icon/mg-icon.conf.ts::IconVariantStyleType": {
      "declaration": "\"icon\" | \"background\" | \"full\"",
      "docstring": "",
      "path": "src/components/atoms/mg-icon/mg-icon.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::Direction": {
      "declaration": "export enum Direction {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal',\n}",
      "docstring": "Menu direction type",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::ItemMoreType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/menu/mg-menu/mg-menu.conf.ts::MenuSizeType": {
      "declaration": "\"regular\" | \"medium\" | \"large\"",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu/mg-menu.conf.ts"
    },
    "src/components/molecules/mg-item-more/mg-item-more.conf.ts::IconType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-item-more/mg-item-more.conf.ts"
    },
    "src/components/molecules/mg-item-more/mg-item-more.conf.ts::SlotLabelType": {
      "declaration": "{\n  label?: string;\n  display?: boolean;\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-item-more/mg-item-more.conf.ts"
    },
    "src/components/molecules/mg-item-more/mg-item-more.conf.ts::SizeType": {
      "declaration": "\"regular\" | \"medium\" | \"large\"",
      "docstring": "",
      "path": "src/components/molecules/mg-item-more/mg-item-more.conf.ts"
    },
    "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts::Placement": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/index.d.ts"
    },
    "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::TargetType": {
      "declaration": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\"",
      "docstring": "",
      "path": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts"
    },
    "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts::Status": {
      "declaration": "export enum Status {\n  VISIBLE = 'visible',\n  HIDDEN = 'hidden',\n  DISABLED = 'disabled',\n  ACTIVE = 'active',\n}",
      "docstring": "Available menu item status",
      "path": "src/components/molecules/menu/mg-menu-item/mg-menu-item.conf.ts"
    },
    "src/components/atoms/mg-card/mg-card.conf.ts::VariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\" | \"app\"",
      "docstring": "",
      "path": "src/components/atoms/mg-card/mg-card.conf.ts"
    },
    "src/components/atoms/mg-card/mg-card.conf.ts::VariantStyleType": {
      "declaration": "\"fill\" | \"bar-left\"",
      "docstring": "",
      "path": "src/components/atoms/mg-card/mg-card.conf.ts"
    },
    "src/components/atoms/mg-tag/mg-tag.conf.ts::TagVariantType": {
      "declaration": "\"info\" | \"success\" | \"primary\" | \"secondary\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/components/atoms/mg-tag/mg-tag.conf.ts"
    },
    "src/components/molecules/inputs/mg-input/mg-input.conf.ts::TooltipPosition": {
      "declaration": "\"input\" | \"label\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input/mg-input.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxValue": {
      "declaration": "export interface CheckboxValue {\n  title: string;\n  value: boolean | null;\n  disabled?: boolean;\n  required?: boolean;\n}",
      "docstring": "interface CheckboxValue\nuse to match returned value",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxType": {
      "declaration": "\"checkbox\" | \"multi\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::CheckboxItem": {
      "declaration": "export interface CheckboxItem extends CheckboxValue {\n  _id: string;\n  _handleInput: (event: InputEvent & { target: HTMLInputElement }) => void;\n  _handleBlur: () => void;\n  _handleKeydown: (event: KeyboardEvent & { target: HTMLElement }) => void;\n}",
      "docstring": "interface CheckboxItem\nuse to match checkbox attributes",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts::SectionKind": {
      "declaration": "export enum SectionKind {\n  SELECTED = 'selected',\n  NOT_SELECTED = 'not-selected',\n}",
      "docstring": "mg-input-checkbox-paginated section kind",
      "path": "src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf.ts"
    },
    "src/components/molecules/inputs/mg-input/mg-input.conf.ts::Width": {
      "declaration": "2 | 4 | 16 | \"full\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input/mg-input.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::NumericType": {
      "declaration": "\"decimal\" | \"integer\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts::Format": {
      "declaration": "\"number\" | \"none\" | \"currency\"",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts::RadioOption": {
      "declaration": "{\n  title: string;\n  value: unknown;\n  disabled?: boolean;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-radio/mg-input-radio.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts::SelectOption": {
      "declaration": "{\n  title: string;\n  value: unknown;\n  disabled?: boolean;\n  group?: string;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-select/mg-input-select.conf.ts"
    },
    "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts::TextType": {
      "declaration": "export type TextType = 'text' | 'search';",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-text/mg-input-text.conf.ts"
    },
    "src/components.d.ts::IconType": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components.d.ts"
    },
    "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts::ToggleValue": {
      "declaration": "{\n  title: string;\n  value: unknown;\n}",
      "docstring": "",
      "path": "src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreItemType": {
      "declaration": "export type MgActionMoreItemType = Pick<MgMenuItem, 'status' | 'href' | 'target'> & {\n  label: string;\n  mouseEventHandler: IMouseEventHandler;\n  icon?: MgIcon['icon'];\n  badge?: Pick<MgBadge, 'value' | 'label'>;\n};",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreIconType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-action-more/mg-action-more.conf.ts::MgActionMoreButtonType": {
      "declaration": "{\n    [P in K]: T[P];\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-action-more/mg-action-more.conf.ts"
    },
    "src/components/molecules/mg-form/mg-form.conf.ts::RequiredMessageStatusType": {
      "declaration": "\"default\" | \"hide\"",
      "docstring": "",
      "path": "src/components/molecules/mg-form/mg-form.conf.ts"
    },
    "src/components/molecules/mg-form/mg-form.conf.ts::AriaRoleType": {
      "declaration": "\"none\" | \"form\" | \"search\" | \"presentation\"",
      "docstring": "",
      "path": "src/components/molecules/mg-form/mg-form.conf.ts"
    },
    "src/components/molecules/mg-message/mg-message.conf.ts::VariantType": {
      "declaration": "\"info\" | \"success\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/components/molecules/mg-message/mg-message.conf.ts"
    },
    "src/components/molecules/mg-modal/mg-modal.conf.ts::DialogRoleType": {
      "declaration": "\"dialog\" | \"alertdialog\"",
      "docstring": "",
      "path": "src/components/molecules/mg-modal/mg-modal.conf.ts"
    },
    "src/components/molecules/mg-panel/mg-panel.conf.ts::TitlePositionType": {
      "declaration": "\"right\" | \"left\"",
      "docstring": "",
      "path": "src/components/molecules/mg-panel/mg-panel.conf.ts"
    },
    "src/components/molecules/mg-panel/mg-panel.conf.ts::ExpandToggleDisplayType": {
      "declaration": "\"text\" | \"icon\"",
      "docstring": "",
      "path": "src/components/molecules/mg-panel/mg-panel.conf.ts"
    },
    "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx::SkipLink": {
      "declaration": "{\n  href: string;\n  label: string;\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-skip-links/mg-skip-links.conf.tsx"
    },
    "src/components/molecules/mg-tabs/mg-tabs.conf.ts::SizeType": {
      "declaration": "\"regular\" | \"large\"",
      "docstring": "",
      "path": "src/components/molecules/mg-tabs/mg-tabs.conf.ts"
    },
    "src/components/molecules/mg-tabs/mg-tabs.conf.ts::TabItem": {
      "declaration": "{\n  label: string;\n  icon?: MgIcon['icon'];\n  badge?: Pick<MgBadge, 'value' | 'variant' | 'label'> & { role: 'notification' | 'information' };\n  status: Status;\n}",
      "docstring": "",
      "path": "src/components/molecules/mg-tabs/mg-tabs.conf.ts"
    }
  }
}