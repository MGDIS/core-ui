image: $DOCKER_REGISTRE_URL/$DOCKER_REGISTRE_NAMESPACE_INT/node:22-build

default:
  interruptible: true # allows to cancel the job automatically

stages:
  - tests
  - artifacts
  - mg-components
  - release

##############
# References #
##############

.changes:
  helpers: 'packages/helpers/**/*'
  img: 'packages/img/**/*'
  linting-angularjs: 'packages/linting-angularjs/**/*'
  linting-stencil: 'packages/linting-stencil/**/*'
  linting-styles: 'packages/linting-styles/**/*'
  mg-components: 'packages/mg-components/**/*'
  mg-components-helpers: 'packages/mg-components-helpers/**/*'
  notification-center: 'packages/notification-center/**/*'
  notification-center:app: 'apps/notification-center/**/*'
  playwright-helpers: 'packages/playwright-helpers/**/*'
  sanitize-html: 'packages/sanitize-html/**/*'
  stencil-helpers: 'packages/stencil-helpers/**/*'
  styles: 'packages/styles/**/*'

.rules:changes:
  helpers:
    changes:
      - !reference [.changes, helpers]
  img:
    changes:
      - !reference [.changes, img]
  linting-angularjs:
    changes:
      - !reference [.changes, linting-angularjs]
  linting-stencil:
    changes:
      - !reference [.changes, linting-stencil]
  linting-styles:
    changes:
      - !reference [.changes, linting-styles]
  mg-components:
    changes:
      - !reference [.changes, mg-components]
      - !reference [.changes, img]
      - !reference [.changes, helpers]
      - !reference [.changes, styles]
      - !reference [.changes, linting-stencil]
  notification-center:
    changes:
      - !reference [.changes, notification-center]
      - !reference [.changes, notification-center:app]
      - !reference [.changes, mg-components]
      - !reference [.changes, helpers]
      - !reference [.changes, sanitize-html]
  playwright-helpers:
    changes:
      - !reference [.changes, helpers]
      - !reference [.changes, playwright-helpers]
  sanitize-html:
    changes:
      - !reference [.changes, sanitize-html]
  stencil-helpers:
    changes:
      - !reference [.changes, helpers]
      - !reference [.changes, stencil-helpers]
  styles:
    changes:
      - !reference [.changes, styles]
      - !reference [.changes, helpers]
  e2e:
    changes:
      - !reference [.changes, mg-components]
      - !reference [.changes, notification-center]
      - !reference [.changes, styles]
      - !reference [.changes, img]
      - !reference [.changes, helpers]
      - !reference [.changes, linting-stencil]
      - !reference [.changes, notification-center:app]
      - !reference [.changes, sanitize-html]
  doc:
    changes:
      - !reference [.changes, helpers]
      - !reference [.changes, mg-components-helpers]
      - !reference [.changes, stencil-helpers]

.rules:if:
  except-tags: $CI_COMMIT_TAG == null && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_MERGE_REQUEST_ID)
  mr: $CI_MERGE_REQUEST_ID
  tags: $CI_COMMIT_TAG

###########
# Extends #
###########

# Rule to execute job only in merge request
.rules:mr:
  rules:
    - if: !reference [.rules:if, mr]

# Rule to execute job only if in tag creation pipeline
.rules:tags:
  rules:
    - if: !reference [.rules:if, tags]

# Rule to execute job only if not in tag creation pipeline and on master or in merge request
.rules:except-tags:
  rules:
    - if: !reference [.rules:if, except-tags]

# install dependencies
.install:dependencies:
  before_script:
    - corepack enable
    - npm i -g corepack@latest # https://github.com/pnpm/pnpm/issues/9029
    - pnpm i

###########
# Scripts #
###########

# artifact
.artifact:
  script:
    - version=`cat package.json | jq -r '.version'`-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
    - pnpm version --no-git-tag-version $version
    - pnpm publish --no-git-checks

# install JQ (for other images)
.install:jq:
  script:
    - apt update -y
    - apt install jq -y

#########
# tests #
#########

lint:
  stage: tests
  extends:
    - .rules:except-tags
    - .install:dependencies
  script:
    - pnpm lint

test:unit:
  stage: tests
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  extends:
    - .rules:except-tags
    - .install:dependencies
  script:
    - pnpm coverage
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - packages/**/coverage
    reports:
      junit:
        - packages/**/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: packages/**/cobertura-coverage.xml

test:doc:
  stage: tests
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, doc, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm build:packages
    - pnpm doc

playwright:baseimage:
  stage: tests
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, e2e, changes]
  extends:
    - .install:dependencies
  script:
    - export PLAYWRIGHT_BASEIMAGE=$(./scripts/get-playwright-version.sh)
    - echo "PLAYWRIGHT_BASEIMAGE=$PLAYWRIGHT_BASEIMAGE"  > playwright-baseimage.env
  artifacts:
    reports:
      dotenv: playwright-baseimage.env

test:e2e:
  stage: tests
  image: $DOCKER_REGISTRE_URL/mgdis/playwright-baseimage:$PLAYWRIGHT_BASEIMAGE
  parallel: 7
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, mg-components, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm test:e2e --filter='./packages/*' --filter=\!@mgdis/notification-center -- --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL
  artifacts:
    when: always
    paths:
      - packages/mg-components/playwright-report/
      - packages/mg-components/test-results/
      - packages/mg-components/results.xml
      - packages/styles/playwright-report/
      - packages/styles/test-results/
      - packages/styles/results.xml
    reports:
      junit:
        - packages/mg-components/results.xml
        - packages/styles/results.xml
  needs:
    - playwright:baseimage

test:e2e:notification-center:
  stage: tests
  image: $DOCKER_REGISTRE_URL/mgdis/playwright-baseimage:$PLAYWRIGHT_BASEIMAGE
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, notification-center, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm test:e2e --filter=@mgdis/notification-center
  retry: 2
  artifacts:
    when: always
    paths:
      - packages/notification-center/playwright-report/
      - packages/notification-center/test-results/
      - packages/notification-center/results.xml
    reports:
      junit:
        - packages/notification-center/results.xml
  needs:
    - playwright:baseimage

sonar:
  stage: tests
  variables:
    GIT_DEPTH: 0
    LC_ALL: 'C.UTF-8'
  extends:
    - .rules:except-tags
    - .install:dependencies
  script:
    - gitlabci-quality-gate A+++
    - sonar-scanner -D sonar.token=$SONAR_KEY
    - gitlabci-sonar-compare report
  needs:
    - test:unit

auto-review:
  stage: tests
  variables:
    DANGER_GITLAB_USE_THREADS: '1'
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\// # Exclude renovate MRs from thread creation
      variables:
        DANGER_GITLAB_USE_THREADS: '0'
    - if: $CI_MERGE_REQUEST_ID
  script:
    # use https://gitlab.mgdis.fr/build/gitlab/mg-danger
    - mg-danger
  allow_failure: true
  needs:
    - sonar

###########
# release #
###########

release:
  stage: release
  extends:
    - .rules:tags
    - .install:dependencies
  script:
    - pnpm build:packages
    - pnpm publish -r --no-git-checks

chromatic:mr:
  stage: release
  extends:
    - .rules:tags
  script:
    - sh scripts/open-merge-request.sh
  needs:
    - chromatic:publish

.npmjs:
  image: node:22 ## use official image to avoid the .npmrc present in our images
  stage: release
  extends:
    - .rules:tags
  before_script:
    - !reference [.install:dependencies, before_script]
    - !reference [.install:jq, script]
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
  needs:
    - release

bot-publish:
  stage: release
  extends:
    - .rules:tags
    - .install:dependencies
  script:
    - cd tools/release-bot
    - ./bin/release.js
  needs:
    - release

pages:
  stage: release
  extends:
    - .rules:tags
    - .install:dependencies
  script:
    - mkdir public
    - cp _redirects public/
    - !reference [.mg-components:build:storybook, script]
  artifacts:
    paths:
      - public
  needs:
    - release

doc:artifact:
  stage: release
  extends:
    - .rules:tags
    - .install:dependencies
  script:
    - pnpm build --filter=@mgdis/stencil-helpers
    - pnpm doc
    - sh scripts/import-docs.sh
    - curl -u$ARTIFACTORY_USER_LOGIN:$ARTIFACTORY_USER_PASS -T ./core-ui-artifact.tgz "$ARTIFACTORY_URL/core-documentation/core-ui-artifact.tgz"
    - curl -X POST --fail -F token=$CORE_PIPELINE_TOKEN -F ref=$CI_DEFAULT_BRANCH https://gitlab.mgdis.fr/api/v4/projects/2516/trigger/pipeline
  needs:
    - release

#################
# mg-components #
#################

.mg-components:build:
  script:
    - pnpm build --filter=@mgdis/mg-components

.mg-components:build:storybook:
  script:
    - mkdir -p public/storybook
    - !reference [.mg-components:build, script]
    - cd packages/mg-components
    - pnpm storybook:build
    - mv storybook-static/* ../../public/storybook

mg-components:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, mg-components, changes]
  extends:
    - .install:dependencies
  script:
    - !reference [.mg-components:build, script]
    - cd packages/mg-components
    - !reference [.artifact, script]
  needs:
    - lint

storybook-mr:
  stage: mg-components
  rules:
    - if: !reference [.rules:if, mr]
      changes: !reference [.rules:changes, mg-components, changes]
  extends:
    - .install:dependencies
    - .mg-components:build:storybook
  artifacts:
    paths:
      - public
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: 'http://core.pages.mgdis.fr/-/core-ui/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/storybook/index.html'
    auto_stop_in: 1 week
  needs:
    - lint

chromatic:publish:
  stage: mg-components
  variables:
    BRANCH_NAME: '$CI_DEFAULT_BRANCH'
  extends:
    - .install:dependencies
  rules:
    - if: ($CI_COMMIT_MESSAGE !~ /^Merge branch \'renovate\// && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
      variables:
        BRANCH_NAME: 'next'
    - if: $CI_COMMIT_TAG
  script:
    - !reference [.mg-components:build, script]
    - cd packages/mg-components
    - pnpm dlx chromatic --only-changed --project-token=$CHROMATIC_PROJECT_TOKEN --branch-name $BRANCH_NAME --build-script-name storybook:build

mg-components:npmjs:
  extends:
    - .npmjs
  script:
    - !reference [.mg-components:build, script]
    - cd packages/mg-components
    - pnpm publish --no-git-checks --access public

#######################
# notification-center #
#######################

notification-center:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, notification-center, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm build --filter=@mgdis/notification-center
    - cd packages/notification-center
    - !reference [.artifact, script]
  needs:
    - lint

#####################
# linting-angularjs #
#####################

linting-angularjs:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, linting-angularjs, changes]
  extends:
    - .install:dependencies
  script:
    - cd packages/linting-angularjs
    - !reference [.artifact, script]
  needs:
    - lint

###################
# linting-stencil #
###################

linting-stencil:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, linting-stencil, changes]
  extends:
    - .install:dependencies
  script:
    - cd packages/linting-stencil
    - pnpm build
    - !reference [.artifact, script]
  needs:
    - lint

#######
# img #
#######

.img:build:
  script:
    - cd packages/img
    - pnpm build

img:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, img, changes]
  extends:
    - .install:dependencies
  script:
    - !reference [.img:build, script]
    - !reference [.artifact, script]
  needs:
    - lint

img:npmjs:
  extends:
    - .npmjs
  script:
    - !reference [.img:build, script]
    - pnpm publish --no-git-checks --access public

##########
# styles #
##########

.styles:build:
  script:
    - cd packages/styles
    - pnpm build

styles:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, styles, changes]
  extends:
    - .install:dependencies
  script:
    - !reference [.styles:build, script]
    - !reference [.artifact, script]
  needs:
    - lint

styles:npmjs:
  extends:
    - .npmjs
  script:
    - !reference [.styles:build, script]
    - pnpm publish --no-git-checks --access public

######################
# Playwright helpers #
######################

playwright-helpers:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, playwright-helpers, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm build --filter=@mgdis/playwright-helpers
    - cd packages/playwright-helpers
    - !reference [.artifact, script]
  needs:
    - lint

###################
# core-ui-helpers #
###################

.helpers:
  script:
    - pnpm build --filter=@mgdis/core-ui-helpers
    - cd packages/helpers

helpers:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, helpers, changes]
  extends:
    - .install:dependencies
  script:
    - !reference [.helpers, script]
    - !reference [.artifact, script]
  needs:
    - lint

helpers:npmjs:
  extends:
    - .npmjs
  script:
    - !reference [.helpers, script]
    - pnpm publish --no-git-checks --access public

###################
# Stencil helpers #
###################

.stencil-helpers:
  script:
    - pnpm build --filter=@mgdis/stencil-helpers
    - cd packages/stencil-helpers

stencil-helpers:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, stencil-helpers, changes]
  extends:
    - .install:dependencies
  script:
    - !reference [.stencil-helpers, script]
    - !reference [.artifact, script]
  needs:
    - lint

stencil-helpers:npmjs:
  extends:
    - .npmjs
  script:
    - !reference [.stencil-helpers, script]
    - pnpm publish --no-git-checks --access public

##################
# linting-styles #
##################

linting-styles:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, linting-styles, changes]
  extends:
    - .install:dependencies
  script:
    - cd packages/linting-styles
    - !reference [.artifact, script]
  needs:
    - lint

#################
# sanitize-html #
#################

sanitize-html:artifact:
  stage: artifacts
  rules:
    - if: !reference [.rules:if, except-tags]
      changes: !reference [.rules:changes, sanitize-html, changes]
  extends:
    - .install:dependencies
  script:
    - pnpm build --filter=@mgdis/sanitize-html
    - cd packages/sanitize-html
    - !reference [.artifact, script]
  needs:
    - lint
